[
  {
    "vulnerableLines": "22-25",
    "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
    "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
    "fixedCode": "function bug_intou7() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
  },
  {
    "vulnerableLines": "32-35",
    "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
    "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
    "fixedCode": "function bug_intou23() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
  },
  {
    "vulnerableLines": "43-50",
    "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
    "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
    "fixedCode": "function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou14[msg.sender] -= _value;\n    balances_intou14[_to] += _value;\n    return true;\n}"
  },
  {
    "vulnerableLines": "57-64",
    "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
    "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
    "fixedCode": "function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou30[msg.sender] -= _value;\n    balances_intou30[_to] += _value;\n    return true;\n}"
  },
  {
    "vulnerableLines": "70-73",
    "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
    "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
    "fixedCode": "function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1= 0;\n    require(vundflw1 <= type(uint8).max - p_intou8, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou8;\n}"
  },
  {
    "vulnerableLines": "76-79",
    "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
    "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
    "fixedCode": "function bug_intou31() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
  },
  {
    "vulnerableLines": "81-90",
    "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
    "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
    "fixedCode": "function increaseLockTime_intou13(uint _secondsToIncrease) public {\n    require(lockTime_intou13[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou13[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou13() public {\n    require(now > lockTime_intou13[msg.sender]);\n    uint transferValue_intou13 = 10;\n    msg.sender.transfer(transferValue_intou13);\n}"
  },
  {
    "vulnerableLines": "96-103",
    "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
    "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
    "fixedCode": "function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou26[msg.sender] -= _value;\n    balances_intou26[_to] += _value;\n    return true;\n}"
  },
  {
    "vulnerableLines": "105-108",
    "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
    "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
    "fixedCode": "function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1= 0;\n    require(vundflw1 <= type(uint8).max - p_intou20, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou20;\n}"
  },
  {
    "vulnerableLines": "116-119",
    "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
    "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
    "fixedCode": "function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou32, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou32;\n}"
  },
  {
    "vulnerableLines": "121-128",
    "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
    "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
    "fixedCode": "function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou38[msg.sender] -= _value;\n    balances_intou38[_to] += _value;\n    return true;\n}"
  },
  {
    "vulnerableLines": "130-133",
    "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
    "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
    "fixedCode": "function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou4, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou4;\n}"
  },
  {
    "vulnerableLines": "143-146",
    "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
    "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
    "fixedCode": "function bug_intou39() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
  },
  {
    "vulnerableLines": "155-158",
    "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
    "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
    "fixedCode": "function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou36, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou36;\n}"
  },
  {
    "vulnerableLines": "171-174",
    "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
    "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
    "fixedCode": "function bug_intou35() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
  },
  {
    "vulnerableLines": "179-182",
    "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
    "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
    "fixedCode": "function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou40, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou40;\n}"
  },
  {
    "vulnerableLines": "189-198",
    "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
    "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
    "fixedCode": "function increaseLockTime_intou33(uint _secondsToIncrease) public {\n    require(lockTime_intou33[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou33[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou33() public {\n    require(now > lockTime_intou33[msg.sender]);\n    uint transferValue_intou33 = 10;\n    msg.sender.transfer(transferValue_intou33);\n}"
  },
  {
    "vulnerableLines": "203-206",
    "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
    "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
    "fixedCode": "function bug_intou27() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
  }
]