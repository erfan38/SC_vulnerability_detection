pragma solidity >=0.4.21 <0.6.0;

contract DocumentSigner {
  mapping(bytes32 => string) public documents;
  mapping(bytes32 => address[]) public documentSigners;

  modifier validDocument(bytes32 _documentHash) {
    require(bytes(documents[_documentHash]).length != 0);
    _;
  }

  event Sign(bytes32 indexed _document, address indexed _signer);
  event NewDocument(bytes32 _documentHash);

  function submitDocument(string memory _document) public {
    bytes32 _documentHash = computeHash(_document);
    if (bytes(documents[_documentHash]).length == 0) {
      documents[_documentHash] = _document;
      emit NewDocument(_documentHash);
    }
  }

  function signDocument(bytes32 _documentHash) public validDocument(_documentHash) {
    address[] storage _documentSigners = documentSigners[_documentHash];
    for (uint i = 0; i < _documentSigners.length; i++) {
      if (_documentSigners[i] == msg.sender) return;
    }
    _documentSigners.push(msg.sender);
  }

  function getDetail(bytes32 _documentHash) public validDocument(_documentHash) view returns (string memory _document, address[] memory _documentSigners) {
    _document = documents[_documentHash];
    _documentSigners = documentSigners[_documentHash];
  }

  function computeHash(string memory _document) public pure returns (bytes32) {
    return keccak256(abi.encodePacked(_document));
  }
}