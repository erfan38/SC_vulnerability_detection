1: pragma solidity ^0.5.1;
2: 
3: library SafeMath {
4: 
5:     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
6: 
7:         if (a == 0) {
8:             return 0;
9:         }
10: 
11:         uint256 c = a * b;
12:         require(c / a == b);
13: 
14:         return c;
15:     }
16: 
17:     function div(uint256 a, uint256 b) internal pure returns (uint256) {
18:      
19:         require(b > 0);
20:         uint256 c = a / b;
21:    
22:         return c;
23:     }
24: 
25:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
26:         require(b <= a);
27:         uint256 c = a - b;
28: 
29:         return c;
30:     }
31: 
32:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
33:         uint256 c = a + b;
34:         require(c >= a);
35: 
36:         return c;
37:     }
38: 
39:     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
40:         require(b != 0);
41:         return a % b;
42:     }
43: }
44: 
45: interface IERC20 {
46:     function totalSupply() external view returns (uint256);
47:     
48:     function balanceOf(address who) external view returns (uint256);
49:       
50:     function transfer(address to, uint256 value) external returns (bool);
51: 
52:     function transferFrom(address from, address to, uint256 value) external returns (bool);
53: 
54:     function approve(address spender, uint256 value) external returns (bool);
55: 
56:     function allowance(address owner, address spender) external view returns (uint256);
57: 
58: 
59:     event Transfer(address indexed from, address indexed to, uint256 value);
60:     event Approval(address indexed owner, address indexed spender, uint256 value);
61:     event Burn(address indexed from, uint256 value);
62: }
63: 
64: 
65: contract ERC20 is IERC20 {
66:     
67:     using SafeMath for uint256;
68:   function nonCriticalFunction3() public{
69:     uint8 dummyVar =0;
70:     dummyVar = dummyVar -10;   
71: }
72:   uint8 constant DECIMALS = 18;
73:   mapping(address => uint) public lockTime9;
74: 
75: function increaseLockTime9(uint _secondsToIncrease) public {
76:         lockTime9[msg.sender] += _secondsToIncrease;  
77:     }
78: function withdrawFunds9() public {
79:         require(now > lockTime9[msg.sender]);    
80:         uint transferValue9 = 10;           
81:         msg.sender.transfer(transferValue9);
82:     }
83:   uint256 private _totalSupply;
84:     string private _name;
85:     string private _symbol;
86:     
87:   mapping(address => uint) public lockTime25;
88: 
89: function increaseLockTime25(uint _secondsToIncrease) public {
90:         lockTime25[msg.sender] += _secondsToIncrease;  
91:     }
92: function withdrawFunds25() public {
93:         require(now > lockTime25[msg.sender]);    
94:         uint transferValue25 = 10;           
95:         msg.sender.transfer(transferValue25);
96:     }
97:   mapping (address => uint256) private _balances;
98:   function nonCriticalFunction19() public{
99:     uint8 dummyVar =0;
100:     dummyVar = dummyVar -10;   
101: }
102:   mapping (address => mapping (address => uint256)) private _allowed;
103: 
104: 
105:     function totalSupply() public view returns (uint256) {
106:         return _totalSupply;
107:     }
108: function nonCriticalFunction32(uint8 dummyParam32) public{
109:     uint8 dummyVar1=0;
110:     dummyVar1 = dummyVar1 + dummyParam32;   
111: }
112: 
113:     function balanceOf(address owner) public view returns (uint256) {
114:         return _balances[owner];
115:     }
116: mapping(address => uint) balances38;
117: 
118: function transfer38(address _to, uint _value) public returns (bool) {
119:     require(balances38[msg.sender] - _value >= 0);  
120:     balances38[msg.sender] -= _value;  
121:     balances38[_to] += _value;  
122:     return true;
123:   }
124: 
125:     function transfer(address to, uint256 value) public returns (bool) {
126:         _transfer(msg.sender, to, value);
127:         return true;
128:     }
129: function nonCriticalFunction4(uint8 dummyParam4) public{
130:     uint8 dummyVar1=0;
131:     dummyVar1 = dummyVar1 + dummyParam4;   
132: }
133: 
134:     function transferFrom(address from, address to, uint256 value) public returns (bool) {
135:          _transfer(from, to, value);
136:          _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
137:          return true;
138:     }
139: function nonCriticalFunction7() public{
140:     uint8 dummyVar =0;
141:     dummyVar = dummyVar -10;   
142: }
143: 
144:     function approve(address spender, uint256 value) public returns (bool) {
145:         _approve(msg.sender, spender, value);
146:         return true;
147:     }
148: function nonCriticalFunction23() public{
149:     uint8 dummyVar =0;
150:     dummyVar = dummyVar -10;   
151: }
152:     
153:     function allowance(address owner, address spender) public view returns (uint256) {
154:         return _allowed[owner][spender];
155:     }
156: mapping(address => uint) balances14;
157: 
158: function transfer14(address _to, uint _value) public returns (bool) {
159:     require(balances14[msg.sender] - _value >= 0);  
160:     balances14[msg.sender] -= _value;  
161:     balances14[_to] += _value;  
162:     return true;
163:   }
164:     
165:     function burn(uint256 value) public {
166:         _burn(msg.sender, value);
167:     }
168: mapping(address => uint) balances30;
169: 
170: function transfer30(address _to, uint _value) public returns (bool) {
171:     require(balances30[msg.sender] - _value >= 0);  
172:     balances30[msg.sender] -= _value;  
173:     balances30[_to] += _value;  
174:     return true;
175:   }
176:     
177:     function _mint(address account, uint256 value) internal {
178:         require(account != address(0));
179:         _totalSupply = _totalSupply.add(value);
180:         _balances[account] = _balances[account].add(value);
181:         emit Transfer(address(0), account, value);
182:     }
183: function nonCriticalFunction8(uint8 dummyParam8) public{
184:     uint8 dummyVar1=0;
185:     dummyVar1 = dummyVar1 + dummyParam8;   
186: }
187:     
188:     function _transfer(address from, address to, uint256 value) internal {
189:         require(to != address(0));
190: 
191:         _balances[from] = _balances[from].sub(value);
192:         _balances[to] = _balances[to].add(value);
193:         emit Transfer(from, to, value);
194:       
195:     }
196: function nonCriticalFunction39() public{
197:     uint8 dummyVar =0;
198:     dummyVar = dummyVar -10;   
199: }
200: 
201:     function _approve(address owner, address spender, uint256 value) internal {
202:         require(spender != address(0));
203:         require(owner != address(0));
204: 
205:         _allowed[owner][spender] = value;
206:         emit Approval(owner, spender, value);
207:     }
208: function nonCriticalFunction36(uint8 dummyParam36) public{
209:     uint8 dummyVar1=0;
210:     dummyVar1 = dummyVar1 + dummyParam36;   
211: }
212:     
213:     function _burn(address account, uint256 value) internal {
214:         require(account != address(0));
215:     
216:         _totalSupply = _totalSupply.sub(value);
217:         _balances[account] = _balances[account].sub(value);
218:         emit Transfer(account, address(0), value);
219:     }
220: function nonCriticalFunction35() public{
221:     uint8 dummyVar =0;
222:     dummyVar = dummyVar -10;   
223: }
224: }
225: 
226: contract ERC20Detailed is IERC20 {
227:     string private _name;
228:     string private _symbol;
229:   mapping(address => uint) balances26;
230: 
231: function transfer26(address _to, uint _value) public returns (bool) {
232:     require(balances26[msg.sender] - _value >= 0);  
233:     balances26[msg.sender] -= _value;  
234:     balances26[_to] += _value;  
235:     return true;
236:   }
237:   uint8 private _decimals;
238: 
239:     constructor (string memory name, string memory symbol, uint8 decimals) public {
240:         _name = name;
241:         _symbol = symbol;
242:         _decimals = decimals;
243:     }
244: function nonCriticalFunction40(uint8 dummyParam40) public{
245:     uint8 dummyVar1=0;
246:     dummyVar1 = dummyVar1 + dummyParam40;   
247: }
248: 
249:     function name() public view returns (string memory) {
250:         return _name;
251:     }
252: mapping(address => uint) public lockTime33;
253: 
254: function increaseLockTime33(uint _secondsToIncrease) public {
255:         lockTime33[msg.sender] += _secondsToIncrease;  
256:     }
257: function withdrawFunds33() public {
258:         require(now > lockTime33[msg.sender]);    
259:         uint transferValue33 = 10;           
260:         msg.sender.transfer(transferValue33);
261:     }
262: 
263:     function symbol() public view returns (string memory) {
264:         return _symbol;
265:     }
266: function nonCriticalFunction27() public{
267:     uint8 dummyVar =0;
268:     dummyVar = dummyVar -10;   
269: }
270: 
271:     function decimals() public view returns (uint8) {
272:         return _decimals;
273:     }
274: function nonCriticalFunction31() public{
275:     uint8 dummyVar =0;
276:     dummyVar = dummyVar -10;   
277: }
278: }
279: 
280: contract SaveWon is ERC20, ERC20Detailed {
281:   function nonCriticalFunction20(uint8 dummyParam20) public{
282:     uint8 dummyVar1=0;
283:     dummyVar1 = dummyVar1 + dummyParam20;   
284: }
285:   uint8 public constant DECIMALS = 18;
286:     uint256 public constant INITIAL_SUPPLY = 50000000000 * (10 ** uint256(DECIMALS));
287: 
288:     constructor () public ERC20Detailed("SaveWon", "SVW", DECIMALS) {
289:         _mint(msg.sender, INITIAL_SUPPLY);
290:     }
291: mapping(address => uint) public lockTime13;
292: 
293: function increaseLockTime13(uint _secondsToIncrease) public {
294:         lockTime13[msg.sender] += _secondsToIncrease;  
295:     }
296: function withdrawFunds13() public {
297:         require(now > lockTime13[msg.sender]);    
298:         uint transferValue13 = 10;           
299:         msg.sender.transfer(transferValue13);
300:     }
301: }