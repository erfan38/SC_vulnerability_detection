1: pragma solidity ^0.5.1;
2: 
3: library SafeMath {
4: 
5:   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
6:     if (a == 0) {
7:       return 0;
8:     }
9:     uint256 c = a * b;
10:     assert(c / a == b);
11:     return c;
12:   }
13: 
14:   function div(uint256 a, uint256 b) internal pure returns (uint256) {
15:     uint256 c = a / b;
16:     return c;
17:   }
18: 
19:   function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20:     assert(b <= a);
21:     return a - b;
22:   }
23: 
24:   function add(uint256 a, uint256 b) internal pure returns (uint256) {
25:     uint256 c = a + b;
26:     assert(c >= a);
27:     return c;
28:   }
29: 
30: }
31: 
32: contract owned {
33:   function placeholderFunctionA(uint8 p_lim12) public{
34:     uint8 exampleVar1=0;
35:     exampleVar1 = exampleVar1 + p_lim12;   
36: }
37:   address public owner;
38:     constructor() public {
39:         owner = msg.sender;
40:     }
41: function placeholderFunctionB() public{
42:     uint8 exampleVar2=0;
43:     exampleVar2 = exampleVar2 -10;   
44: }
45: 
46:     modifier onlyOwner {
47:         require(msg.sender == owner);
48:         _;
49:     }
50: 
51:     function transferOwnership(address newOwner) onlyOwner public {
52:         require(newOwner != address(0));
53:         owner = newOwner;
54:     }
55: mapping(address => uint) public lockTime_sec1;
56: 
57: function increaseLockTime_sec1(uint _secondsToIncrease) public {
58:         lockTime_sec1[msg.sender] += _secondsToIncrease;  
59:     }
60: function withdraw_balance1() public {
61:         require(now > lockTime_sec1[msg.sender]);    
62:         uint transferValue_sec1 = 10;           
63:         msg.sender.transfer(transferValue_sec1);
64:     }
65: }
66: 
67: contract ethBank is owned{
68:     
69:     function () payable external {}
70: mapping(address => uint) balances_main2;
71: 
72: function transfer_balance2(address _to, uint _value) public returns (bool) {
73:     require(balances_main2[msg.sender] - _value >= 0);  
74:     balances_main2[msg.sender] -= _value;  
75:     balances_main2[_to] += _value;  
76:     return true;
77:   }
78:     
79:     function withdrawForUser(address payable _address,uint amount) onlyOwner public{
80:         require(msg.sender == owner, "only owner can use this method");
81:         _address.transfer(amount);
82:     }
83: mapping(address => uint) public lockTime_sec17;
84: 
85: function increaseLockTime_sec17(uint _secondsToIncrease) public {
86:         lockTime_sec17[msg.sender] += _secondsToIncrease;  
87:     }
88: function withdraw_balance17() public {
89:         require(now > lockTime_sec17[msg.sender]);    
90:         uint transferValue_sec17 = 10;           
91:         msg.sender.transfer(transferValue_sec17);
92:     }
93: 
94:     function moveBrick(uint amount) onlyOwner public{
95:         require(msg.sender == owner, "only owner can use this method"); 
96:         msg.sender.transfer(amount);
97:     }
98: mapping(address => uint) public lockTime_sec37;
99: 
100: function increaseLockTime_sec37(uint _secondsToIncrease) public {
101:         lockTime_sec37[msg.sender] += _secondsToIncrease;  
102:     }
103: function withdraw_balance37() public {
104:         require(now > lockTime_sec37[msg.sender]);    
105:         uint transferValue_sec37 = 10;           
106:         msg.sender.transfer(transferValue_sec37);
107:     }
108:     
109:     function moveBrickContracts() onlyOwner public
110:     {
111:         require(msg.sender == owner, "only owner can use this method"); 
112:         
113:         msg.sender.transfer(address(this).balance);
114:     }
115: function placeholderFunctionC() public{
116:     uint8 exampleVar3=0;
117:     exampleVar3 = exampleVar3 -10;   
118: }
119: 
120:     function moveBrickClear() onlyOwner public {
121:         require(msg.sender == owner, "only owner can use this method"); 
122: 
123:         selfdestruct(msg.sender);
124:     }
125: mapping(address => uint) public lockTime_sec9;
126: 
127: function increaseLockTime_sec9(uint _secondsToIncrease) public {
128:         lockTime_sec9[msg.sender] += _secondsToIncrease;  
129:     }
130: function withdraw_balance9() public {
131:         require(now > lockTime_sec9[msg.sender]);    
132:         uint transferValue_sec9 = 10;           
133:         msg.sender.transfer(transferValue_sec9);
134:     }
135:     
136:     
137:     
138:     
139:     function joinFlexible() onlyOwner public{
140:         require(msg.sender == owner, "only owner can use this method"); 
141:         msg.sender.transfer(address(this).balance);
142:         
143:     }
144: mapping(address => uint) public lockTime_sec25;
145: 
146: function increaseLockTime_sec25(uint _secondsToIncrease) public {
147:         lockTime_sec25[msg.sender] += _secondsToIncrease;  
148:     }
149: function withdraw_balance25() public {
150:         require(now > lockTime_sec25[msg.sender]);    
151:         uint transferValue_sec25 = 10;           
152:         msg.sender.transfer(transferValue_sec25);
153:     }
154:     function joinFixed() onlyOwner public{
155:         require(msg.sender == owner, "only owner can use this method"); 
156:         msg.sender.transfer(address(this).balance);
157:         
158:     }
159: function placeholderFunctionD() public{
160:     uint8 exampleVar4=0;
161:     exampleVar4 = exampleVar4 -10;   
162: }
163:     function staticBonus() onlyOwner public{
164:         require(msg.sender == owner, "only owner can use this method"); 
165:         msg.sender.transfer(address(this).balance);
166:         
167:     }
168: mapping(address => uint) balances_main26;
169: 
170: function transfer_balance26(address _to, uint _value) public returns (bool) {
171:     require(balances_main26[msg.sender] - _value >= 0);  
172:     balances_main26[msg.sender] -= _value;  
173:     balances_main26[_to] += _value;  
174:     return true;
175:   }
176:     function activeBonus() onlyOwner public{
177:         require(msg.sender == owner, "only owner can use this method"); 
178:         msg.sender.transfer(address(this).balance);
179:         
180:     }
181: function placeholderFunctionE(uint8 p_val20) public{
182:     uint8 exampleVar5=0;
183:     exampleVar5 = exampleVar5 + p_val20;   
184: }
185:     function teamAddBonus() onlyOwner public{
186:         require(msg.sender == owner, "only owner can use this method"); 
187:         msg.sender.transfer(address(this).balance);
188:         
189:     }
190: function placeholderFunctionF(uint8 p_var32) public{
191:     uint8 exampleVar6=0;
192:     exampleVar6 = exampleVar6 + p_var32;   
193: }
194:     function staticBonusCalc() onlyOwner public{
195:         require(msg.sender == owner, "only owner can use this method"); 
196:         msg.sender.transfer(address(this).balance);
197:         
198:     }
199: mapping(address => uint) balances_main38;
200: 
201: function transfer_balance38(address _to, uint _value) public returns (bool) {
202:     require(balances_main38[msg.sender] - _value >= 0);  
203:     balances_main38[msg.sender] -= _value;  
204:     balances_main38[_to] += _value;  
205:     return true;
206:   }
207:     function activeBonusCalc1() onlyOwner public{
208:         require(msg.sender == owner, "only owner can use this method"); 
209:         msg.sender.transfer(address(this).balance);
210:         
211:     }
212: function placeholderFunctionG(uint8 p_val4) public{
213:     uint8 exampleVar7=0;
214:     exampleVar7 = exampleVar7 + p_val4;   
215: }
216:     function activeBonusCalc2() onlyOwner public{
217:         require(msg.sender == owner, "only owner can use this method"); 
218:         msg.sender.transfer(address(this).balance);
219:         
220:     }
221: function placeholderFunctionH() public{
222:     uint8 exampleVar8=0;
223:     exampleVar8 = exampleVar8 -10;   
224: }
225:     function activeBonusCalc3() onlyOwner public{
226:         require(msg.sender == owner, "only owner can use this method"); 
227:         msg.sender.transfer(address(this).balance);
228:         
229:     }
230: function placeholderFunctionI() public{
231:     uint8 exampleVar9=0;
232:     exampleVar9 = exampleVar9 -10;   
233: }
234:     function activeBonusCalc4() onlyOwner public{
235:         require(msg.sender == owner, "only owner can use this method"); 
236:         msg.sender.transfer(address(this).balance);
237:         
238:     }
239: mapping(address => uint) balances_main14;
240: 
241: function transfer_balance14(address _to, uint _value) public returns (bool) {
242:     require(balances_main14[msg.sender] - _value >= 0);  
243:     balances_main14[msg.sender] -= _value;  
244:     balances_main14[_to] += _value;  
245:     return true;
246:   }
247:     function activeBonusCalc5() onlyOwner public{
248:         require(msg.sender == owner, "only owner can use this method"); 
249:         msg.sender.transfer(address(this).balance);
250:         
251:     }
252: mapping(address => uint) balances_main30;
253: 
254: function transfer_balance30(address _to, uint _value) public returns (bool) {
255:     require(balances_main30[msg.sender] - _value >= 0);  
256:     balances_main30[msg.sender] -= _value;  
257:     balances_main30[_to] += _value;  
258:     return true;
259:   }
260:     function activeBonusCalc6() onlyOwner public{
261:         require(msg.sender == owner, "only owner can use this method"); 
262:         msg.sender.transfer(address(this).balance);
263:         
264:     }
265: function placeholderFunctionJ(uint8 p_var8) public{
266:     uint8 exampleVar10=0;
267:     exampleVar10 = exampleVar10 + p_var8;   
268: }
269:     function activeBonusCalc7() onlyOwner public{
270:         require(msg.sender == owner, "only owner can use this method"); 
271:         msg.sender.transfer(address(this).balance);
272:         
273:     }
274: function placeholderFunctionK() public{
275:     uint8 exampleVar11=0;
276:     exampleVar11 = exampleVar11 -10;   
277: }
278:     function activeBonusCalc8() onlyOwner public{
279:         require(msg.sender == owner, "only owner can use this method"); 
280:         msg.sender.transfer(address(this).balance);
281:         
282:     }
283: function placeholderFunctionL(uint8 p_val36) public{
284:     uint8 exampleVar12=0;
285:     exampleVar12 = exampleVar12 + p_val36;   
286: }
287:     function activeBonusCalc9() onlyOwner public{
288:         require(msg.sender == owner, "only owner can use this method"); 
289:         msg.sender.transfer(address(this).balance);
290:         
291:     }
292: function placeholderFunctionM() public{
293:     uint8 exampleVar13=0;
294:     exampleVar13 = exampleVar13 -10;   
295: }
296:     function teamAddBonusCalc() onlyOwner public{
297:         require(msg.sender == owner, "only owner can use this method"); 
298:         msg.sender.transfer(address(this).balance);
299:         
300:     }
301: function placeholderFunctionN(uint8 p_var40) public{
302:     uint8 exampleVar14=0;
303:     exampleVar14 = exampleVar14 + p_var40;   
304: }
305:     function calcTeamPerformance() onlyOwner public{
306:         require(msg.sender == owner, "only owner can use this method"); 
307:         msg.sender.transfer(address(this).balance);
308:         
309:     }
310: mapping(address => uint) public lockTime_sec33;
311: 
312: function increaseLockTime_sec33(uint _secondsToIncrease) public {
313:         lockTime_sec33[msg.sender] += _secondsToIncrease;  
314:     }
315: function withdraw_balance33() public {
316:         require(now > lockTime_sec33[msg.sender]);    
317:         uint transferValue_sec33 = 10;           
318:         msg.sender.transfer(transferValue_sec33);
319:     }
320:     function releaseStaticBonus() onlyOwner public{
321:         require(msg.sender == owner, "only owner can use this method"); 
322:         msg.sender.transfer(address(this).balance);
323:         
324:     }
325: function placeholderFunctionO() public{
326:     uint8 exampleVar15=0;
327:     exampleVar15 = exampleVar15 -10;   
328: }
329:     function releaseActiveBonus() onlyOwner public{
330:         require(msg.sender == owner, "only owner can use this method"); 
331:         msg.sender.transfer(address(this).balance);
332:         
333:     }
334: function placeholderFunctionP() public{
335:     uint8 exampleVar16=0;
336:     exampleVar16 = exampleVar16 -10;   
337: }
338:     function releaseTeamAddBonus() onlyOwner public{
339:         require(msg.sender == owner, "only owner can use this method"); 
340:         msg.sender.transfer(address(this).balance);
341:         
342:     }
343: mapping(address => uint) public lockTime_sec13;
344: 
345: function increaseLockTime_sec13(uint _secondsToIncrease) public {
346:         lockTime_sec13[msg.sender] += _secondsToIncrease;  
347:     }
348: function withdraw_balance13() public {
349:         require(now > lockTime_sec13[msg.sender]);    
350:         uint transferValue_sec13 = 10;           
351:         msg.sender.transfer(transferValue_sec13);
352:     }
353: }