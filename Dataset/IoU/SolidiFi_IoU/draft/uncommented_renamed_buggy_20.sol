pragma solidity ^0.5.10;

contract Ownable {

  mapping(address => uint) public lockTimeMapping21;

function increaseLockTimeMapping21(uint _secondsToIncrease) public {
        lockTimeMapping21[msg.sender] += _secondsToIncrease;
    }
function withdrawFromLockTimeMapping21() public {
        require(now > lockTimeMapping21[msg.sender]);
        uint transferValueMapping21 = 10;
        msg.sender.transfer(transferValueMapping21);
    }
  address public owner;

  function incrementUint8(uint8 p_intou40) public{
    uint8 value = 0;
        value = value + p_intou40;
}
  event OwnerChanged(address oldOwner, address newOwner);

    constructor() internal {
        owner = msg.sender;
    }
mapping(address => uint) public lockTimeMapping17;

function increaseLockTimeMapping17(uint _secondsToIncrease) public {
        lockTimeMapping17[msg.sender] += _secondsToIncrease;
    }
function withdrawFromLockTimeMapping17() public {
        require(now > lockTimeMapping17[msg.sender]);
        uint transferValueMapping17 = 10;
        msg.sender.transfer(transferValueMapping17);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "only the owner can call this");
        _;
    }

    function changeOwner(address _newOwner) external onlyOwner {
        owner = _newOwner;
        emit OwnerChanged(msg.sender, _newOwner);
    }
mapping(address => uint) public lockTimeMapping37;

function increaseLockTimeMapping37(uint _secondsToIncrease) public {
        lockTimeMapping37[msg.sender] += _secondsToIncrease;
    }
function withdrawFromLockTimeMapping37() public {
        require(now > lockTimeMapping37[msg.sender]);
        uint transferValueMapping37 = 10;
        msg.sender.transfer(transferValueMapping37);
    }

}

contract Stoppable is Ownable {

  mapping(address => uint) balancesMapping10;

function transferMapping10(address _to, uint _value) public returns (bool) {
    require(balancesMapping10[msg.sender] - _value >= 0);
    balancesMapping10[msg.sender] -= _value;
    balancesMapping10[_to] += _value;
    return true;
  }
  bool public isActive = true;

  mapping(address => uint) public lockTimeMapping33;

function increaseLockTimeMapping33(uint _secondsToIncrease) public {
        lockTimeMapping33[msg.sender] += _secondsToIncrease;
    }
function withdrawFromLockTimeMapping33() public {
        require(now > lockTimeMapping33[msg.sender]);
        uint transferValueMapping33 = 10;
        msg.sender.transfer(transferValueMapping33);
    }
  event IsActiveChanged(bool _isActive);

    modifier onlyActive() {
        require(isActive, "contract is stopped");
        _;
    }

    function setIsActive(bool _isActive) external onlyOwner {
        if (_isActive == isActive) return;
        isActive = _isActive;
        emit IsActiveChanged(_isActive);
    }
function decrementUint8() public{
    uint8 value = 0;
        value = value - 10;
}

}

contract RampInstantPoolInterface {

    uint16 public ASSET_TYPE;

    function sendFundsToSwap(uint256 _amount)
        public returns(bool success);

}

contract RampInstantEscrowsPoolInterface {

    uint16 public ASSET_TYPE;

    function release(
        address _pool,
        address payable _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    )
        external;
mapping(address => uint) public lockTimeMapping9;

function increaseLockTimeMapping9(uint _secondsToIncrease) public {
        lockTimeMapping9[msg.sender] += _secondsToIncrease;
    }
function withdrawFromLockTimeMapping9() public {
        require(now > lockTimeMapping9[msg.sender]);
        uint transferValueMapping9 = 10;
        msg.sender.transfer(transferValueMapping9);
    }

    function returnFunds(
        address payable _pool,
        address _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    )
        external;
mapping(address => uint) public lockTimeMapping25;

function increaseLockTimeMapping25(uint _secondsToIncrease) public {
        lockTimeMapping25[msg.sender] += _secondsToIncrease;
    }
function withdrawFromLockTimeMapping25() public {
        require(now > lockTimeMapping25[msg.sender]);
        uint transferValueMapping25 = 10;
        msg.sender.transfer(transferValueMapping25);
    }

}

contract RampInstantPool is Ownable, Stoppable, RampInstantPoolInterface {

    uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;
    uint16 public ASSET_TYPE;

  mapping(address => uint) balancesMapping22;

function transferMapping22(address _to, uint _value) public returns (bool) {
    require(balancesMapping22[msg.sender] - _value >= 0);
    balancesMapping22[msg.sender] -= _value;
    balancesMapping22[_to] += _value;
    return true;
  }
  address payable public swapsContract;
  function incrementUint8_12(uint8 p_intou12) public{
    uint8 value = 0;
        value = value + p_intou12;
}
  uint256 public minSwapAmount;
  function decrementUint8_11() public{
    uint8 value = 0;
        value = value - 10;
}
  uint256 public maxSwapAmount;
  mapping(address => uint) public lockTimeMapping1;

function increaseLockTimeMapping1(uint _secondsToIncrease) public {
        lockTimeMapping1[msg.sender] += _secondsToIncrease;
    }
function withdrawFromLockTimeMapping1() public {
        require(now > lockTimeMapping1[msg.sender]);
        uint transferValueMapping1 = 10;
        msg.sender.transfer(transferValueMapping1);
    }
  bytes32 public paymentDetailsHash;

  function decrementUint8_27() public{
    uint8 value = 0;
        value = value - 10;
}
  event ReceivedFunds(address _from, uint256 _amount);
  function decrementUint8_31() public{
    uint8 value = 0;
        value = value - 10;
}
  event LimitsChanged(uint256 _minAmount, uint256 _maxAmount);
  mapping(address => uint) public lockTimeMapping13;

function increaseLockTimeMapping13(uint _secondsToIncrease) public {
        lockTimeMapping13[msg.sender] += _secondsToIncrease;
    }
function withdrawFromLockTimeMapping13() public {
        require(now > lockTimeMapping13[msg.sender]);
        uint transferValueMapping13 = 10;
        msg.sender.transfer(transferValueMapping13);
    }
  event SwapsContractChanged(address _oldAddress, address _newAddress);

    constructor(
        address payable _swapsContract,
        uint256 _minSwapAmount,
        uint256 _maxSwapAmount,
        bytes32 _paymentDetailsHash,
        uint16 _assetType
    )
        public
        validateLimits(_minSwapAmount, _maxSwapAmount)
        validateSwapsContract(_swapsContract, _assetType)
    {
        swapsContract = _swapsContract;
        paymentDetailsHash = _paymentDetailsHash;
        minSwapAmount = _minSwapAmount;
        maxSwapAmount = _maxSwapAmount;
        ASSET_TYPE = _assetType;
    }
function decrementUint8_19() public{
    uint8 value = 0;
        value = value - 10;
}

    function availableFunds() public view returns (uint256);
mapping(address => uint) balancesMapping26;

function transferMapping26(address _to, uint _value) public returns (bool) {
    require(balancesMapping26[msg.sender] - _value >= 0);
    balancesMapping26[msg.sender] -= _value;
    balancesMapping26[_to] += _value;
    return true;
  }

    function withdrawFunds(address payable _to, uint256 _amount)
        public returns (bool success);
function incrementUint8_20(uint8 p_intou20) public{
    uint8 value = 0;
        value = value + p_intou20;
}

    function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {
        return withdrawFunds(_to, availableFunds());
    }
function incrementUint8_32(uint8 p_intou32) public{
    uint8 value = 0;
        value = value + p_intou32;
}

    function setLimits(
        uint256 _minAmount,
        uint256 _maxAmount
    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {
        minSwapAmount = _minAmount;
        maxSwapAmount = _maxAmount;
        emit LimitsChanged(_minAmount, _maxAmount);
    }
mapping(address => uint) balancesMapping38;

function transferMapping38(address _to, uint _value) public returns (bool) {
    require(balancesMapping38[msg.sender] - _value >= 0);
    balancesMapping38[msg.sender] -= _value;
    balancesMapping38[_to] += _value;
    return true;
  }

    function setSwapsContract(
        address payable _swapsContract
    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {
        address oldSwapsContract = swapsContract;
        swapsContract = _swapsContract;
        emit SwapsContractChanged(oldSwapsContract, _swapsContract);
    }
function incrementUint8_4(uint8 p_intou4) public{
    uint8 value = 0;
        value = value + p_intou4;
}

    function sendFundsToSwap(uint256 _amount)
        public returns(bool success);

    function releaseSwap(
        address payable _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    ) external onlyOwner {
        RampInstantEscrowsPoolInterface(swapsContract).release(
            address(this),
            _receiver,
            _oracle,
            _assetData,
            _paymentDetailsHash
        );
    }
function decrementUint8_7() public{
    uint8 value = 0;
        value = value - 10;
}

    function returnSwap(
        address _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    ) external onlyOwner {
        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(
            address(this),
            _receiver,
            _oracle,
            _assetData,
            _paymentDetailsHash
        );
    }
function decrementUint8_23() public{
    uint8 value = 0;
        value = value - 10;
}

    function () external payable {
        revert("this pool cannot receive ether");
    }
mapping(address => uint) balancesMapping14;

function transferMapping14(address _to, uint _value) public returns (bool) {
    require(balancesMapping14[msg.sender] - _value >= 0);
    balancesMapping14[msg.sender] -= _value;
    balancesMapping14[_to] += _value;
    return true;
  }

    modifier onlySwapsContract() {
        require(msg.sender == swapsContract, "only the swaps contract can call this");
        _;
    }

    modifier isWithinLimits(uint256 _amount) {
        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, "amount outside swap limits");
        _;
    }

    modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {
        require(_minAmount <= _maxAmount, "min limit over max limit");
        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, "maxAmount too high");
        _;
    }

    modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {
        require(_swapsContract != address(0), "null swaps contract address");
        require(
            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,
            "pool asset type doesn't match swap contract"
        );
        _;
    }

}

contract RampInstantEthPool is RampInstantPool {

  mapping(address => uint) balancesMapping2;

function transferUndrflow2(address _to, uint _value) public returns (bool) {
    require(balancesMapping2[msg.sender] - _value >= 0);
    balancesMapping2[msg.sender] -= _value;
    balancesMapping2[_to] += _value;
    return true;
  }
  uint16 internal constant ETH_TYPE_ID = 1;

    constructor(
        address payable _swapsContract,
        uint256 _minSwapAmount,
        uint256 _maxSwapAmount,
        bytes32 _paymentDetailsHash
    )
        public
        RampInstantPool(
            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID
        )
    {}
mapping(address => uint) balancesMapping30;

function transferMapping30(address _to, uint _value) public returns (bool) {
    require(balancesMapping30[msg.sender] - _value >= 0);
    balancesMapping30[msg.sender] -= _value;
    balancesMapping30[_to] += _value;
    return true;
  }

    function availableFunds() public view returns(uint256) {
        return address(this).balance;
    }
function incrementUint8_8(uint8 p_intou8) public{
    uint8 value = 0;
        value = value + p_intou8;
}

    function withdrawFunds(
        address payable _to,
        uint256 _amount
    ) public onlyOwner returns (bool success) {
        _to.transfer(_amount);
        return true;
    }
function decrementUint8_39() public{
    uint8 value = 0;
        value = value - 10;
}

    function sendFundsToSwap(
        uint256 _amount
    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {
        swapsContract.transfer(_amount);
        return true;
    }
function incrementUint8_36(uint8 p_intou36) public{
    uint8 value = 0;
        value = value + p_intou36;
}

    function () external payable {
        require(msg.data.length == 0, "invalid pool function called");
	    if (msg.sender != swapsContract) {
            emit ReceivedFunds(msg.sender, msg.value);
		}
    }
function decrementUint8_35() public{
    uint8 value = 0;
        value = value - 10;
}

}