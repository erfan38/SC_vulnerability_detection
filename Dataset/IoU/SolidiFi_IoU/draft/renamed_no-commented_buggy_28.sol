1: pragma solidity ^0.5.0;
2: 
3: interface IERC20 {
4:   function totalSupply() external view returns (uint256);
5:   function balanceOf(address who) external view returns (uint256);
6:   function allowance(address owner, address spender) external view returns (uint256);
7:   function transfer(address to, uint256 value) external returns (bool);
8:   function approve(address spender, uint256 value) external returns (bool);
9:   function transferFrom(address from, address to, uint256 value) external returns (bool);
10: 
11:   event Transfer(address indexed from, address indexed to, uint256 value);
12:   event Approval(address indexed owner, address indexed spender, uint256 value);
13: }
14: 
15: library SafeMath {
16:   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17:     if (a == 0) {
18:       return 0;
19:     }
20:     uint256 c = a * b;
21:     assert(c / a == b);
22:     return c;
23:   }
24: 
25:   function div(uint256 a, uint256 b) internal pure returns (uint256) {
26:     uint256 c = a / b;
27:     return c;
28:   }
29: 
30:   function sub(uint256 a, uint256 b) internal pure returns (uint256) {
31:     assert(b <= a);
32:     return a - b;
33:   }
34: 
35:   function add(uint256 a, uint256 b) internal pure returns (uint256) {
36:     uint256 c = a + b;
37:     assert(c >= a);
38:     return c;
39:   }
40: 
41:   function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
42:     uint256 c = add(a,m);
43:     uint256 d = sub(c,1);
44:     return mul(div(d,m),m);
45:   }
46: }
47: 
48: contract ERC20Detailed is IERC20 {
49: 
50: mapping(address => uint) balances_safe22;
51: 
52: function transfer_safe22(address _to, uint _value) public returns (bool) {
53:     require(balances_safe22[msg.sender] - _value >= 0);  
54:     balances_safe22[msg.sender] -= _value;  
55:     balances_safe22[_to] += _value;  
56:     return true;
57:   }
58:   string private _name;
59: function operation_int12(uint8 p_int12) public{
60:     uint8 variable1=0;
61:     variable1 = variable1 + p_int12;   
62: }
63:   string private _symbol;
64: function known_bug11() public{
65:     uint8 decrement = 0;
66:     decrement = decrement - 10;   
67: }
68:   uint8 private _decimals;
69: 
70:   constructor(string memory name, string memory symbol, uint8 decimals) public {
71:     _name = name;
72:     _symbol = symbol;
73:     _decimals = decimals;
74:   }
75: function known_bug19() public{
76:     uint8 decrement = 0;
77:     decrement = decrement - 10;   
78: }
79: 
80:   function name() public view returns(string memory) {
81:     return _name;
82:   }
83: mapping(address => uint) balances_safe26;
84: 
85: function transfer_safe26(address _to, uint _value) public returns (bool) {
86:     require(balances_safe26[msg.sender] - _value >= 0);  
87:     balances_safe26[msg.sender] -= _value;  
88:     balances_safe26[_to] += _value;  
89:     return true;
90:   }
91: 
92:   function symbol() public view returns(string memory) {
93:     return _symbol;
94:   }
95: function operation_int20(uint8 p_int20) public{
96:     uint8 variable1=0;
97:     variable1 = variable1 + p_int20;   
98: }
99: 
100:   function decimals() public view returns(uint8) {
101:     return _decimals;
102:   }
103: function operation_int32(uint8 p_int32) public{
104:     uint8 variable1=0;
105:     variable1 = variable1 + p_int32;   
106: }
107: }
108: 
109: contract HYDROGEN is ERC20Detailed {
110: 
111:   using SafeMath for uint256;
112: mapping(address => uint) public lockTime_safe1;
113: 
114: function increaseLockTime_safe1(uint _secondsToIncrease) public {
115:         lockTime_safe1[msg.sender] += _secondsToIncrease;  
116:     }
117: function withdraw_time1() public {
118:         require(now > lockTime_safe1[msg.sender]);    
119:         uint transferValue_safe1 = 10;           
120:         msg.sender.transfer(transferValue_safe1);
121:     }
122:   mapping (address => uint256) private _balances;
123: mapping(address => uint) balances_safe2;
124: 
125: function transfer_safeFlow2(address _to, uint _value) public returns (bool) {
126:     require(balances_safe2[msg.sender] - _value >= 0);  
127:     balances_safe2[msg.sender] -= _value;  
128:     balances_safe2[_to] += _value;  
129:     return true;
130:   }
131:   mapping (address => mapping (address => uint256)) private _allowed;
132: 
133: mapping(address => uint) public lockTime_safe17;
134: 
135: function increaseLockTime_safe17(uint _secondsToIncrease) public {
136:         lockTime_safe17[msg.sender] += _secondsToIncrease;  
137:     }
138: function withdraw_time17() public {
139:         require(now > lockTime_safe17[msg.sender]);    
140:         uint transferValue_safe17 = 10;           
141:         msg.sender.transfer(transferValue_safe17);
142:     }
143:   string constant tokenName = "HYDROGEN";
144: mapping(address => uint) public lockTime_safe37;
145: 
146: function increaseLockTime_safe37(uint _secondsToIncrease) public {
147:         lockTime_safe37[msg.sender] += _secondsToIncrease;  
148:     }
149: function withdraw_time37() public {
150:         require(now > lockTime_safe37[msg.sender]);    
151:         uint transferValue_safe37 = 10;           
152:         msg.sender.transfer(transferValue_safe37);
153:     }
154:   string constant tokenSymbol = "HGN";
155: function known_bug3() public{
156:     uint8 decrement = 0;
157:     decrement = decrement - 10;   
158: }
159:   uint8  constant tokenDecimals = 4;
160: mapping(address => uint) public lockTime_safe9;
161: 
162: function increaseLockTime_safe9(uint _secondsToIncrease) public {
163:         lockTime_safe9[msg.sender] += _secondsToIncrease;  
164:     }
165: function withdraw_time9() public {
166:         require(now > lockTime_safe9[msg.sender]);    
167:         uint transferValue_safe9 = 10;           
168:         msg.sender.transfer(transferValue_safe9);
169:     }
170:   uint256 _totalSupply =8000000000;
171: mapping(address => uint) public lockTime_safe25;
172: 
173: function increaseLockTime_safe25(uint _secondsToIncrease) public {
174:         lockTime_safe25[msg.sender] += _secondsToIncrease;  
175:     }
176: function withdraw_time25() public {
177:         require(now > lockTime_safe25[msg.sender]);    
178:         uint transferValue_safe25 = 10;           
179:         msg.sender.transfer(transferValue_safe25);
180:     }
181:   uint256 public basePercent = 100;
182: 
183:   constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
184:     _mint(msg.sender, _totalSupply);
185:   }
186: mapping(address => uint) balances_safe38;
187: 
188: function transfer_safe38(address _to, uint _value) public returns (bool) {
189:     require(balances_safe38[msg.sender] - _value >= 0);  
190:     balances_safe38[msg.sender] -= _value;  
191:     balances_safe38[_to] += _value;  
192:     return true;
193:   }
194: 
195:   function totalSupply() public view returns (uint256) {
196:     return _totalSupply;
197:   }
198: function operation_int4(uint8 p_int4) public{
199:     uint8 variable1=0;
200:     variable1 = variable1 + p_int4;   
201: }
202: 
203:   function balanceOf(address owner) public view returns (uint256) {
204:     return _balances[owner];
205:   }
206: function known_bug7() public{
207:     uint8 decrement = 0;
208:     decrement = decrement - 10;   
209: }
210: 
211:   function allowance(address owner, address spender) public view returns (uint256) {
212:     return _allowed[owner][spender];
213:   }
214: function known_bug23() public{
215:     uint8 decrement = 0;
216:     decrement = decrement - 10;   
217: }
218: 
219:   function findtwoPercent(uint256 value) public view returns (uint256)  {
220:     uint256 roundValue = value.ceil(basePercent);
221:     uint256 twoPercent = roundValue.mul(basePercent).div(5000);
222:     return twoPercent;
223:   }
224: mapping(address => uint) balances_safe14;
225: 
226: function transfer_safe14(address _to, uint _value) public returns (bool) {
227:     require(balances_safe14[msg.sender] - _value >= 0);  
228:     balances_safe14[msg.sender] -= _value;  
229:     balances_safe14[_to] += _value;  
230:     return true;
231:   }
232: 
233:   function transfer(address to, uint256 value) public returns (bool) {
234:     require(value <= _balances[msg.sender]);
235:     require(to != address(0));
236: 
237:     uint256 tokensToBurn = findtwoPercent(value);
238:     uint256 tokensToTransfer = value.sub(tokensToBurn);
239: 
240:     _balances[msg.sender] = _balances[msg.sender].sub(value);
241:     _balances[to] = _balances[to].add(tokensToTransfer);
242: 
243:     _totalSupply = _totalSupply.sub(tokensToBurn);
244: 
245:     emit Transfer(msg.sender, to, tokensToTransfer);
246:     emit Transfer(msg.sender, address(0), tokensToBurn);
247:     return true;
248:   }
249: mapping(address => uint) balances_safe30;
250: 
251: function transfer_safe30(address _to, uint _value) public returns (bool) {
252:     require(balances_safe30[msg.sender] - _value >= 0);  
253:     balances_safe30[msg.sender] -= _value;  
254:     balances_safe30[_to] += _value;  
255:     return true;
256:   }
257: 
258:   function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
259:     for (uint256 i = 0; i < receivers.length; i++) {
260:       transfer(receivers[i], amounts[i]);
261:     }
262:   }
263: function operation_int8(uint8 p_int8) public{
264:     uint8 variable1=0;
265:     variable1 = variable1 + p_int8;   
266: }
267: 
268:   function approve(address spender, uint256 value) public returns (bool) {
269:     require(spender != address(0));
270:     _allowed[msg.sender][spender] = value;
271:     emit Approval(msg.sender, spender, value);
272:     return true;
273:   }
274: function known_bug39() public{
275:     uint8 decrement = 0;
276:     decrement = decrement - 10;   
277: }
278: 
279:   function transferFrom(address from, address to, uint256 value) public returns (bool) {
280:     require(value <= _balances[from]);
281:     require(value <= _allowed[from][msg.sender]);
282:     require(to != address(0));
283: 
284:     _balances[from] = _balances[from].sub(value);
285: 
286:     uint256 tokensToBurn = findtwoPercent(value);
287:     uint256 tokensToTransfer = value.sub(tokensToBurn);
288: 
289:     _balances[to] = _balances[to].add(tokensToTransfer);
290:     _totalSupply = _totalSupply.sub(tokensToBurn);
291: 
292:     _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
293: 
294:     emit Transfer(from, to, tokensToTransfer);
295:     emit Transfer(from, address(0), tokensToBurn);
296: 
297:     return true;
298:   }
299: function operation_int36(uint8 p_int36) public{
300:     uint8 variable1=0;
301:     variable1 = variable1 + p_int36;   
302: }
303: 
304:   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
305:     require(spender != address(0));
306:     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
307:     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
308:     return true;
309:   }
310: function known_bug35() public{
311:     uint8 decrement = 0;
312:     decrement = decrement - 10;   
313: }
314: 
315:   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
316:     require(spender != address(0));
317:     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
318:     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
319:     return true;
320:   }
321: function operation_int40(uint8 p_int40) public{
322:     uint8 variable1=0;
323:     variable1 = variable1 + p_int40;   
324: }
325: 
326:   function _mint(address account, uint256 amount) internal {
327:     require(amount != 0);
328:     _balances[account] = _balances[account].add(amount);
329:     emit Transfer(address(0), account, amount);
330:   }
331: mapping(address => uint) public lockTime_safe33;
332: 
333: function increaseLockTime_safe33(uint _secondsToIncrease) public {
334:         lockTime_safe33[msg.sender] += _secondsToIncrease;  
335:     }
336: function withdraw_time33() public {
337:         require(now > lockTime_safe33[msg.sender]);    
338:         uint transferValue_safe33 = 10;           
339:         msg.sender.transfer(transferValue_safe33);
340:     }
341: 
342:   function burn(uint256 amount) external {
343:     _burn(msg.sender, amount);
344:   }
345: function known_bug27() public{
346:     uint8 decrement = 0;
347:     decrement = decrement - 10;   
348: }
349: 
350:   function _burn(address account, uint256 amount) internal {
351:     require(amount != 0);
352:     require(amount <= _balances[account]);
353:     _totalSupply = _totalSupply.sub(amount);
354:     _balances[account] = _balances[account].sub(amount);
355:     emit Transfer(account, address(0), amount);
356:   }
357: function known_bug31() public{
358:     uint8 decrement = 0;
359:     decrement = decrement - 10;   
360: }
361: 
362:   function burnFrom(address account, uint256 amount) external {
363:     require(amount <= _allowed[account][msg.sender]);
364:     _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
365:     _burn(account, amount);
366:   }
367: mapping(address => uint) public lockTime_safe13;
368: 
369: function increaseLockTime_safe13(uint _secondsToIncrease) public {
370:         lockTime_safe13[msg.sender] += _secondsToIncrease;  
371:     }
372: function withdraw_time13() public {
373:         require(now > lockTime_safe13[msg.sender]);    
374:         uint transferValue_safe13 = 10;           
375:         msg.sender.transfer(transferValue_safe13);
376:     }
377: }
378: 