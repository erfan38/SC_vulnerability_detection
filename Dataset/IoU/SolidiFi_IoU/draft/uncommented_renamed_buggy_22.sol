/**
 *Submitted for verification at Etherscan.io on 2019-09-27
*/

pragma solidity >=0.5.1;

contract owned {
  function incrementCounter24(uint8 p_counter24) public{
    uint8 counterIncrement24=0;
    counterIncrement24 = counterIncrement24 + p_counter24;   // overflow bug
}
  address public owner;

    constructor() public {
        owner = msg.sender;
    }
function decrementCounter11() public{
    uint8 counterDecrement11 =0;
    counterDecrement11 = counterDecrement11 -10;   // underflow bug
}

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
mapping(address => uint) public timedLock1;

function increaseTimedLock1(uint _secondsToIncrease) public {
        timedLock1[msg.sender] += _secondsToIncrease;  //overflow
    }
function withdrawLocked1() public {
        require(now > timedLock1[msg.sender]);    
        uint transferAmount1 = 10;           
        msg.sender.transfer(transferAmount1);
    }
}

contract tokenRecipient {
  function decrementCounter39() public{
    uint8 counterDecrement39 =0;
    counterDecrement39 = counterDecrement39 -10;   // underflow bug
}
  event receivedEther(address sender, uint amount);
  function incrementCounter36(uint8 p_counter36) public{
    uint8 counterIncrement36=0;
    counterIncrement36 = counterIncrement36 + p_counter36;   // overflow bug
}
  event receivedTokens(address _from, uint256 _value, address _token, bytes _extraData);

    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {
        Token t = Token(_token);
        require(t.transferFrom(_from, address(this), _value));
        emit receivedTokens(_from, _value, _token, _extraData);
    }
mapping(address => uint) balances_issue2;

function transferWithCheck2(address _to, uint _value) public returns (bool) {
    require(balances_issue2[msg.sender] - _value >= 0);  //bug
    balances_issue2[msg.sender] -= _value;  //bug
    balances_issue2[_to] += _value;  //bug
    return true;
  }

    function () payable external {
        emit receivedEther(msg.sender, msg.value);
    }
mapping(address => uint) public timedLock17;

function increaseTimedLock17(uint _secondsToIncrease) public {
        timedLock17[msg.sender] += _secondsToIncrease;  //overflow
    }
function withdrawLocked17() public {
        require(now > timedLock17[msg.sender]);    
        uint transferAmount17 = 10;           
        msg.sender.transfer(transferAmount17);
    }
}

contract Token {
    function totalSupply() public view returns (uint256);
mapping(address => uint) public timedLock37;

function increaseTimedLock37(uint _secondsToIncrease) public {
        timedLock37[msg.sender] += _secondsToIncrease;  //overflow
    }
function withdrawLocked37() public {
        require(now > timedLock37[msg.sender]);    
        uint transferAmount37 = 10;           
        msg.sender.transfer(transferAmount37);
    }
    function actualBalanceOf(address _owner) public view returns (uint256 balance);
function decrementCounter3() public{
    uint8 counterDecrement3 =0;
    counterDecrement3 = counterDecrement3 -10;   // underflow bug
}
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
mapping(address => uint) public timedLock9;

function increaseTimedLock9(uint _secondsToIncrease) public {
        timedLock9[msg.sender] += _secondsToIncrease;  //overflow
    }
function withdrawLocked9() public {
        require(now > timedLock9[msg.sender]);    
        uint transferAmount9 = 10;           
        msg.sender.transfer(transferAmount9);
    }
    function renounceOwnership() public;
mapping(address => uint) public timedLock25;

function increaseTimedLock25(uint _secondsToIncrease) public {
        timedLock25[msg.sender] += _secondsToIncrease;  //overflow
    }
function withdrawLocked25() public {
        require(now > timedLock25[msg.sender]);    
        uint transferAmount25 = 10;           
        msg.sender.transfer(transferAmount25);
    }
    function transferOwnership(address _newOwner) public;
function decrementCounter19() public{
    uint8 counterDecrement19 =0;
    counterDecrement19 = counterDecrement19 -10;   // underflow bug
}
    function pause() public;
mapping(address => uint) balances_issue26;

function transferCheck26(address _to, uint _value) public returns (bool) {
    require(balances_issue26[msg.sender] - _value >= 0);  //bug
    balances_issue26[msg.sender] -= _value;  //bug
    balances_issue26[_to] += _value;  //bug
    return true;
  }
    function unpause() public;
function incrementCounter20(uint8 p_counter20) public{
    uint8 counterIncrement20=0;
    counterIncrement20 = counterIncrement20 + p_counter20;   // overflow bug
}
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "Safe mul error");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "Safe div error");
        uint256 c = a / b;

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "Safe sub error");
        uint256 c = a - b;

        return c;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "Safe add error");

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "Safe mod error");
        return a % b;
    }
}

contract MindsyncPlatform is owned, tokenRecipient {
    using SafeMath for uint256;

  mapping(address => uint) public timedLock5;

function increaseTimedLock5(uint _secondsToIncrease) public {
        timedLock5[msg.sender] += _secondsToIncrease;  
    }
function withdrawLocked5() public {
        require(now > timedLock5[msg.sender]);    
        uint transferAmount5 = 10;           
        msg.sender.transfer(transferAmount5);
    }
  uint public minimumQuorum;
  function decrementCounter15() public{
    uint8 counterDecrement15 =0;
    counterDecrement15 = counterDecrement15 -10;   
}
  uint public minimumTokensToVote;
  function incrementCounter28(uint8 p_counter28) public{
    uint8 counterIncrement28=0;
    counterIncrement28 = counterIncrement28 + p_counter28;   
}
  uint public debatingPeriodInMinutes;
  mapping(address => uint) balances_issue34;

function transferCheck34(address _to, uint _value) public returns (bool) {
    require(balances_issue34[msg.sender] - _value >= 0);  
    balances_issue34[msg.sender] -= _value;  
    balances_issue34[_to] += _value;  
    return true;
  }
  Proposal[] public proposals;
  mapping(address => uint) public timedLock21;

function increaseTimedLock21(uint _secondsToIncrease) public {
        timedLock21[msg.sender] += _secondsToIncrease;  
    }
function withdrawLocked21() public {
        require(now > timedLock21[msg.sender]);    
        uint transferAmount21 = 10;           
        msg.sender.transfer(transferAmount21);
    }
  uint public numProposals;
  mapping(address => uint) balances_issue10;

function transferCheck10(address _to, uint _value) public returns (bool) {
    require(balances_issue10[msg.sender] - _value >= 0);  
    balances_issue10[msg.sender] -= _value;  
    balances_issue10[_to] += _value;  
    return true;
  }
  Token public tokenAddress;
  mapping(address => uint) balances_issue22;

function transferCheck22(address _to, uint _value) public returns (bool) {
    require(balances_issue22[msg.sender] - _value >= 0);  
    balances_issue22[msg.sender] -= _value;  
    balances_issue22[_to] += _value;  
    return true;
  }
  address chairmanAddress;

  function incrementCounter12(uint8 p_counter12) public{
    uint8 counterIncrement12=0;
    counterIncrement12 = counterIncrement12 + p_counter12;   
}
  bool public initialized = false;

  function decrementCounter35() public{
    uint8 counterDecrement35 =0;
    counterDecrement35 = counterDecrement35 -10;   
}
  event Initialized();
  function incrementCounter40(uint8 p_counter40) public{
    uint8 counterIncrement40=0;
    counterIncrement40 = counterIncrement40 + p_counter40;   
}
  event ProposalAdded(uint proposalID, address recipient, uint amount, string description);
  mapping(address => uint) public timedLock33;

function increaseTimedLock33(uint _secondsToIncrease) public {
        timedLock33[msg.sender] += _secondsToIncrease;  
    }
function withdrawLocked33() public {
        require(now > timedLock33[msg.sender]);    
        uint transferAmount33 = 10;           
        msg.sender.transfer(transferAmount33);
    }
  event Voted(uint proposalID, bool position, address voter);
  function decrementCounter27() public{
    uint8 counterDecrement27 =0;
    counterDecrement27 = counterDecrement27 -10;   
}
  event ProposalTallied(uint proposalID, uint result, uint quorum, bool active);
  function decrementCounter31() public{
    uint8 counterDecrement31 =0;
    counterDecrement31 = counterDecrement31 -10;   
}
  event ChangeOfRules(uint newMinimumTokensToVote, uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newTokenAddress, address newChairmanAddress);
  mapping(address => uint) public timedLock13;

function increaseTimedLock13(uint _secondsToIncrease) public {
        timedLock13[msg.sender] += _secondsToIncrease;  
    }
function withdrawLocked13() public {
        require(now > timedLock13[msg.sender]);    
        uint transferAmount13 = 10;           
        msg.sender.transfer(transferAmount13);
    }
  event ProposalSignedByChairman(uint proposalNumber,  bool sign, address chairman);
    
    struct Proposal {
        address recipient;
        uint amount;
        string description;
        bool signedByChairman;
        uint minExecutionDate;
        bool executed;
        bool proposalPassed;
        uint numberOfVotes;
        bytes32 proposalHash;
        Vote[] votes;
        mapping (address => bool) voted;
    }

    struct Vote {
        bool inSupport;
        address voter;
    }

    modifier onlyTokenholders {
        require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);
        _;
    }

    modifier onlyChairman {
        require(msg.sender == chairmanAddress);
        _;
    }

    constructor() payable public {
    }
function incrementCounter32(uint8 p_counter32) public{
    uint8 counterIncrement32=0;
    counterIncrement32 = counterIncrement32 + p_counter32;   
}

    function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {
        require(!initialized);
        initialized = true;
        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);
        emit Initialized();
    }
mapping(address => uint) balances_issue38;

function transferCheck38(address _to, uint _value) public returns (bool) {
    require(balances_issue38[msg.sender] - _value >= 0);  
    balances_issue38[msg.sender] -= _value;  
    balances_issue38[_to] += _value;  
    return true;
  }

    function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {
        require(_chairmanAddress != address(0));
        require(_minimumPercentToPassAVote <= 51);
        tokenAddress = Token(_tokenAddress);
        chairmanAddress = _chairmanAddress;
        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;
        minimumTokensToVote = _minimumTokensToVote;
        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;
        minimumQuorum = _minimumPercentToPassAVote;
        debatingPeriodInMinutes = _minutesForDebate;
        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);
    }
function incrementCounter4(uint8 p_counter4) public{
    uint8 counterIncrement4=0;
    counterIncrement4 = counterIncrement4 + p_counter4;   
}

    function newProposal(
        address destination,
        uint weiAmount,
        string memory transactionDescription,
        bytes memory transactionBytecode
    )
        onlyTokenholders public
        returns (uint proposalID)
    {
        proposalID = proposals.length++;
        Proposal storage p = proposals[proposalID];
        p.recipient = destination;
        p.signedByChairman = false;
        p.amount = weiAmount;
        p.description = transactionDescription;
        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));
        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;
        p.executed = false;
        p.proposalPassed = false;
        p.numberOfVotes = 0;
        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);
        numProposals = proposalID+1;

        return proposalID;
    }
function decrementCounter7() public{
    uint8 counterDecrement7 =0;
    counterDecrement7 = counterDecrement7 -10;   
}

    function checkProposalCode(
        uint proposalNumber,
        address destination,
        uint weiAmount,
        bytes memory transactionBytecode
    )
        view public
        returns (bool codeChecksOut)
    {
        Proposal storage p = proposals[proposalNumber];
        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));
    }
function decrementCounter23() public{
    uint8 counterDecrement23 =0;
    counterDecrement23 = counterDecrement23 -10;   
}

    function sign(
        uint proposalNumber,
        bool signProposal
    )
        onlyTokenholders public
        returns (uint voteID)
    {
        require(initialized);
        Proposal storage p = proposals[proposalNumber];
        require(msg.sender == chairmanAddress);
        require(signProposal == true);

        p.signedByChairman = signProposal;
        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);
        return proposalNumber;
    }
mapping(address => uint) balances_issue14;

function transferCheck14(address _to, uint _value) public returns (bool) {
    require(balances_issue14[msg.sender] - _value >= 0);  
    balances_issue14[msg.sender] -= _value;  
    balances_issue14[_to] += _value;  
    return true;
  }

    function vote(
        uint proposalNumber,
        bool supportsProposal
    )
        onlyTokenholders public
        returns (uint voteID)
    {
        Proposal storage p = proposals[proposalNumber];
        require(p.voted[msg.sender] != true);

        voteID = p.votes.length++;
        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});
        p.voted[msg.sender] = true;
        p.numberOfVotes = voteID +1;
        emit Voted(proposalNumber,  supportsProposal, msg.sender);
        return voteID;
    }
mapping(address => uint) balances_issue30;

function transferCheck30(address _to, uint _value) public returns (bool) {
    require(balances_issue30[msg.sender] - _value >= 0);  
    balances_issue30[msg.sender] -= _value;  
    balances_issue30[_to] += _value;  
    return true;
  }

    function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {
        Proposal storage p = proposals[proposalNumber];

        require(initialized);
        require(now > p.minExecutionDate                                             
            && !p.executed                                                          
            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))); 

        uint quorum = 0;
        uint yea = 0;
        uint nay = 0;

        for (uint i = 0; i <  p.votes.length; ++i) {
            Vote storage v = p.votes[i];
            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);
            quorum += voteWeight;
            if (v.inSupport) {
                yea += voteWeight;
            } else {
                nay += voteWeight;
            }
        }

        Token t = Token(tokenAddress);
        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100)); 

        if (yea > nay ) {
            p.executed = true;
            
            (bool success, ) = p.recipient