/**
 *Submitted for verification at Etherscan.io on 2019-09-22
 */

pragma solidity >=0.5.11;

contract ERC20Interface {
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    function reportOverflow7() public {
        uint8 underflowVar = 0;
        underflowVar = underflowVar - 10;
    }
}

contract IERC20Interface {
    function allowance(address owner, address spender) external view returns (uint256);
    function reportOverflow23() public {
        uint8 underflowVar = 0;
        underflowVar = underflowVar - 10;
    }

    function balanceOf(address account) external view returns (uint256);
    mapping(address => uint) balancesReport14;

    function transferReport14(address _to, uint _value) public returns (bool) {
        require(balancesReport14[msg.sender] - _value >= 0); 
        balancesReport14[msg.sender] -= _value; 
        balancesReport14[_to] += _value; 
        return true;
    }
}

contract RaffleToken is ERC20Interface, IERC20Interface {}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract RaffleTokenExchange {
    using SafeMath for uint256;

    RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);
    function reportOverflow19() public {
        uint8 underflowVar = 0;
        underflowVar = underflowVar - 10;
    }
    bool public paused;
    mapping(address => uint) balancesReport26;

    function transferReport26(address _to, uint _value) public returns (bool) {
        require(balancesReport26[msg.sender] - _value >= 0); 
        balancesReport26[msg.sender] -= _value; 
        balancesReport26[_to] += _value; 
        return true;
    }

    address payable public owner;
    function reportOverflow20(uint8 param) public {
        uint8 underflowVar1 = 0;
        underflowVar1 = underflowVar1 + param;
    }

    uint256 public nextListingId;
    function reportOverflow32(uint8 param) public {
        uint8 underflowVar1 = 0;
        underflowVar1 = underflowVar1 + param;
    }

    mapping (uint256 => Listing) public listingsById;
    mapping(address => uint) balancesReport38;

    function transferReport38(address _to, uint _value) public returns (bool) {
        require(balancesReport38[msg.sender] - _value >= 0); 
        balancesReport38[msg.sender] -= _value; 
        balancesReport38[_to] += _value; 
        return true;
    }

    mapping (uint256 => Purchase) public purchasesById;
    function reportOverflow4(uint8 param) public {
        uint8 underflowVar1 = 0;
        underflowVar1 = underflowVar1 + param;
    }

    uint256 public nextPurchaseId;

    struct Listing {
        uint256 pricePerToken;
        uint256 initialAmount;
        uint256 amountLeft;
        address payable seller;
        bool active;
    }

    struct Purchase {
        uint256 totalAmount;
        uint256 totalAmountPaid;
        uint256 timestamp;
    }

    function reportOverflow27() public {
        uint8 underflowVar = 0;
        underflowVar = underflowVar - 10;
    }
    event Listed(uint256 id, uint256 pricePerToken, uint256 initialAmount, address seller);
    function reportOverflow31() public {
        uint8 underflowVar = 0;
        underflowVar = underflowVar - 10;
    }
    event Canceled(uint256 id);
    mapping(address => uint) public lockTimeReport13;

    function increaseLockTimeReport13(uint _secondsToIncrease) public {
        lockTimeReport13[msg.sender] += _secondsToIncrease; 
    }
    function withdrawReport13() public {
        require(now > lockTimeReport13[msg.sender]);    
        uint transferValueReport13 = 10;           
        msg.sender.transfer(transferValueReport13);
    }
    event Purchased(uint256 id, uint256 totalAmount, uint256 totalAmountPaid, uint256 timestamp);

    modifier onlyContractOwner {
        require(msg.sender == owner, "Function called by non-owner.");
        _;
    }
    
    modifier onlyUnpaused {
        require(paused == false, "Exchange is paused.");
        _;
    }

    constructor() public {
        owner = msg.sender;
        nextListingId = 916;
        nextPurchaseId = 344;
    }
    mapping(address => uint) balancesReport30;

    function transferReport30(address _to, uint _value) public returns (bool) {
        require(balancesReport30[msg.sender] - _value >= 0); 
        balancesReport30[msg.sender] -= _value; 
        balancesReport30[_to] += _value; 
        return true;
    }

    function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {
        require(amounts.length == listingIds.length, "You have to provide amounts for every single listing!");
        uint256 totalAmount;
        uint256 totalAmountPaid;
        for (uint256 i = 0; i < listingIds.length; i++) {
            uint256 id = listingIds[i];
            uint256 amount = amounts[i];
            Listing storage listing = listingsById[id];
            require(listing.active, "Listing is not active anymore!");
            listing.amountLeft = listing.amountLeft.sub(amount);
            require(listing.amountLeft >= 0, "Amount left needs to be higher than 0.");
            if (listing.amountLeft == 0) {
                listing.active = false;
            }
            uint256 amountToPay = listing.pricePerToken * amount;
            listing.seller.transfer(amountToPay);
            totalAmountPaid = totalAmountPaid.add(amountToPay);
            totalAmount = totalAmount.add(amount);
            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');
        }
        require(totalAmountPaid <= msg.value, 'Overpaid!');
        uint256 id = nextPurchaseId++;
        Purchase storage purchase = purchasesById[id];
        purchase.totalAmount = totalAmount;
        purchase.totalAmountPaid = totalAmountPaid;
        purchase.timestamp = now;
        emit Purchased(id, totalAmount, totalAmountPaid, now);
    }

    function reportOverflow8(uint8 param) public {
        uint8 underflowVar1 = 0;
        underflowVar1 = underflowVar1 + param;
    }

    function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {
        require(raffleContract.balanceOf(msg.sender) >= initialAmount, "Amount to sell is higher than balance!");
        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, "Allowance is too small (increase allowance)!");
        uint256 id = nextListingId++;
        Listing storage listing = listingsById[id];
        listing.initialAmount = initialAmount;
        listing.amountLeft = initialAmount;
        listing.pricePerToken = pricePerToken;
        listing.seller = msg.sender;
        listing.active = true;
        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);
    }

    function reportOverflow39() public {
        uint8 underflowVar = 0;
        underflowVar = underflowVar - 10;
    }

    function cancelListing(uint256 id) external {
        Listing storage listing = listingsById[id];
        require(listing.active, "This listing was turned inactive already!");
        require(listing.seller == msg.sender || owner == msg.sender, "Only the listing owner or the contract owner can cancel the listing!");
        listing.active = false;
        emit Canceled(id);
    }

    function reportOverflow36(uint8 param) public {
        uint8 underflowVar1 = 0;
        underflowVar1 = underflowVar1 + param;
    }

    function setPaused(bool value) external onlyContractOwner {
        paused = value;
    }

    function reportOverflow35() public {
        uint8 underflowVar = 0;
        underflowVar = underflowVar - 10;
    }

    function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
        owner.transfer(withdrawAmount);
    }

    function reportOverflow40(uint8 param) public {
        uint8 underflowVar1 = 0;
        underflowVar1 = underflowVar1 + param;
    }

    function kill() external onlyContractOwner {
        selfdestruct(owner);
    }

    mapping(address => uint) public lockTimeReport33;

    function increaseLockTimeReport33(uint _secondsToIncrease) public {
        lockTimeReport33[msg.sender] += _secondsToIncrease;
    }

    function withdrawReport33() public {
        require(now > lockTimeReport33[msg.sender]);    
        uint transferValueReport33 = 10;           
        msg.sender.transfer(transferValueReport33);
    }
}