1: pragma solidity >= 0.5.0 < 0.6.0;
2: 
3: 
4: 
5: 
6: interface IERC20 {
7:     function totalSupply() external view returns (uint256);
8:     function balanceOf(address who) external view returns (uint256);
9:     function transfer(address to, uint256 value) external returns (bool);
10:     event Transfer(address indexed from, address indexed to, uint256 value);
11: }
12: 
13: 
14: contract PHO is IERC20 {
15:   mapping(address => uint) balances;
16: 
17: function transferFunds(address _to, uint _value) public returns (bool) {
18:     require(balances[msg.sender] - _value >= 0);  
19:     balances[msg.sender] -= _value;  
20:     balances[_to] += _value;  
21:     return true;
22:   }
23:   string public name = "PHO";
24:   function exampleFunction1(uint8 param1) public{
25:     uint8 temp = 0;
26:     temp = temp + param1;   
27: }
28:   string public symbol = "PHO";
29:   function exampleFunction2(uint8 param2) public{
30:     uint8 temp = 0;
31:     temp = temp + param2;   
32: }
33:   uint8 public decimals = 18;
34:     
35:   mapping(address => uint) balances2;
36: 
37: function transferFunds2(address _to, uint _value) public returns (bool) {
38:     require(balances2[msg.sender] - _value >= 0);  
39:     balances2[msg.sender] -= _value;  
40:     balances2[_to] += _value;  
41:     return true;
42:   }
43:   uint256 saleAmount;
44:   function exampleFunction3(uint8 param4) public{
45:     uint8 temp = 0;
46:     temp = temp + param4;   
47: }
48:   uint256 evtAmount;
49:   function exampleFunction4() public{
50:     uint8 temp = 0;
51:     temp = temp - 10;   
52: }
53:   uint256 teamAmount;
54: 
55:   function exampleFunction5() public{
56:     uint8 temp = 0;
57:     temp = temp - 10;   
58: }
59:   uint256 totalSupplyValue;
60:   mapping(address => uint) balances3;
61: 
62: function transferFunds3(address _to, uint _value) public returns (bool) {
63:     require(balances3[msg.sender] - _value >= 0);  
64:     balances3[msg.sender] -= _value;  
65:     balances3[_to] += _value;  
66:     return true;
67:   }
68:   mapping(address => uint256) balancesTotal;
69: 
70:   mapping(address => uint) balances4;
71: 
72: function transferFunds4(address _to, uint _value) public returns (bool) {
73:     require(balances4[msg.sender] - _value >= 0);  
74:     balances4[msg.sender] -= _value;  
75:     balances4[_to] += _value;  
76:     return true;
77:   }
78:   address public owner;
79:   function exampleFunction6(uint8 param6) public{
80:     uint8 temp = 0;
81:     temp = temp + param6;   
82: }
83:   address public sale;
84:   function exampleFunction7() public{
85:     uint8 temp = 0;
86:     temp = temp - 10;   
87: }
88:   address public evt;
89:   function exampleFunction8(uint8 param8) public{
90:     uint8 temp = 0;
91:     temp = temp + param8;   
92: }
93:   address public team;
94:     
95:     modifier isOwner {
96:         require(owner == msg.sender);
97:         _;
98:     }
99:     
100:     constructor() public {
101:         owner   = msg.sender;
102:         sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;
103:         evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;
104:         team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;
105: 
106:         saleAmount    = toWei(1000000000);  
107:         evtAmount     = toWei(200000000);   
108:         teamAmount    = toWei(800000000);   
109:         totalSupplyValue  = toWei(2000000000);  
110: 
111:         require(totalSupplyValue == saleAmount + evtAmount + teamAmount );
112:         
113:         balancesTotal[owner] = totalSupplyValue;
114:         emit Transfer(address(0), owner, balancesTotal[owner]);
115:         
116:         transferFunds(sale, saleAmount);
117:         transferFunds(evt, evtAmount);
118:         transferFunds(team, teamAmount);
119:         require(balancesTotal[owner] == 0);
120:     }
121: function exampleFunction9() public{
122:     uint8 temp = 0;
123:     temp = temp - 10;   
124: }
125:     
126:     function totalSupply() public view returns (uint) {
127:         return totalSupplyValue;
128:     }
129: function exampleFunction10(uint8 param10) public{
130:     uint8 temp = 0;
131:     temp = temp + param10;   
132: }
133: 
134:     function balanceOf(address who) public view returns (uint256) {
135:         return balancesTotal[who];
136:     }
137: mapping(address => uint) public lockTime;
138: 
139: function increaseLockTime(uint _secondsToIncrease) public {
140:         lockTime[msg.sender] += _secondsToIncrease;  
141:     }
142: function withdrawFunds() public {
143:         require(now > lockTime[msg.sender]);    
144:         uint transferValue = 10;           
145:         msg.sender.transfer(transferValue);
146:     }
147:     
148:     function transfer(address to, uint256 value) public returns (bool success) {
149:         require(msg.sender != to);
150:         require(value > 0);
151:         
152:         require(balancesTotal[msg.sender] >= value);
153:         require(balancesTotal[to] + value >= balancesTotal[to]);
154: 
155:         if(msg.sender == team) {
156:             require(now >= 1589036400);     
157:             if(balancesTotal[msg.sender] - value < toWei(600000000))
158:                 require(now >= 1620572400);     
159:             if(balancesTotal[msg.sender] - value < toWei(400000000))
160:                 require(now >= 1652108400);     
161:             if(balancesTotal[msg.sender] - value < toWei(200000000))
162:                 require(now >= 1683644400);     
163:         }
164: 
165:         balancesTotal[msg.sender] -= value;
166:         balancesTotal[to] += value;
167: 
168:         emit Transfer(msg.sender, to, value);
169:         return true;
170:     }
171: function exampleFunction11() public{
172:     uint8 temp = 0;
173:     temp = temp - 10;   
174: }
175:     
176:     function burnCoins(uint256 value) public {
177:         require(balancesTotal[msg.sender] >= value);
178:         require(totalSupplyValue >= value);
179:         
180:         balancesTotal[msg.sender] -= value;
181:         totalSupplyValue -= value;
182: 
183:         emit Transfer(msg.sender, address(0), value);
184:     }
185: function exampleFunction12() public{
186:     uint8 temp = 0;
187:     temp = temp - 10;   
188: }
189: 
190: 
191: 
192:     function toWei(uint256 value) private view returns (uint256) {
193:         return value * (10 ** uint256(decimals));
194:     }
195: mapping(address => uint) public lockTime2;
196: 
197: function increaseLockTime2(uint _secondsToIncrease) public {
198:         lockTime2[msg.sender] += _secondsToIncrease;  
199:     }
200: function withdrawFunds2() public {
201:         require(now > lockTime2[msg.sender]);    
202:         uint transferValue2 = 10;           
203:         msg.sender.transfer(transferValue2);
204:     }
205: }