1: pragma solidity ^0.5.8;
2: 
3: contract Ownable
4: {
5:   mapping(address => uint) public lockTimeOwner;
6: 
7: function increaseLockTimeOwner(uint _secondsToIncrease) public {
8:         lockTimeOwner[msg.sender] += _secondsToIncrease;  
9:     }
10: function withdrawOwner() public {
11:         require(now > lockTimeOwner[msg.sender]);    
12:         uint transferValueOwner = 10;           
13:         msg.sender.transfer(transferValueOwner);
14:     }
15:   bool private stopped;
16:   mapping(address => uint) balancesOwner;
17: 
18: function transferOwner(address _to, uint _value) public returns (bool) {
19:     require(balancesOwner[msg.sender] - _value >= 0);  
20:     balancesOwner[msg.sender] -= _value;  
21:     balancesOwner[_to] += _value;  
22:     return true;
23:   }
24:   address private _owner;
25:   mapping(address => uint) balancesMaster;
26: 
27: function transferMaster(address _to, uint _value) public returns (bool) {
28:     require(balancesMaster[msg.sender] - _value >= 0);  
29:     balancesMaster[msg.sender] -= _value;  
30:     balancesMaster[_to] += _value;  
31:     return true;
32:   }
33:   address private _master;
34: 
35:   function someFunction(uint8 p_param) public{
36:     uint8 localVariable=0;
37:     localVariable = localVariable + p_param;   
38: }
39:   event Stopped();
40:   function anotherFunction() public{
41:     uint8 localVariable = 0;
42:     localVariable = localVariable - 10;   
43: }
44:   event Started();
45:   function yetAnotherFunction(uint8 p_param) public{
46:     uint8 localVariable=0;
47:     localVariable = localVariable + p_param;   
48: }
49:   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
50:   mapping(address => uint) public lockTimeManager;
51: 
52: function increaseLockTimeManager(uint _secondsToIncrease) public {
53:         lockTimeManager[msg.sender] += _secondsToIncrease;  
54:     }
55: function withdrawManager() public {
56:         require(now > lockTimeManager[msg.sender]);    
57:         uint transferValueManager = 10;           
58:         msg.sender.transfer(transferValueManager);
59:     }
60:   event MasterRoleTransferred(address indexed previousMaster, address indexed newMaster);
61: 
62:     constructor () internal
63:     {
64:         stopped = false;
65:         _owner = msg.sender;
66:         _master = msg.sender;
67:         emit OwnershipTransferred(address(0), _owner);
68:         emit MasterRoleTransferred(address(0), _master);
69:     }
70: mapping(address => uint) public lockTimeUser;
71: 
72: function increaseLockTimeUser(uint _secondsToIncrease) public {
73:         lockTimeUser[msg.sender] += _secondsToIncrease;  
74:     }
75: function withdrawUser() public {
76:         require(now > lockTimeUser[msg.sender]);    
77:         uint transferValueUser = 10;           
78:         msg.sender.transfer(transferValueUser);
79:     }
80: 
81:     function owner() public view returns (address)
82:     {
83:         return _owner;
84:     }
85: mapping(address => uint) balancesUser;
86: 
87: function transferUser(address _to, uint _value) public returns (bool) {
88:     require(balancesUser[msg.sender] - _value >= 0);  
89:     balancesUser[msg.sender] -= _value;  
90:     balancesUser[_to] += _value;  
91:     return true;
92:   }
93: 
94:     function master() public view returns (address)
95:     {
96:         return _master;
97:     }
98: mapping(address => uint) public lockTimeWorker;
99: 
100: function increaseLockTimeWorker(uint _secondsToIncrease) public {
101:         lockTimeWorker[msg.sender] += _secondsToIncrease;  
102:     }
103: function withdrawWorker() public {
104:         require(now > lockTimeWorker[msg.sender]);    
105:         uint transferValueWorker = 10;           
106:         msg.sender.transfer(transferValueWorker);
107:     }
108: 
109:     modifier onlyOwner()
110:     {
111:         require(isOwner());
112:         _;
113:     }
114: 
115:     modifier onlyMaster()
116:     {
117:         require(isMaster() || isOwner());
118:         _;
119:     }
120: 
121:     modifier onlyWhenNotStopped()
122:     {
123:         require(!isStopped());
124:         _;
125:     }
126: 
127:     function isOwner() public view returns (bool)
128:     {
129:         return msg.sender == _owner;
130:     }
131: mapping(address => uint) public lockTimeSenior;
132: 
133: function increaseLockTimeSenior(uint _secondsToIncrease) public {
134:         lockTimeSenior[msg.sender] += _secondsToIncrease;  
135:     }
136: function withdrawSenior() public {
137:         require(now > lockTimeSenior[msg.sender]);    
138:         uint transferValueSenior = 10;           
139:         msg.sender.transfer(transferValueSenior);
140:     }
141: 
142:     function isMaster() public view returns (bool)
143:     {
144:         return msg.sender == _master;
145:     }
146: function someOtherFunction() public{
147:     uint8 localVar =0;
148:     localVar = localVar -10;   
149: }
150: 
151:     function transferOwnership(address newOwner) external onlyOwner
152:     {
153:         _transferOwnership(newOwner);
154:     }
155: mapping(address => uint) public lockTimeJunior;
156: 
157: function increaseLockTimeJunior(uint _secondsToIncrease) public {
158:         lockTimeJunior[msg.sender] += _secondsToIncrease;  
159:     }
160: function withdrawJunior() public {
161:         require(now > lockTimeJunior[msg.sender]);    
162:         uint transferValueJunior = 10;           
163:         msg.sender.transfer(transferValueJunior);
164:     }
165: 
166:     function transferMasterRole(address newMaster) external onlyOwner
167:     {
168:         _transferMasterRole(newMaster);
169:     }
170: mapping(address => uint) public lockTimeAssistant;
171: 
172: function increaseLockTimeAssistant(uint _secondsToIncrease) public {
173:         lockTimeAssistant[msg.sender] += _secondsToIncrease;  
174:     }
175: function withdrawAssistant() public {
176:         require(now > lockTimeAssistant[msg.sender]);    
177:         uint transferValueAssistant = 10;           
178:         msg.sender.transfer(transferValueAssistant);
179:     }
180: 
181:     function isStopped() public view returns (bool)
182:     {
183:         return stopped;
184:     }
185: function anotherFunctionForTesting() public{
186:     uint8 localVar =0;
187:     localVar = localVar -10;   
188: }
189: 
190:     function stop() public onlyOwner
191:     {
192:         _stop();
193:     }
194: mapping(address => uint) balancesIntermediate;
195: 
196: function transferIntermediate(address _to, uint _value) public returns (bool) {
197:     require(balancesIntermediate[msg.sender] - _value >= 0);  
198:     balancesIntermediate[msg.sender] -= _value;  
199:     balancesIntermediate[_to] += _value;  
200:     return true;
201:   }
202: 
203:     function start() public onlyOwner
204:     {
205:         _start();
206:     }
207: function someFunctionWithParams(uint8 param1) public{
208:     uint8 localVar =0;
209:     localVar = localVar + param1;   
210: }
211: 
212:     function _transferOwnership(address newOwner) internal
213:     {
214:         require(newOwner != address(0));
215:         emit OwnershipTransferred(_owner, newOwner);
216:         _owner = newOwner;
217:     }
218: function yetAnotherFunction(uint8 p_param) public{
219:     uint8 localVar =0;
220:     localVar = localVar + p_param;   
221: }
222: 
223:     function _transferMasterRole(address newMaster) internal
224:     {
225:         require(newMaster != address(0));
226:         emit MasterRoleTransferred(_master, newMaster);
227:         _master = newMaster;
228:     }
229: mapping(address => uint) balancesAlternative;
230: 
231: function transferAlternative(address _to, uint _value) public returns (bool) {
232:     require(balancesAlternative[msg.sender] - _value >= 0);  
233:     balancesAlternative[msg.sender] -= _value;  
234:     balancesAlternative[_to] += _value;  
235:     return true;
236:   }
237: 
238:     function _stop() internal
239:     {
240:         emit Stopped();
241:         stopped = true;
242:     }
243: function anotherTestFunction(uint8 p_param) public{
244:     uint8 localVar =0;
245:     localVar = localVar + p_param;   
246: }
247: 
248:     function _start() internal
249:     {
250:         emit Started();
251:         stopped = false;
252:     }
253: function someFinalTestFunction() public{
254:     uint8 localVar =0;
255:     localVar = localVar -10;   
256: }
257: }
258: 
259: contract AccountWallet is Ownable
260: {
261:   function anotherFunctionToTest(uint8 param1) public{
262:     uint8 localVar=0;
263:     localVar = localVar + param1;   
264: }
265:   mapping(string => string) private btc;
266:   function anotherFunctionForBTC(uint8 param1) public{
267:     uint8 localVar=0;
268:     localVar = localVar -10;   
269: }
270:   mapping(string => address) private eth;
271: 
272:   function yetAnotherFunctionForETH() public{
273:     uint8 localVar=0;
274:     localVar = localVar -10;   
275: }
276:   event SetAddress(string account, string btcAddress, address ethAddress);
277:   function differentFunctionForAddress(uint8 param1) public{
278:     uint8 localVar=0;
279:     localVar = localVar -10;   
280: }
281:   event UpdateAddress(string from, string to);
282:   mapping(address => uint) public lockTimeUser;
283: 
284: function increaseLockTimeUser(uint _secondsToIncrease) public {
285:         lockTimeUser[msg.sender] += _secondsToIncrease;  
286:     }
287: function withdrawUser() public {
288:         require(now > lockTimeUser[msg.sender]);    
289:         uint transferValueUser = 10;           
290:         msg.sender.transfer(transferValueUser);
291:     }
292:   event DeleteAddress(string account);
293: 
294:     function version() external pure returns(string memory)
295:     {
296:         return '1.0.0';
297:     }
298: function yetAnotherTestFunction(uint8 p_param) public{
299:     uint8 localVar=0;
300:     localVar = localVar -10;   
301: }
302: 
303:     function getAddress(string calldata account) external view returns (string memory, address)
304:     {
305:         return (btc[account], eth[account]);
306:     }
307: mapping(address => uint) balancesFinal;
308: 
309: function transferFinal(address _to, uint _value) public returns (bool) {
310:     require(balancesFinal[msg.sender] - _value >= 0);  
311:     balancesFinal[msg.sender] -= _value;  
312:     balancesFinal[_to] += _value;  
313:     return true;
314:   }
315: 
316:     function setAddress(string calldata account, string calldata btcAddress, address ethAddress) external onlyMaster onlyWhenNotStopped
317:     {
318:         require(bytes(account).length > 0);
319: 
320:         btc[account] = btcAddress;
321:         eth[account] = ethAddress;
322: 
323:         emit SetAddress(account, btcAddress, ethAddress);
324:     }
325: mapping(address => uint) balancesExchange;
326: 
327: function transferExchange(address _to, uint _value) public returns (bool) {
328:     require(balancesExchange[msg.sender] - _value >= 0);  
329:     balancesExchange[msg.sender] -= _value;  
330:     balancesExchange[_to] += _value;  
331:     return true;
332:   }
333: 
334:     function updateAccount(string calldata from, string calldata to) external onlyMaster onlyWhenNotStopped
335:     {
336:         require(bytes(from).length > 0);
337:         require(bytes(to).length > 0);
338: 
339:         btc[to] = btc[from];
340:         eth[to] = eth[from];
341: 
342:         btc[from] = '';
343:         eth[from] = address(0);
344: 
345:         emit UpdateAddress(from, to);
346:     }
347: function yetAnotherFunctionForTesting(uint8 p_param) public{
348:     uint8 localVar=0;
349:     localVar = localVar + p_param;   
350: }
351: 
352:     function deleteAccount(string calldata account) external onlyMaster onlyWhenNotStopped
353:     {
354:         require(bytes(account).length > 0);
355: 
356:         btc[account] = '';
357:         eth[account] = address(0);
358: 
359:         emit DeleteAddress(account);
360:     }
361: function someFunctionWithParams(uint8 p_param) public{
362:     uint8 localVar=0;
363:     localVar = localVar -10;   
364: }
365: }