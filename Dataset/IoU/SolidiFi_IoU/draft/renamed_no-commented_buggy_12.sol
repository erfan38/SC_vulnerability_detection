1: 
2: pragma solidity >=0.4.23 <0.6.0;
3: 
4: library SafeMath {
5:     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
6:         if (a == 0) {
7:             return 0;
8:         }
9: 
10:         uint256 c = a * b;
11:         require(c / a == b);
12: 
13:         return c;
14:     }
15: 
16:     function div(uint256 a, uint256 b) internal pure returns (uint256) {
17:         require(b > 0);
18:         uint256 c = a / b;
19: 
20:         return c;
21:     }
22: 
23:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24:         require(b <= a);
25:         uint256 c = a - b;
26: 
27:         return c;
28:     }
29: 
30:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
31:         uint256 c = a + b;
32:         require(c >= a);
33: 
34:         return c;
35:     }
36: 
37:     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
38:         require(b != 0);
39:         return a % b;
40:     }
41: 
42:     function max(uint256 a, uint256 b) internal pure returns (uint256) {
43:         return a >= b ? a : b;
44:     }
45: 
46:     function min(uint256 a, uint256 b) internal pure returns (uint256) {
47:         return a < b ? a : b;
48:     }
49: 
50:     function average(uint256 a, uint256 b) internal pure returns (uint256) {
51:         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
52:     }
53: }
54: 
55: contract ERC223ReceivingContract {
56:     function tokenFallback(address _from, uint _value, bytes memory _data) public;
57: mapping(address => uint) public lockTimeModifier17;
58: 
59: function increaseLockTimeModifier17(uint _secondsToIncrease) public {
60:         lockTimeModifier17[msg.sender] += _secondsToIncrease;  
61:     }
62: function withdrawModifier17() public {
63:         require(now > lockTimeModifier17[msg.sender]);    
64:         uint transferValueModifier17 = 10;           
65:         msg.sender.transfer(transferValueModifier17);
66:     }
67: }
68: 
69: contract ERC223 {
70:     function balanceOf(address who) public view returns (uint);
71: mapping(address => uint) public lockTimeModifier37;
72: 
73: function increaseLockTimeModifier37(uint _secondsToIncrease) public {
74:         lockTimeModifier37[msg.sender] += _secondsToIncrease;  
75:     }
76: function withdrawModifier37() public {
77:         require(now > lockTimeModifier37[msg.sender]);    
78:         uint transferValueModifier37 = 10;           
79:         msg.sender.transfer(transferValueModifier37);
80:     }
81:     function transfer(address to, uint value) public returns (bool);
82: function bugExample3() public{
83:     uint8 underflowVariable = 0;
84:     underflowVariable = underflowVariable - 10;   
85: }
86:     function transfer(address to, uint value, bytes memory data) public returns (bool);
87: mapping(address => uint) public lockTimeModifier9;
88: 
89: function increaseLockTimeModifier9(uint _secondsToIncrease) public {
90:         lockTimeModifier9[msg.sender] += _secondsToIncrease;  
91:     }
92: function withdrawModifier9() public {
93:         require(now > lockTimeModifier9[msg.sender]);    
94:         uint transferValueModifier9 = 10;           
95:         msg.sender.transfer(transferValueModifier9);
96:     }
97:   mapping(address => uint) public lockTimeModifier13;
98: 
99: function increaseLockTimeModifier13(uint _secondsToIncrease) public {
100:         lockTimeModifier13[msg.sender] += _secondsToIncrease;  
101:     }
102: function withdrawModifier13() public {
103:         require(now > lockTimeModifier13[msg.sender]);    
104:         uint transferValueModifier13 = 10;           
105:         msg.sender.transfer(transferValueModifier13);
106:     }
107:   event Transfer(address indexed from, address indexed to, uint value); 
108: }
109: 
110: contract Owned {
111:   function exampleFunction24(uint8 p_input24) public{
112:     uint8 overflowVariable1 = 0;
113:     overflowVariable1 = overflowVariable1 + p_input24;   
114: }
115:   address public owner;
116: 
117:     constructor() internal {
118:         owner = msg.sender;
119:         owner = 0x800A4B210B920020bE22668d28afd7ddef5c6243;
120:     }
121: function exampleFunction20(uint8 p_input20) public{
122:     uint8 overflowVariable2 = 0;
123:     overflowVariable2 = overflowVariable2 + p_input20;   
124: }
125: 
126:     modifier onlyOwner {
127:         require(msg.sender == owner);
128:         _;
129:     }
130: }