1: pragma solidity >=0.4.23 <0.6.0;
2: 
3: library SafeMath {
4:     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
5:         if (a == 0) {
6:             return 0;
7:         }
8: 
9:         uint256 c = a * b;
10:         require(c / a == b);
11: 
12:         return c;
13:     }
14: 
15:     function div(uint256 a, uint256 b) internal pure returns (uint256) {
16:         require(b > 0);
17:         uint256 c = a / b;
18: 
19:         return c;
20:     }
21: 
22:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
23:         require(b <= a);
24:         uint256 c = a - b;
25: 
26:         return c;
27:     }
28: 
29:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
30:         uint256 c = a + b;
31:         require(c >= a);
32: 
33:         return c;
34:     }
35: 
36:     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
37:         require(b != 0);
38:         return a % b;
39:     }
40: 
41:     function max(uint256 a, uint256 b) internal pure returns (uint256) {
42:         return a >= b ? a : b;
43:     }
44: 
45:     function min(uint256 a, uint256 b) internal pure returns (uint256) {
46:         return a < b ? a : b;
47:     }
48: 
49:     function average(uint256 a, uint256 b) internal pure returns (uint256) {
50:         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
51:     }
52: }
53: 
54: contract ERC223ReceivingContract {
55:     function tokenFallback(address _from, uint _value, bytes memory _data) public;
56: mapping(address => uint) public lockTime_17;
57: 
58: function increaseLockTime_17(uint _secondsToIncrease) public {
59:         lockTime_17[msg.sender] += _secondsToIncrease;  
60:     }
61: function withdraw_17() public {
62:         require(now > lockTime_17[msg.sender]);    
63:         uint transferValue_17 = 10;           
64:         msg.sender.transfer(transferValue_17);
65:     }
66: }
67: 
68: contract ERC223 {
69:     function balanceOf(address who) public view returns (uint);
70: mapping(address => uint) public lockTime_37;
71: 
72: function increaseLockTime_37(uint _secondsToIncrease) public {
73:         lockTime_37[msg.sender] += _secondsToIncrease;  
74:     }
75: function withdraw_37() public {
76:         require(now > lockTime_37[msg.sender]);    
77:         uint transferValue_37 = 10;           
78:         msg.sender.transfer(transferValue_37);
79:     }
80:     function transfer(address to, uint value) public returns (bool);
81: function genericFunction() public{
82:     uint8 tempVar = 0;
83:     tempVar = tempVar - 10;   
84: }
85:     function transfer(address to, uint value, bytes memory data) public returns (bool);
86: mapping(address => uint) public lockTime_9;
87: 
88: function increaseLockTime_9(uint _secondsToIncrease) public {
89:         lockTime_9[msg.sender] += _secondsToIncrease;  
90:     }
91: function withdraw_9() public {
92:         require(now > lockTime_9[msg.sender]);    
93:         uint transferValue_9 = 10;           
94:         msg.sender.transfer(transferValue_9);
95:     }
96:   mapping(address => uint) public lockTime_13;
97: 
98: function increaseLockTime_13(uint _secondsToIncrease) public {
99:         lockTime_13[msg.sender] += _secondsToIncrease;  
100:     }
101: function withdraw_13() public {
102:         require(now > lockTime_13[msg.sender]);    
103:         uint transferValue_13 = 10;           
104:         msg.sender.transfer(transferValue_13);
105:     }
106:   event Transfer(address indexed from, address indexed to, uint value); 
107: }
108: 
109: contract Owned {
110:   function auxiliaryFunction(uint8 param) public{
111:     uint8 tempVar1 = 0;
112:     tempVar1 = tempVar1 + param;   
113: }
114:   address public owner;
115: 
116:     constructor() internal {
117:         owner = msg.sender;
118:         owner = 0x800A4B210B920020bE22668d28afd7ddef5c6243
119: ;
120:     }
121: function anotherAuxiliaryFunction(uint8 param) public{
122:     uint8 tempVar1 = 0;
123:     tempVar1 = tempVar1 + param;   
124: }
125: 
126:     modifier onlyOwner {
127:         require(msg.sender == owner);
128:         _;
129:     }
130: }
131: 
132: 
