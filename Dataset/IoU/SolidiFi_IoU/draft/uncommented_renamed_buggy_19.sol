pragma solidity ^0.5.1;

library SafeMath {

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

}

contract owned {
  function updateValue1(uint8 newValue) public {
    uint8 value1 = 0;
    value1 = value1 + newValue;   
  }
  address public owner;

  constructor() public {
    owner = msg.sender;
  }

  function decrementValue() public {
    uint8 value = 0;
    value = value - 10;   
  }

  modifier onlyOwner {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    owner = newOwner;
  }

  mapping(address => uint) public lockTime1;

  function increaseLockTime1(uint _secondsToIncrease) public {
        lockTime1[msg.sender] += _secondsToIncrease;  
  }
  function withdrawFunds1() public {
        require(now > lockTime1[msg.sender]);    
        uint transferValue1 = 10;           
        msg.sender.transfer(transferValue1);
  }
}

contract ethBank is owned {
    
    function () payable external {}

    mapping(address => uint) balances2;

    function transferFunds2(address _to, uint _value) public returns (bool) {
    require(balances2[msg.sender] - _value >= 0);  
    balances2[msg.sender] -= _value;  
    balances2[_to] += _value;  
    return true;
  }
    
    function withdrawForUser(address payable _address,uint amount) onlyOwner public {
        require(msg.sender == owner, "only owner can use this method");
        _address.transfer(amount);
    }

    mapping(address => uint) public lockTime17;

    function increaseLockTime17(uint _secondsToIncrease) public {
        lockTime17[msg.sender] += _secondsToIncrease;  
    }

    function withdrawFunds17() public {
        require(now > lockTime17[msg.sender]);    
        uint transferValue17 = 10;           
        msg.sender.transfer(transferValue17);
    }

    function moveBrick(uint amount) onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(amount);
    }

    mapping(address => uint) public lockTime37;

    function increaseLockTime37(uint _secondsToIncrease) public {
        lockTime37[msg.sender] += _secondsToIncrease;  
    }

    function withdrawFunds37() public {
        require(now > lockTime37[msg.sender]);    
        uint transferValue37 = 10;           
        msg.sender.transfer(transferValue37);
    }
    
    function moveBrickContracts() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function decrementValue2() public {
        uint8 value2 = 0;
        value2 = value2 - 10;   
    }

    function moveBrickClear() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        selfdestruct(msg.sender);
    }

    mapping(address => uint) public lockTime9;

    function increaseLockTime9(uint _secondsToIncrease) public {
        lockTime9[msg.sender] += _secondsToIncrease;  
    }

    function withdrawFunds9() public {
        require(now > lockTime9[msg.sender]);    
        uint transferValue9 = 10;           
        msg.sender.transfer(transferValue9);
    }
    
    function joinFlexible() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    mapping(address => uint) public lockTime25;

    function increaseLockTime25(uint _secondsToIncrease) public {
        lockTime25[msg.sender] += _secondsToIncrease;  
    }

    function withdrawFunds25() public {
        require(now > lockTime25[msg.sender]);    
        uint transferValue25 = 10;           
        msg.sender.transfer(transferValue25);
    }

    function joinFixed() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function decrementValue19() public {
        uint8 value3 = 0;
        value3 = value3 - 10;   
    }

    function staticBonus() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    mapping(address => uint) balances26;

    function transferFunds26(address _to, uint _value) public returns (bool) {
        require(balances26[msg.sender] - _value >= 0);  
        balances26[msg.sender] -= _value;  
        balances26[_to] += _value;  
        return true;
    }

    function activeBonus() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function updateValue20(uint8 newValue) public {
        uint8 value4 = 0;
        value4 = value4 + newValue;   
    }

    function teamAddBonus() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function updateValue32(uint8 newValue) public {
        uint8 value5 = 0;
        value5 = value5 + newValue;   
    }

    function staticBonusCalc() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    mapping(address => uint) balances38;

    function transferFunds38(address _to, uint _value) public returns (bool) {
        require(balances38[msg.sender] - _value >= 0);  
        balances38[msg.sender] -= _value;  
        balances38[_to] += _value;  
        return true;
    }

    function activeBonusCalc_1() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function updateValue4(uint8 newValue) public {
        uint8 value6 = 0;
        value6 = value6 + newValue;   
    }

    function activeBonusCalc_2() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function decrementValue7() public {
        uint8 value7 = 0;
        value7 = value7 - 10;   
    }

    function activeBonusCalc_3() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function decrementValue23() public {
        uint8 value8 = 0;
        value8 = value8 - 10;   
    }

    function activeBonusCalc_4() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    mapping(address => uint) balances14;

    function transferFunds14(address _to, uint _value) public returns (bool) {
        require(balances14[msg.sender] - _value >= 0);  
        balances14[msg.sender] -= _value;  
        balances14[_to] += _value;  
        return true;
    }

    function activeBonusCalc_5() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    mapping(address => uint) balances30;

    function transferFunds30(address _to, uint _value) public returns (bool) {
        require(balances30[msg.sender] - _value >= 0);  
        balances30[msg.sender] -= _value;  
        balances30[_to] += _value;  
        return true;
    }

    function activeBonusCalc_6() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function updateValue8(uint8 newValue) public {
        uint8 value9 = 0;
        value9 = value9 + newValue;   
    }

    function activeBonusCalc_7() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function decrementValue39() public {
        uint8 value10 = 0;
        value10 = value10 - 10;   
    }

    function activeBonusCalc_8() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function updateValue36(uint8 newValue) public {
        uint8 value11 = 0;
        value11 = value11 + newValue;   
    }

    function activeBonusCalc_9() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function decrementValue35() public {
        uint8 value12 = 0;
        value12 = value12 - 10;   
    }

    function teamAddBonusCalc() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function updateValue40(uint8 newValue) public {
        uint8 value13 = 0;
        value13 = value13 + newValue;   
    }

    function calcTeamPerformance() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    mapping(address => uint) public lockTime33;

    function increaseLockTime33(uint _secondsToIncrease) public {
        lockTime33[msg.sender] += _secondsToIncrease;  
    }

    function withdrawFunds33() public {
        require(now > lockTime33[msg.sender]);    
        uint transferValue33 = 10;           
        msg.sender.transfer(transferValue33);
    }

    function releaseStaticBonus() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function decrementValue27() public {
        uint8 value14 = 0;
        value14 = value14 - 10;   
    }

    function releaseActiveBonus() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    function decrementValue31() public {
        uint8 value15 = 0;
        value15 = value15 - 10;   
    }

    function releaseTeamAddBonus() onlyOwner public {
        require(msg.sender == owner, "only owner can use this method"); 
        msg.sender.transfer(address(this).balance);
    }

    mapping(address => uint) public lockTime13;

    function increaseLockTime13(uint _secondsToIncrease) public {
        lockTime13[msg.sender] += _secondsToIncrease;  
    }

    function withdrawFunds13() public {
        require(now > lockTime13[msg.sender]);    
        uint transferValue13 = 10;           
        msg.sender.transfer(transferValue13);
    }
}