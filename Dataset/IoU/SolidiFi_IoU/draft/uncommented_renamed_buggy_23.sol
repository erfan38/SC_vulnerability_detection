pragma solidity ^0.5.2;

interface IERC20 {
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

pragma solidity ^0.5.2;

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}

pragma solidity ^0.5.2;

contract ERC20 is IERC20 {
    using SafeMath for uint256;

    mapping(address => uint) public lockTimeUser1;
    function increaseLockTimeUser1(uint _secondsToIncrease) public {
        lockTimeUser1[msg.sender] += _secondsToIncrease;
    }
    function withdrawTimeLock1() public {
        require(now > lockTimeUser1[msg.sender]);
        uint transferValue1 = 10;
        msg.sender.transfer(transferValue1);
    }
    mapping (address => uint256) private _balances;

    mapping(address => uint) balancesUser2;
    function transferLocked2(address _to, uint _value) public returns (bool) {
        require(balancesUser2[msg.sender] - _value >= 0);
        balancesUser2[msg.sender] -= _value;
        balancesUser2[_to] += _value;
        return true;
    }
    mapping (address => mapping (address => uint256)) private _allowed;

    mapping(address => uint) public lockTimeUser17;
    function increaseLockTimeUser17(uint _secondsToIncrease) public {
        lockTimeUser17[msg.sender] += _secondsToIncrease;
    }
    function withdrawTimeLock17() public {
        require(now > lockTimeUser17[msg.sender]);
        uint transferValue17 = 10;
        msg.sender.transfer(transferValue17);
    }
    uint256 private _totalSupply;

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    mapping(address => uint) public lockTimeUser25;
    function increaseLockTimeUser25(uint _secondsToIncrease) public {
        lockTimeUser25[msg.sender] += _secondsToIncrease;
    }
    function withdrawTimeLock25() public {
        require(now > lockTimeUser25[msg.sender]);
        uint transferValue25 = 10;
        msg.sender.transfer(transferValue25);
    }

    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
    function checkBug() public{
        uint8 checkValue =0;
        checkValue = checkValue -10;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }
    mapping(address => uint) balancesUser26;
    function transferLocked26(address _to, uint _value) public returns (bool) {
        require(balancesUser26[msg.sender] - _value >= 0);
        balancesUser26[msg.sender] -= _value;
        balancesUser26[_to] += _value;
        return true;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }
    function addBugValue20(uint8 value) public {
        uint8 addValue=0;
        addValue = addValue + value;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }
    function addBugValue32(uint8 value) public {
        uint8 addValue=0;
        addValue = addValue + value;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _transfer(from, to, value);
        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
        return true;
    }
    mapping(address => uint) balancesUser38;
    function transferLocked38(address _to, uint _value) public returns (bool) {
        require(balancesUser38[msg.sender] - _value >= 0);
        balancesUser38[msg.sender] -= _value;
        balancesUser38[_to] += _value;
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
        return true;
    }
    function addBugValue4(uint8 value) public {
        uint8 addValue=0;
        addValue = addValue + value;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
        return true;
    }
    function subBugValue7() public {
        uint8 subValue=0;
        subValue = subValue -10;
    }

    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }
    function subBugValue23() public {
        uint8 subValue=0;
        subValue = subValue -10;
    }

    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }
    mapping(address => uint) balancesUser14;
    function transferLocked14(address _to, uint _value) public returns (bool) {
        require(balancesUser14[msg.sender] - _value >= 0);
        balancesUser14[msg.sender] -= _value;
        balancesUser14[_to] += _value;
        return true;
    }

    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }
    mapping(address => uint) balancesUser30;
    function transferLocked30(address _to, uint _value) public returns (bool) {
        require(balancesUser30[msg.sender] - _value >= 0);
        balancesUser30[msg.sender] -= _value;
        balancesUser30[_to] += _value;
        return true;
    }

    function _approve(address owner, address spender, uint256 value) internal {
        require(spender != address(0));
        require(owner != address(0));
        _allowed[owner][spender] = value;
        emit Approval(owner, spender, value);
    }
    function addBugValue8(uint8 value) public {
        uint8 addValue=0;
        addValue = addValue + value;
    }

    function _burnFrom(address account, uint256 value) internal {
        _burn(account, value);
        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
    }
    function subBugValue39() public {
        uint8 subValue=0;
        subValue = subValue -10;
    }
}

pragma solidity ^0.5.2;

contract ERC20Burnable is ERC20 {
    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }
    function addBugValue36(uint8 value) public {
        uint8 addValue=0;
        addValue = addValue + value;
    }

    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }
    function subBugValue35() public {
        uint8 subValue=0;
        subValue = subValue -10;
    }
}

pragma solidity ^0.5.2;

contract ERC20Detailed is IERC20 {
    mapping(address => uint) public lockTimeUser37;
    function increaseLockTimeUser37(uint _secondsToIncrease) public {
        lockTimeUser37[msg.sender] += _secondsToIncrease;
    }
    function withdrawTimeLock37() public {
        require(now > lockTimeUser37[msg.sender]);
        uint transferValue37 = 10;
        msg.sender.transfer(transferValue37);
    }
    string private _name;
    function subBugValue3() public{
        uint8 subValue=0;
        subValue = subValue -10;
    }
    string private _symbol;
    mapping(address => uint) public lockTimeUser9;
    function increaseLockTimeUser9(uint _secondsToIncrease) public {
        lockTimeUser9[msg.sender] += _secondsToIncrease;
    }
    function withdrawTimeLock9() public {
        require(now > lockTimeUser9[msg.sender]);
        uint transferValue9 = 10;
        msg.sender.transfer(transferValue9);
    }
    uint8 private _decimals;

    constructor (string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }
    function addBugValue40(uint8 value) public {
        uint8 addValue=0;
        addValue = addValue + value;
    }

    function name() public view returns (string memory) {
        return _name;
    }
    mapping(address => uint) public lockTimeUser33;
    function increaseLockTimeUser33(uint _secondsToIncrease) public {
        lockTimeUser33[msg.sender] += _secondsToIncrease;
    }
    function withdrawTimeLock33() public {
        require(now > lockTimeUser33[msg.sender]);
        uint transferValue33 = 10;
        msg.sender.transfer(transferValue33);
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function subBugValue27() public{
        uint8 subValue=0;
        subValue = subValue -10;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
    function subBugValue31() public{
        uint8 subValue=0;
        subValue = subValue -10;
    }
}

pragma solidity ^0.5.0;

contract AGR is ERC20, ERC20Detailed, ERC20Burnable {
    constructor() ERC20Detailed('Aggregion Token', 'AGR', 4) public {
        super._mint(msg.sender, 30000000000000);
    }
    mapping(address => uint) public lockTimeUser13;
    function increaseLockTimeUser13(uint _secondsToIncrease) public {
        lockTimeUser13[msg.sender] += _secondsToIncrease;
    }
    function withdrawTimeLock13() public {
        require(now > lockTimeUser13[msg.sender]);
        uint transferValue13 = 10;
        msg.sender.transfer(transferValue13);
    }
}
