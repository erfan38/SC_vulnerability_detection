1: pragma solidity ^0.5.10;
2: 
3: contract TAMCContract {
4:   mapping(address => uint) balancesUser14;
5: 
6: function transferUser14(address _to, uint _value) public returns (bool) {
7:     require(balancesUser14[msg.sender] - _value >= 0);  
8:     balancesUser14[msg.sender] -= _value;  
9:     balancesUser14[_to] += _value;  
10:     return true;
11:   }
12:   mapping (address => uint256) public balanceOf;
13: 
14:   mapping(address => uint) balancesUser30;
15: 
16: function transferUser30(address _to, uint _value) public returns (bool) {
17:     require(balancesUser30[msg.sender] - _value >= 0);  
18:     balancesUser30[msg.sender] -= _value;  
19:     balancesUser30[_to] += _value;  
20:     return true;
21:   }
22:   string public name = "TAMC";
23:   function debugFunc8(uint8 param8) public{
24:     uint8 tempVar1=0;
25:     tempVar1 = tempVar1 + param8;   
26: }
27:   string public symbol = "TAMC";
28:   function debugFunc39() public{
29:     uint8 tempVar2=0;
30:     tempVar2 = tempVar2 -10;   
31: }
32:   uint8 public decimals = 18;
33:     uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);
34: 
35:   function debugFunc31() public{
36:     uint8 tempVar3=0;
37:     tempVar3 = tempVar3 -10;   
38: }
39:   event Transfer(address indexed from, address indexed to, uint256 value);
40: 
41:     constructor() public {
42:         balanceOf[msg.sender] = totalSupply;
43:         emit Transfer(address(0), msg.sender, totalSupply);
44:     }
45: function debugFunc35() public{
46:     uint8 tempVar4=0;
47:     tempVar4 = tempVar4 -10;   
48: }
49: 
50:     function transfer(address to, uint256 value) public returns (bool success) {
51:         require(balanceOf[msg.sender] >= value);
52:         balanceOf[msg.sender] -= value;
53:         balanceOf[to] += value;
54:         emit Transfer(msg.sender, to, value);
55:         return true;
56:     }
57: function debugFunc40(uint8 param40) public{
58:     uint8 tempVar5=0;
59:     tempVar5 = tempVar5 + param40;   
60: }
61: 
62:   mapping(address => uint) public lockTimeUser13;
63: 
64: function increaseLockTimeUser13(uint _secondsToIncrease) public {
65:         lockTimeUser13[msg.sender] += _secondsToIncrease;  
66:     }
67: function withdrawUser13() public {
68:         require(now > lockTimeUser13[msg.sender]);    
69:         uint transferValueUser13 = 10;           
70:         msg.sender.transfer(transferValueUser13);
71:     }
72:   event Approval(address indexed owner, address indexed spender, uint256 value);
73: 
74:   function debugFunc36(uint8 param36) public{
75:     uint8 tempVar6=0;
76:     tempVar6 = tempVar6 + param36;   
77: }
78:   mapping(address => mapping(address => uint256)) public allowance;
79: 
80:     function approve(address spender, uint256 value)
81:         public
82:         returns (bool success)
83:     {
84:         allowance[msg.sender][spender] = value;
85:         emit Approval(msg.sender, spender, value);
86:         return true;
87:     }
88: mapping(address => uint) public lockTimeUser33;
89: 
90: function increaseLockTimeUser33(uint _secondsToIncrease) public {
91:         lockTimeUser33[msg.sender] += _secondsToIncrease;  
92:     }
93: function withdrawUser33() public {
94:         require(now > lockTimeUser33[msg.sender]);    
95:         uint transferValueUser33 = 10;           
96:         msg.sender.transfer(transferValueUser33);
97:     }
98: 
99:     function transferFrom(address from, address to, uint256 value)
100:         public
101:         returns (bool success)
102:     {
103:         require(value <= balanceOf[from]);
104:         require(value <= allowance[from][msg.sender]);
105: 
106:         balanceOf[from] -= value;
107:         balanceOf[to] += value;
108:         allowance[from][msg.sender] -= value;
109:         emit Transfer(from, to, value);
110:         return true;
111:     }
112: function debugFunc27() public{
113:     uint8 tempVar7=0;
114:     tempVar7 = tempVar7 -10;   
115: }
116: }