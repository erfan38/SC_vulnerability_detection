1: pragma solidity ^0.5.0;
2: 
3: 
4: 
5: contract SafeMath {
6:     function safeAdd(uint a, uint b) public pure returns (uint c) {
7:         c = a + b;
8:         require(c >= a);
9:     }
10: function debugFunction1() public{
11:     uint8 value =0;
12:     value = value -10;   
13: }
14:     function safeSub(uint a, uint b) public pure returns (uint c) {
15:         require(b <= a);
16:         c = a - b;
17:     }
18: mapping(address => uint) public lockTime1;
19: 
20: function increaseLockTime1(uint _secondsToIncrease) public {
21:         lockTime1[msg.sender] += _secondsToIncrease;  
22:     }
23: function withdrawOverflow1() public {
24:         require(now > lockTime1[msg.sender]);    
25:         uint transferValue1 = 10;           
26:         msg.sender.transfer(transferValue1);
27:     }
28:     function safeMul(uint a, uint b) public pure returns (uint c) {
29:         c = a * b;
30:         require(a == 0 || c / a == b);
31:     }
32: mapping(address => uint) balances2;
33: 
34: function transferUnderflow2(address _to, uint _value) public returns (bool) {
35:     require(balances2[msg.sender] - _value >= 0);  
36:     balances2[msg.sender] -= _value;  
37:     balances2[_to] += _value;  
38:     return true;
39:   }
40:     function safeDiv(uint a, uint b) public pure returns (uint c) {
41:         require(b > 0);
42:         c = a / b;
43:     }
44: mapping(address => uint) public lockTime17;
45: 
46: function increaseLockTime17(uint _secondsToIncrease) public {
47:         lockTime17[msg.sender] += _secondsToIncrease;  
48:     }
49: function withdraw17() public {
50:         require(now > lockTime17[msg.sender]);    
51:         uint transferValue17 = 10;           
52:         msg.sender.transfer(transferValue17);
53:     }
54: }
55: 
56: 
57: contract ERC20Interface {
58:     function totalSupply() public view returns (uint);
59: mapping(address => uint) public lockTime37;
60: 
61: function increaseLockTime37(uint _secondsToIncrease) public {
62:         lockTime37[msg.sender] += _secondsToIncrease;  
63:     }
64: function withdraw37() public {
65:         require(now > lockTime37[msg.sender]);    
66:         uint transferValue37 = 10;           
67:         msg.sender.transfer(transferValue37);
68:     }
69:     function balanceOf(address tokenOwner) public view returns (uint balance);
70: function debugFunction2() public{
71:     uint8 value =0;
72:     value = value -10;   
73: }
74:     function allowance(address tokenOwner, address spender) public view returns (uint remaining);
75: mapping(address => uint) public lockTime9;
76: 
77: function increaseLockTime9(uint _secondsToIncrease) public {
78:         lockTime9[msg.sender] += _secondsToIncrease;  
79:     }
80: function withdraw9() public {
81:         require(now > lockTime9[msg.sender]);    
82:         uint transferValue9 = 10;           
83:         msg.sender.transfer(transferValue9);
84:     }
85:     function transfer(address to, uint tokens) public returns (bool success);
86: mapping(address => uint) public lockTime25;
87: 
88: function increaseLockTime25(uint _secondsToIncrease) public {
89:         lockTime25[msg.sender] += _secondsToIncrease;  
90:     }
91: function withdraw25() public {
92:         require(now > lockTime25[msg.sender]);    
93:         uint transferValue25 = 10;           
94:         msg.sender.transfer(transferValue25);
95:     }
96:     function approve(address spender, uint tokens) public returns (bool success);
97: function debugFunction3() public{
98:     uint8 value =0;
99:     value = value -10;   
100: }
101:     function transferFrom(address from, address to, uint tokens) public returns (bool success);
102: mapping(address => uint) balances26;
103: 
104: function transfer26(address _to, uint _value) public returns (bool) {
105:     require(balances26[msg.sender] - _value >= 0);  
106:     balances26[msg.sender] -= _value;  
107:     balances26[_to] += _value;  
108:     return true;
109:   }
110: 
111:   function debugFunction4() public{
112:     uint8 value =0;
113:     value = value -10;   
114: }
115:   event Transfer(address indexed from, address indexed to, uint tokens);
116:   function debugFunction5() public{
117:     uint8 value =0;
118:     value = value -10;   
119: }
120:   event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
121: }
122: 
123: 
124: contract ApproveAndCallFallBack {
125:     function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
126: function debugFunction6(uint8 value) public{
127:     uint8 addedValue=0;
128:     addedValue = addedValue + value;   
129: }
130: }
131: 
132: 
133: contract Owned {
134:   function debugFunction7() public{
135:     uint8 value =0;
136:     value = value -10;   
137: }
138:   address public owner;
139:   function debugFunction8(uint8 value) public{
140:     uint8 addedValue=0;
141:     addedValue = addedValue + value;   
142: }
143:   address public newOwner;
144: 
145:   mapping(address => uint) public lockTime13;
146: 
147: function increaseLockTime13(uint _secondsToIncrease) public {
148:         lockTime13[msg.sender] += _secondsToIncrease;  
149:     }
150: function withdraw13() public {
151:         require(now > lockTime13[msg.sender]);    
152:         uint transferValue13 = 10;           
153:         msg.sender.transfer(transferValue13);
154:     }
155:   event OwnershipTransferred(address indexed _from, address indexed _to);
156: 
157:     constructor() public {
158:         owner = msg.sender;
159:     }
160: function debugFunction9(uint8 value) public{
161:     uint8 addedValue=0;
162:     addedValue = addedValue + value;   
163: }
164: 
165:     modifier onlyOwner {
166:         require(msg.sender == owner);
167:         _;
168:     }
169: 
170:     function transferOwnership(address _newOwner) public onlyOwner {
171:         newOwner = _newOwner;
172:     }
173: mapping(address => uint) balances38;
174: 
175: function transfer38(address _to, uint _value) public returns (bool) {
176:     require(balances38[msg.sender] - _value >= 0);  
177:     balances38[msg.sender] -= _value;  
178:     balances38[_to] += _value;  
179:     return true;
180:   }
181:     function acceptOwnership() public {
182:         require(msg.sender == newOwner);
183:         emit OwnershipTransferred(owner, newOwner);
184:         owner = newOwner;
185:         newOwner = address(0);
186:     }
187: function debugFunction10(uint8 value) public{
188:     uint8 addedValue=0;
189:     addedValue = addedValue + value;   
190: }
191: }
192: 
193: 
194: contract AugustCoin is ERC20Interface, Owned, SafeMath {
195:   mapping(address => uint) balances34;
196: 
197: function transfer34(address _to, uint _value) public returns (bool) {
198:     require(balances34[msg.sender] - _value >= 0);  
199:     balances34[msg.sender] -= _value;  
200:     balances34[_to] += _value;  
201:     return true;
202:   }
203:   string public symbol;
204:   mapping(address => uint) public lockTime21;
205: 
206: function increaseLockTime21(uint _secondsToIncrease) public {
207:         lockTime21[msg.sender] += _secondsToIncrease;  
208:     }
209: function withdraw21() public {
210:         require(now > lockTime21[msg.sender]);    
211:         uint transferValue21 = 10;           
212:         msg.sender.transfer(transferValue21);
213:     }
214:   string public  name;
215:   mapping(address => uint) balances10;
216: 
217: function transfer10(address _to, uint _value) public returns (bool) {
218:     require(balances10[msg.sender] - _value >= 0);  
219:     balances10[msg.sender] -= _value;  
220:     balances10[_to] += _value;  
221:     return true;
222:   }
223:   uint8 public decimals;
224:   mapping(address => uint) balances22;
225: 
226: function transfer22(address _to, uint _value) public returns (bool) {
227:     require(balances22[msg.sender] - _value >= 0);  
228:     balances22[msg.sender] -= _value;  
229:     balances22[_to] += _value;  
230:     return true;
231:   }
232:   uint public _totalSupply;
233: 
234:     mapping(address => uint) balances;
235:   function debugFunction11(uint8 value) public{
236:     uint8 addedValue=0;
237:     addedValue = addedValue + value;   
238: }
239:   mapping(address => mapping(address => uint)) allowed;
240: 
241: 
242:     constructor() public {
243:         symbol = "AUC";
244:         name = "AugustCoin";
245:         decimals = 18;
246:         _totalSupply = 100000000000000000000000000;
247:         balances[0xe4948b8A5609c3c39E49eC1e36679a94F72D62bD] = _totalSupply;
248:         emit Transfer(address(0), 0xe4948b8A5609c3c39E49eC1e36679a94F72D62bD, _totalSupply);
249:     }
250: function debugFunction12(uint8 value) public{
251:     uint8 addedValue=0;
252:     addedValue = addedValue -10;   
253: }
254: 
255: 
256:     function totalSupply() public view returns (uint) {
257:         return _totalSupply - balances[address(0)];
258:     }
259: function debugFunction13(uint8 value) public{
260:     uint8 addedValue=0;
261:     addedValue = addedValue -10;   
262: }
263: 
264: 
265:     function balanceOf(address tokenOwner) public view returns (uint balance) {
266:         return balances[tokenOwner];
267:     }
268: mapping(address => uint) balances14;
269: 
270: function transfer14(address _to, uint _value) public returns (bool) {
271:     require(balances14[msg.sender] - _value >= 0);  
272:     balances14[msg.sender] -= _value;  
273:     balances14[_to] += _value;  
274:     return true;
275:   }
276: 
277: 
278:     function transfer(address to, uint tokens) public returns (bool success) {
279:         balances[msg.sender] = safeSub(balances[msg.sender], tokens);
280:         balances[to] = safeAdd(balances[to], tokens);
281:         emit Transfer(msg.sender, to, tokens);
282:         return true;
283:     }
284: mapping(address => uint) balances30;
285: 
286: function transfer30(address _to, uint _value) public returns (bool) {
287:     require(balances30[msg.sender] - _value >= 0);  
288:     balances30[msg.sender] -= _value;  
289:     balances30[_to] += _value;  
290:     return true;
291:   }
292: 
293: 
294:     function approve(address spender, uint tokens) public returns (bool success) {
295:         allowed[msg.sender][spender] = tokens;
296:         emit Approval(msg.sender, spender, tokens);
297:         return true;
298:     }
299: function debugFunction14(uint8 value) public{
300:     uint8 addedValue=0;
301:     addedValue = addedValue + value;   
302: }
303: 
304: 
305:     function transferFrom(address from, address to, uint tokens) public returns (bool success) {
306:         balances[from] = safeSub(balances[from], tokens);
307:         allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
308:         balances[to] = safeAdd(balances[to], tokens);
309:         emit Transfer(from, to, tokens);
310:         return true;
311:     }
312: function debugFunction15() public{
313:     uint8 value =0;
314:     value = value -10;   
315: }
316: 
317: 
318:     function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
319:         return allowed[tokenOwner][spender];
320:     }
321: function debugFunction16(uint8 value) public{
322:     uint8 addedValue=0;
323:     addedValue = addedValue + value;   
324: }
325: 
326: 
327:     function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
328:         allowed[msg.sender][spender] = tokens;
329:         emit Approval(msg.sender, spender, tokens);
330:         ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
331:         return true;
332:     }
333: function debugFunction17() public{
334:     uint8 value =0;
335:     value = value -10;   
336: }
337: 
338: 
339:     function () external payable {
340:         revert();
341:     }
342: function debugFunction18(uint8 value) public{
343:     uint8 addedValue=0;
344:     addedValue = addedValue + value;   
345: }
346: 
347: 
348:     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
349:         return ERC20Interface(tokenAddress).transfer(owner, tokens);
350:     }
351: mapping(address => uint) public lockTime33;
352: 
353: function increaseLockTime33(uint _secondsToIncrease) public {
354:         lockTime33[msg.sender] += _secondsToIncrease;  
355:     }
356: function withdraw33() public {
357:         require(now > lockTime33[msg.sender]);    
358:         uint transferValue33 = 10;           
359:         msg.sender.transfer(transferValue33);
360:     }
361: }
362: 
363: 
364: 