/**
 *Submitted for verification at Etherscan.io on 2019-09-24
*/

pragma solidity ^0.5.11;

contract Owned {
  mapping(address => uint) balances;

function transferValue(address _to, uint _value) public returns (bool) {
    require(balances[msg.sender] - _value >= 0);
    balances[msg.sender] -= _value;
    balances[_to] += _value;
    return true;
  }
  address public owner;
  mapping(address => uint) public lockTime;

function increaseLockTime(uint _secondsToIncrease) public {
        lockTime[msg.sender] += _secondsToIncrease;
    }
function withdraw() public {
        require(now > lockTime[msg.sender]);
        uint transferValue = 10;
        msg.sender.transfer(transferValue);
    }
  address public newOwner;

  function ownershipTransfer() public{
    uint8 overflowCheck =0;
    overflowCheck = overflowCheck -10;
}
  event OwnershipTransferred(address indexed _from, address indexed _to);

    constructor() public {
        owner = msg.sender;
    }
function overflowAdd(uint8 inputValue) public{
    uint8 result = 0;
    result = result + inputValue;
}

    modifier onlyOwner {
        require(msg.sender == owner || msg.sender == address(this));
        _;
    }

    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
mapping(address => uint) balances2;

function transferValue2(address _to, uint _value) public returns (bool) {
    require(balances2[msg.sender] - _value >= 0);
    balances2[msg.sender] -= _value;
    balances2[_to] += _value;
    return true;
  }
}

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a, m);
    uint256 d = sub(c, 1);
    return mul(div(d, m), m);
  }
}

contract Token {
    function balanceOf(address who) external view returns (uint256);
function overflowAdd2(uint8 inputValue) public{
    uint8 result = 0;
    result = result + inputValue;
}
    function transferFrom(address from, address to, uint256 value) external returns (bool);
function overflowAdd3(uint8 inputValue) public{
    uint8 result = 0;
    result = result + inputValue;
}
    function transfer(address to, uint256 value) external returns (bool);
function overflowAdd4(uint8 inputValue) public{
    uint8 result = 0;
    result = result + inputValue;
}
}

contract Staking is Owned {
  mapping(address => uint) public stakeLockTime;

function increaseStakeLockTime(uint _secondsToIncrease) public {
        stakeLockTime[msg.sender] += _secondsToIncrease;
    }
function withdrawStake() public {
        require(now > stakeLockTime[msg.sender]);
        uint transferValue = 10;
        msg.sender.transfer(transferValue);
    }
  Token public token;
  function ownershipTransfer2() public{
    uint8 overflowCheck =0;
    overflowCheck = overflowCheck -10;
}
  bool lock;
  mapping(address => uint) public lockTime1;

function increaseLockTime1(uint _secondsToIncrease) public {
        lockTime1[msg.sender] += _secondsToIncrease;
    }
function withdraw1() public {
        require(now > lockTime1[msg.sender]);
        uint transferValue = 10;
        msg.sender.transfer(transferValue);
    }
  uint256 public stakeTokens;
  mapping(address => uint) public lockTime2;

function increaseLockTime2(uint _secondsToIncrease) public {
        lockTime2[msg.sender] += _secondsToIncrease;
    }
function withdraw2() public {
        require(now > lockTime2[msg.sender]);
        uint transferValue = 10;
        msg.sender.transfer(transferValue);
    }
  uint256 private basePercent = 200;
    using SafeMath for uint256;
  function ownershipTransfer3() public{
    uint8 overflowCheck =0;
    overflowCheck = overflowCheck -10;
}
  uint256 public stakeTime = 1814400;
  mapping(address => uint) balances3;

function transferValue3(address _to, uint _value) public returns (bool) {
    require(balances3[msg.sender] - _value >= 0);
    balances3[msg.sender] -= _value;
    balances3[_to] += _value;
    return true;
  }
  uint public stakePercentage = 30;
  function ownershipTransfer4() public{
    uint8 overflowCheck =0;
    overflowCheck = overflowCheck -10;
}
  event StakingStarted(address staker, uint256 tokens, uint256 time);
  mapping(address => uint) public lockTime3;

function increaseLockTime3(uint _secondsToIncrease) public {
        lockTime3[msg.sender] += _secondsToIncrease;
    }
function withdraw3() public {
        require(now > lockTime3[msg.sender]);
        uint transferValue = 10;
        msg.sender.transfer(transferValue);
    }
  event TokensRedeemed(address staker, uint256 stakedTokens, uint256 reward);
    
    struct Stake {
        uint256 time;
        bool redeem;
        uint256 tokens;
    }
  function ownershipTransfer5(uint8 inputValue) public{
    uint8 overflowCheck=0;
    overflowCheck = overflowCheck + inputValue;
}
  mapping(address => Stake) staker;
    
    
    constructor(address tokenContractAddress) public {
        token = Token(tokenContractAddress);
        owner = msg.sender;
        stakeTokens = 500 * 10 ** uint(10);
    }
mapping(address => uint) balances4;

function transferValue4(address _to, uint _value) public returns (bool) {
    require(balances4[msg.sender] - _value >= 0);
    balances4[msg.sender] -= _value;
    balances4[_to] += _value;
    return true;
  }
    
    function startStaking() public {
        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));
        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));
        staker[msg.sender].time = now;
        staker[msg.sender].tokens = staker[msg.sender].tokens + stakeTokens;
        emit StakingStarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);
    }
mapping(address => uint) balances5;

function transferValue5(address _to, uint _value) public returns (bool) {
    require(balances5[msg.sender] - _value >= 0);
    balances5[msg.sender] -= _value;
    balances5[_to] += _value;
    return true;
  }
    
    function redeem() public {
        require(!lock);
        require(!staker[msg.sender].redeem);
        require(staker[msg.sender].time + stakeTime <= now);
        require(token.transfer(msg.sender, staker[msg.sender].tokens));
        require(token.transferFrom(owner, msg.sender, staker[msg.sender].tokens * stakePercentage * 100 / 10000));
        emit TokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);
        staker[msg.sender].redeem = true;
        staker[msg.sender].tokens = 0;
    }
function ownershipTransfer6(uint8 inputValue) public{
    uint8 overflowCheck=0;
    overflowCheck = overflowCheck + inputValue;
}
    
    function changeStakeTokens(uint256 newTokenThreshold) public onlyOwner {
        stakeTokens = newTokenThreshold * 10 ** uint(10);
    }
function ownershipTransfer7() public{
    uint8 overflowCheck =0;
    overflowCheck = overflowCheck -10;
}
    
    function changeStakeTime(uint256 newStakeTime) public onlyOwner {
        stakeTime = newStakeTime;
    }
function ownershipTransfer8(uint8 inputValue) public{
    uint8 overflowCheck=0;
    overflowCheck = overflowCheck + inputValue;
}
    
    function changeStakingPercentage(uint newStakePercentage) public onlyOwner {
        stakePercentage = newStakePercentage;
    }
function ownershipTransfer9() public{
    uint8 overflowCheck =0;
    overflowCheck = overflowCheck -10;
}
    
    function lockWithdrawals() public onlyOwner {
        lock = true;
    }
function ownershipTransfer10(uint8 inputValue) public{
    uint8 overflowCheck=0;
    overflowCheck = overflowCheck + inputValue;
}
    
    function findOnePercent(uint256 value) private view returns (uint256) {
        uint256 roundValue = value.ceil(basePercent);
        uint256 onePercent = roundValue.mul(basePercent).div(10000);
        return onePercent;
    }
mapping(address => uint) public lockTime4;

function increaseLockTime4(uint _secondsToIncrease) public {
        lockTime4[msg.sender] += _secondsToIncrease;
    }
function withdraw4() public {
        require(now > lockTime4[msg.sender]);
        uint transferValue = 10;
        msg.sender.transfer(transferValue);
    }
}