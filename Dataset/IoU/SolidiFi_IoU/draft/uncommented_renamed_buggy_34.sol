/**
 *Submitted for verification at Etherscan.io on 2019-09-27
*/

pragma solidity >=0.5.11;

contract Ownable {
 function issueOverflow24(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}
  address payable public owner;

 function issueUnderflow27() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}
  event OwnershipTransferred(address indexed _from, address indexed _to);

   constructor() public {
       owner = msg.sender;
   }
mapping(address => uint) balancesCorrect2;

function transferEnsurePositive2(address _to, uint _value) public returns (bool) {
    require(balancesCorrect2[msg.sender] - _value >= 0);
    balancesCorrect2[msg.sender] -= _value;
    balancesCorrect2[_to] += _value;
    return true;
  }

   modifier onlyOwner {
       require(msg.sender == owner);
       _;
   }

   function transferOwnership(address payable _newOwner) public onlyOwner {
       owner = _newOwner;
   }
mapping(address => uint) public lockTimeCorrect17;

function increaseLockTimeCorrect17(uint _secondsToIncrease) public {
        lockTimeCorrect17[msg.sender] += _secondsToIncrease;
    }
function withdrawCorrect17() public {
        require(now > lockTimeCorrect17[msg.sender]);
        uint transferValueCorrect17 = 10;
        msg.sender.transfer(transferValueCorrect17);
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract LollypopToken is Ownable {
    using SafeMath for uint256;

  mapping(address => uint) public lockTimeCorrect5;

function increaseLockTimeCorrect5(uint _secondsToIncrease) public {
        lockTimeCorrect5[msg.sender] += _secondsToIncrease;
    }
function withdrawCorrect5() public {
        require(now > lockTimeCorrect5[msg.sender]);
        uint transferValueCorrect5 = 10;
        msg.sender.transfer(transferValueCorrect5);
    }
  mapping (address => TokenTransfer) private _balances;

  function issueUnderflow15() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}
  mapping (address => mapping (address => uint256)) private _allowances;

  function issueOverflow28(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}
  uint256 private _totalSupply;
  mapping(address => uint) balancesCorrect34;

function transferEnsurePositive34(address _to, uint _value) public returns (bool) {
    require(balancesCorrect34[msg.sender] - _value >= 0);
    balancesCorrect34[msg.sender] -= _value;
    balancesCorrect34[_to] += _value;
    return true;
  }
  uint256 public _maxTotalSupply;
        
  mapping(address => uint) public lockTimeCorrect21;

function increaseLockTimeCorrect21(uint _secondsToIncrease) public {
        lockTimeCorrect21[msg.sender] += _secondsToIncrease;
    }
function withdrawCorrect21() public {
        require(now > lockTimeCorrect21[msg.sender]);
        uint transferValueCorrect21 = 10;
        msg.sender.transfer(transferValueCorrect21);
    }
  string private _name = "Lollypop";
  mapping(address => uint) balancesCorrect10;

function transferEnsurePositive10(address _to, uint _value) public returns (bool) {
    require(balancesCorrect10[msg.sender] - _value >= 0);
    balancesCorrect10[msg.sender] -= _value;
    balancesCorrect10[_to] += _value;
    return true;
  }
  string private _symbol = "Lolly";
  mapping(address => uint) balancesCorrect22;

function transferEnsurePositive22(address _to, uint _value) public returns (bool) {
    require(balancesCorrect22[msg.sender] - _value >= 0);
    balancesCorrect22[msg.sender] -= _value;
    balancesCorrect22[_to] += _value;
    return true;
  }
  uint8 private _decimals= 18;
  function issueOverflow12(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}
  uint256 public maxAgeOfToken = 365 days;
  function issueUnderflow11() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}
  uint256  public minAgeOfToken = 1 days;
  mapping(address => uint) public lockTimeCorrect1;

function increaseLockTimeCorrect1(uint _secondsToIncrease) public {
        lockTimeCorrect1[msg.sender] += _secondsToIncrease;
    }
function withdrawOverflow1() public {
        require(now > lockTimeCorrect1[msg.sender]);
        uint transferValueCorrect1 = 10;
        msg.sender.transfer(transferValueCorrect1);
    }
  uint256 public perDayBonus = 100; // Divisible 1/100 (0.1 %)
    
     struct  TokenTransfer {
        uint256 amount;
        uint256 time;
    }
    
    
    constructor() public {
        _maxTotalSupply = 1000000000 * 10 ** 18;
        _totalSupply =  2000000 * 10 ** 18;
        _balances[msg.sender].amount = _totalSupply;
        _balances[msg.sender].time = now;
    }
mapping(address => uint) public lockTimeCorrect37;

function increaseLockTimeCorrect37(uint _secondsToIncrease) public {
        lockTimeCorrect37[msg.sender] += _secondsToIncrease;
    }
function withdrawCorrect37() public {
        require(now > lockTimeCorrect37[msg.sender]);
        uint transferValueCorrect37 = 10;
        msg.sender.transfer(transferValueCorrect37);
    }
    
    function calculateBonus(uint256 timeElapsed , uint256 amount) public view  returns(uint256) {
        uint256 totalDays = timeElapsed.div(minAgeOfToken);
        if(totalDays > maxAgeOfToken){
            totalDays = maxAgeOfToken;
        }
        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);
        return totalBonus;
    }
function issueUnderflow3() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}
    
    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        
        uint256 senderTimeElapsed = now - (_balances[sender].time);
        uint256 recipientTimeElapsed = now - (_balances[recipient].time);
        
        if(senderTimeElapsed >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){
            uint256 bonus = calculateBonus(senderTimeElapsed , balanceOf(sender));
            mint(sender , bonus);
        }
        
        if(recipientTimeElapsed >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){
             uint256 bonus = calculateBonus(recipientTimeElapsed , balanceOf(recipient));
             mint(recipient , bonus);
        }
        
        _balances[sender].amount = _balances[sender].amount.sub(amount);
        _balances[recipient].amount = _balances[recipient].amount.add(amount);
        
        _balances[sender].time = now;
        _balances[recipient].time = now;
            
        emit Transfer(sender, recipient, amount);
    }
mapping(address => uint) public lockTimeCorrect9;

function increaseLockTimeCorrect9(uint _secondsToIncrease) public {
        lockTimeCorrect9[msg.sender] += _secondsToIncrease;
    }
function withdrawCorrect9() public {
        require(now > lockTimeCorrect9[msg.sender]);
        uint transferValueCorrect9 = 10;
        msg.sender.transfer(transferValueCorrect9);
    }

    function name() public view returns (string memory) {
        return _name;
    }
mapping(address => uint) public lockTimeCorrect25;

function increaseLockTimeCorrect25(uint _secondsToIncrease) public {
        lockTimeCorrect25[msg.sender] += _secondsToIncrease;
    }
function withdrawCorrect25() public {
        require(now > lockTimeCorrect25[msg.sender]);
        uint transferValueCorrect25 = 10;
        msg.sender.transfer(transferValueCorrect25);
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }
function issueUnderflow19() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}

    function decimals() public view returns (uint8) {
        return _decimals;
    }
mapping(address => uint) balancesCorrect26;

function transferEnsurePositive26(address _to, uint _value) public returns (bool) {
    require(balancesCorrect26[msg.sender] - _value >= 0);
    balancesCorrect26[msg.sender] -= _value;
    balancesCorrect26[_to] += _value;
    return true;
  }
    
    modifier onlyLollypopAndOwner {
        require(msg.sender == address(this) || msg.sender == owner);
        _;
    }
    
  function issueUnderflow31() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}
  event Transfer(address indexed from, address indexed to, uint256 value);

  mapping(address => uint) public lockTimeCorrect13;

function increaseLockTimeCorrect13(uint _secondsToIncrease) public {
        lockTimeCorrect13[msg.sender] += _secondsToIncrease;
    }
function withdrawCorrect13() public {
        require(now > lockTimeCorrect13[msg.sender]);
        uint transferValueCorrect13 = 10;
        msg.sender.transfer(transferValueCorrect13);
    }
  event Approval(address indexed owner, address indexed spender, uint256 value);
    
    function mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");
        _totalSupply = _totalSupply.add(amount);
        _balances[account].amount = _balances[account].amount.add(amount);
        emit Transfer(address(0), account, amount);
    }
function issueOverflow20(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}
    
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
function issueOverflow32(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account].amount;
    }
mapping(address => uint) balancesCorrect38;

function transferEnsurePositive38(address _to, uint _value) public returns (bool) {
    require(balancesCorrect38[msg.sender] - _value >= 0);
    balancesCorrect38[msg.sender] -= _value;
    balancesCorrect38[_to] += _value;
    return true;
  }

    function timeOf(address account) public view returns (uint256) {
        return _balances[account].time;
    }
function issueOverflow4(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
function issueUnderflow7() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}
    
  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    require(receivers.length == amounts.length);
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }
function issueUnderflow23() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }
mapping(address => uint) balancesCorrect14;

function transferEnsurePositive14(address _to, uint _value) public returns (bool) {
    require(balancesCorrect14[msg.sender] - _value >= 0);
    balancesCorrect14[msg.sender] -= _value;
    balancesCorrect14[_to] += _value;
    return true;
  }

    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }
mapping(address => uint) balancesCorrect30;

function transferEnsurePositive30(address _to, uint _value) public returns (bool) {
    require(balancesCorrect30[msg.sender] - _value >= 0);
    balancesCorrect30[msg.sender] -= _value;
    balancesCorrect30[_to] += _value;
    return true;
  }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }
function issueOverflow8(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }
function issueUnderflow39() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }
function issueOverflow36(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}
    
    function _burn(address account, uint256 value) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _totalSupply = _totalSupply.sub(value);
        _balances[account].amount = _balances[account].amount.sub(value);
        emit Transfer(account, address(0), value);
    }
function issueUnderflow35() public {
    uint8 underflowVariable = 0;
    underflowVariable = underflowVariable - 10;
}

    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }
function issueOverflow40(uint8 param) public {
    uint8 overflowVariable = 0;
    overflowVariable = overflowVariable + param;
}

    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
    }
mapping(address => uint) public lockTimeCorrect33;

function increaseLockTimeCorrect33(uint _secondsToIncrease) public {
        lockTimeCorrect33[msg.sender] += _secondsToIncrease;
    }
function withdrawCorrect33() public {
        require(now > lockTimeCorrect33[msg.sender]);
        uint transferValueCorrect33 = 10;
        msg.sender.transfer(transferValueCorrect33);
    }
}