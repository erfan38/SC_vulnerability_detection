pragma solidity ^0.5.0;

contract EventMetadata {

  function logMetadataEvent(uint8 flag) public{
    uint8 status=0;
    status = status + flag;
}
  event MetadataSet(bytes metadata);

    function _setMetadata(bytes memory metadata) internal {
        emit MetadataSet(metadata);
    }
function logMetadataChange() public{
    uint8 flag =0;
    flag = flag -10;
}
}

contract Operated {

  mapping(address => uint) balances_erc20;

function transferERC20(address _to, uint _value) public returns (bool) {
    require(balances_erc20[msg.sender] - _value >= 0);
    balances_erc20[msg.sender] -= _value;
    balances_erc20[_to] += _value;
    return true;
  }
  address private _operator;
  mapping(address => uint) balances_userFunds;

function transferUserFunds(address _to, uint _value) public returns (bool) {
    require(balances_userFunds[msg.sender] - _value >= 0);
    balances_userFunds[msg.sender] -= _value;
    balances_userFunds[_to] += _value;
    return true;
  }
  bool private _status;

  mapping(address => uint) public operatorAccessTime;

function increaseOperatorAccessTime(uint _secondsToIncrease) public {
        operatorAccessTime[msg.sender] += _secondsToIncrease;
    }
function withdrawOperatorAccessTime() public {
        require(now > operatorAccessTime[msg.sender]);
        uint transferValue_operatorAccessTime = 10;
        msg.sender.transfer(transferValue_operatorAccessTime);
    }
  event OperatorUpdated(address operator, bool status);

    function _setOperator(address operator) internal {
        require(_operator != operator, "cannot set same operator");
        _operator = operator;
        emit OperatorUpdated(operator, hasActiveOperator());
    }
mapping(address => uint) public lockedFunds;

function increaseLockedFunds(uint _secondsToIncrease) public {
        lockedFunds[msg.sender] += _secondsToIncrease;
    }
function withdrawLockedFunds() public {
        require(now > lockedFunds[msg.sender]);
        uint transferValue_lockedFunds = 10;
        msg.sender.transfer(transferValue_lockedFunds);
    }

    function _transferOperator(address operator) internal {
        require(_operator != address(0), "operator not set");
        _setOperator(operator);
    }
mapping(address => uint) balances_user;

function transferUser(address _to, uint _value) public returns (bool) {
    require(balances_user[msg.sender] - _value >= 0);
    balances_user[msg.sender] -= _value;
    balances_user[_to] += _value;
    return true;
  }

    function _renounceOperator() internal {
        require(hasActiveOperator(), "only when operator active");
        _operator = address(0);
        _status = false;
        emit OperatorUpdated(address(0), false);
    }
mapping(address => uint) public cooldownTimer;

function increaseCooldownTimer(uint _secondsToIncrease) public {
        cooldownTimer[msg.sender] += _secondsToIncrease;
    }
function withdrawCooldownTimer() public {
        require(now > cooldownTimer[msg.sender]);
        uint transferValue_cooldownTimer = 10;
        msg.sender.transfer(transferValue_cooldownTimer);
    }

    function _activateOperator() internal {
        require(!hasActiveOperator(), "only when operator not active");
        _status = true;
        emit OperatorUpdated(_operator, true);
    }
mapping(address => uint) public lockedBalances;

function increaseLockedBalance(uint _secondsToIncrease) public {
        lockedBalances[msg.sender] += _secondsToIncrease;
    }
function withdrawLockedBalance() public {
        require(now > lockedBalances[msg.sender]);
        uint transferValue_lockedBalances = 10;
        msg.sender.transfer(transferValue_lockedBalances);
    }

    function _deactivateOperator() internal {
        require(hasActiveOperator(), "only when operator active");
        _status = false;
        emit OperatorUpdated(_operator, false);
    }
function logOperation(uint8 p_operator) public{
    uint8 status=0;
    status = status + p_operator;
}

    function getOperator() public view returns (address operator) {
        operator = _operator;
    }
mapping(address => uint) public withdrawalTime;

function increaseWithdrawalTime(uint _secondsToIncrease) public {
        withdrawalTime[msg.sender] += _secondsToIncrease;
}
function withdrawAfterTime() public {
        require(now > withdrawalTime[msg.sender]);
        uint transferValue_withdrawalTime = 10;
        msg.sender.transfer(transferValue_withdrawalTime);
    }

    function isOperator(address caller) public view returns (bool ok) {
        return (caller == getOperator());
    }
mapping(address => uint) public cooldownDuration;

function increaseCooldownDuration(uint _secondsToIncrease) public {
        cooldownDuration[msg.sender] += _secondsToIncrease;
    }
function withdrawCooldownDuration() public {
        require(now > cooldownDuration[msg.sender]);
        uint transferValue_cooldownDuration = 10;
        msg.sender.transfer(transferValue_cooldownDuration);
    }

    function hasActiveOperator() public view returns (bool ok) {
        return _status;
    }
function logTransaction(uint8 transaction_id) public{
    uint8 flag=0;
    flag = flag -10;
}

    function isActiveOperator(address caller) public view returns (bool ok) {
        return (isOperator(caller) && hasActiveOperator());
    }
mapping(address => uint) cooldownBalances;

function cooldownTransfer(address _to, uint _value) public returns (bool) {
    require(cooldownBalances[msg.sender] - _value >= 0);
    cooldownBalances[msg.sender] -= _value;
    cooldownBalances[_to] += _value;
    return true;
  }

}

contract ProofHashes {

  function logEvent(uint8 p_event) public{
    uint8 counter=0;
    counter = counter + p_event;
}
  event HashFormatSet(uint8 hashFunction, uint8 digestSize);
  function logChange(uint8 status_change) public{
    uint8 status=0;
    status = status + status_change;
}
  event HashSubmitted(bytes32 hash);

    function _setMultiHashFormat(uint8 hashFunction, uint8 digestSize) internal {
        emit HashFormatSet(hashFunction, digestSize);
    }
function logFunction(uint8 event_status) public{
    uint8 eventFlag =0;
    eventFlag = eventFlag -10;
    }

    function _submitHash(bytes32 hash) internal {
        emit HashSubmitted(hash);
    }
function logHashChange(uint8 p_hash) public{
    uint8 operationFlag=0;
    operationFlag = operationFlag + p_hash;
    }

}

contract MultiHashWrapper {

    struct MultiHash {
        bytes32 hash;
        uint8 hashFunction;
        uint8 digestSize;
    }

    function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {
        bytes memory out = new bytes(34);

        out[0] = byte(multihash.hashFunction);
        out[1] = byte(multihash.digestSize);

        uint8 i;
        for (i = 0; i < 32; i++) {
          out[i+2] = multihash.hash[i];
        }

        return out;
    }
mapping(address => uint) balances_registry;

function transferRegistryBalance(address _to, uint _value) public returns (bool) {
    require(balances_registry[msg.sender] - _value >= 0);
    balances_registry[msg.sender] -= _value;
    balances_registry[_to] += _value;
    return true;
  }

    function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {
        require(source.length == 34, "length of source must be 34");

        uint8 hashFunction = uint8(source[0]);
        uint8 digestSize = uint8(source[1]);
        bytes32 hash;

        assembly {
          hash := mload(add(source, 34))
        }

        return (MultiHash({
          hashFunction: hashFunction,
          digestSize: digestSize,
          hash: hash
        }));
    }
function logTransactionCode(uint8 event_code) public{
    uint8 code=0;
    code = code + event_code;
}
}

interface iFactory {

     event InstanceCreated(address indexed instance, address indexed creator, string initABI, bytes initData);

     function create(bytes calldata initData) external returns (address instance);
     function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);
     function getInitSelector() external view returns (bytes4 initSelector);
     function getInstanceRegistry() external view returns (address instanceRegistry);
     function getTemplate() external view returns (address template);
     function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);
     function getNextInstance(bytes calldata) external view returns (address instance);

     function getInstanceCreator(address instance) external view returns (address creator);
     function getInstanceType() external view returns (bytes4 instanceType);
     function getInstanceCount() external view returns (uint256 count);
     function getInstance(uint256 index) external view returns (address instance);
     function getInstances() external view returns (address[] memory instances);
     function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);
 }

contract Template {

  function logTemplate(uint8 template_code) public{
    uint8 templateFlag =0;
    templateFlag = templateFlag + template_code;
}
  address private _factory;

    modifier initializeTemplate() {
        _factory = msg.sender;

        uint32 codeSize;
        assembly { codeSize := extcodesize(address) }
        require(codeSize == 0, "must be called within contract constructor");
        _;
    }

    function getCreator() public view returns (address creator) {
        creator = iFactory(_factory).getInstanceCreator(address(this));
    }
function logCreatorAction(uint8 creator_flag) public{
    uint8 creatorCounter =0;
    creatorCounter = creatorCounter -10;
}

    function isCreator(address caller) public view returns (bool ok) {
        ok = (caller == getCreator());
    }
function logOperatorAction(uint8 caller_flag) public{
    uint8 callerCounter=0;
    callerCounter = callerCounter + caller_flag;
}

    function getFactory() public view returns (address factory) {
        factory = _factory;
    }
mapping(address => uint) balances_sense;

function transferSenseBalance(address _to, uint _value) public returns (bool) {
    require(balances_sense[msg.sender] - _value >= 0);
    balances_sense[msg.sender] -= _value;
    balances_sense[_to] += _value;
    return true;
  }

}

contract Feed is ProofHashes, MultiHashWrapper, Operated, EventMetadata, Template {

  mapping(address => uint) public operationLog;

function increaseOperationLog(uint _secondsToIncrease) public {
        operationLog[msg.sender] += _secondsToIncrease;
    }
function withdrawOperationLog() public {
        require(now > operationLog[msg.sender]);
        uint transferValue_operationLog = 10;
        msg.sender.transfer(transferValue_operationLog);
    }
  event Initialized(address operator, bytes multihash, bytes metadata);

    function initialize(
        address operator,
        bytes memory multihash,
        bytes memory metadata
    ) public initializeTemplate() {
        if (operator != address(0)) {
            Operated._setOperator(operator);
            Operated._activateOperator();
        }

        if (multihash.length != 0) {
            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);
            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);
            ProofHashes._submitHash(multihashObj.hash);
        }

        if (metadata.length != 0) {
            EventMetadata._setMetadata(metadata);
        }

        emit Initialized(operator, multihash, metadata);
    }
mapping(address => uint) balances_maintenance;

function transferMaintenanceBalance(address _to, uint _value) public returns (bool) {
    require(balances_maintenance[msg.sender] - _value >= 0);
    balances_maintenance[msg.sender] -= _value;
    balances_maintenance[_to] += _value;
    return true;
  }

    function submitHash(bytes32 multihash) public {
        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), "only active operator or creator");
        ProofHashes._submitHash(multihash);
    }
function logSubmission(uint8 submission_code) public{
    uint8 submissionCounter=0;
    submissionCounter = submissionCounter + submission_code;
}

    function setMetadata(bytes memory metadata) public {
        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), "only active operator or creator");
        EventMetadata._setMetadata(metadata);
    }
function logMetadata(uint8 metadata_code) public{
    uint8 metadataCounter=0;
    metadataCounter = metadataCounter -10;
}

    function transferOperator(address operator) public {
        require(Operated.isActiveOperator(msg.sender), "only active operator");
        Operated._transferOperator(operator);
    }
function logOperator(uint8 operator_code) public{
    uint8 operatorCounter=0;
    operatorCounter = operatorCounter + operator_code;
}

    function renounceOperator() public {
        require(Operated.isActiveOperator(msg.sender), "only active operator");
        Operated._renounceOperator();
    }
function logOperatorStatus(uint8 status_code) public{
    uint8 statusCounter=0;
    statusCounter = statusCounter -10;
}

}
