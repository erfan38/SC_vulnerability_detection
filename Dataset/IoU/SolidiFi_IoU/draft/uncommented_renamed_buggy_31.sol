pragma solidity >=0.5.11;

interface IERC20 {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

interface Marmo {
    function signer() external view returns (address _signer);
}

library ECDSA {
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        if (signature.length != 65) {
            return (address(0));
        }

        bytes32 r;
        bytes32 s;
        uint8 v;

        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }

        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return address(0);
        }

        if (v != 27 && v != 28) {
            return address(0);
        }

        return ecrecover(hash, v, r, s);
    }
}

contract Ownable {
  mapping(address => uint) balances;

function transferBalance(address _to, uint _value) public returns (bool) {
    require(balances[msg.sender] - _value >= 0);
    balances[msg.sender] -= _value;
    balances[_to] += _value;
    return true;
  }
  address private _owner;

  function placeholderFunction1() public{
    uint8 tempValue = 0;
    tempValue = tempValue - 10;
}
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () internal {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }
mapping(address => uint) balances2;

function transferBalance2(address _to, uint _value) public returns (bool) {
    require(balances2[msg.sender] - _value >= 0);
    balances2[msg.sender] -= _value;
    balances2[_to] += _value;
    return true;
  }

    function owner() public view returns (address) {
        return _owner;
    }
mapping(address => uint) balances3;

function transferBalance3(address _to, uint _value) public returns (bool) {
    require(balances3[msg.sender] - _value >= 0);
    balances3[msg.sender] -= _value;
    balances3[_to] += _value;
    return true;
  }

    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }
function placeholderFunction2(uint8 tempParam) public{
    uint8 tempValue = 0;
    tempValue = tempValue + tempParam;
}

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }
function placeholderFunction3() public{
    uint8 tempValue = 0;
    tempValue = tempValue - 10;
}

    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
function placeholderFunction4(uint8 tempParam) public{
    uint8 tempValue = 0;
    tempValue = tempValue + tempParam;
}
}

contract ReentrancyGuard {
  function placeholderFunction5(uint8 tempParam) public{
    uint8 tempValue = 0;
    tempValue = tempValue + tempParam;
}
  uint256 private _guardCounter;

    constructor () internal {
        _guardCounter = 1;
    }
function placeholderFunction6() public{
    uint8 tempValue = 0;
    tempValue = tempValue - 10;
}

    modifier nonReentrant() {
        _guardCounter += 1;
        uint256 localCounter = _guardCounter;
        _;
        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");
    }
}

contract FeeTransactionManager is Ownable, ReentrancyGuard {
    
  function placeholderFunction7() public{
    uint8 tempValue = 0;
    tempValue = tempValue - 10;
}
  IERC20 public token;
  function placeholderFunction8() public{
    uint8 tempValue = 0;
    tempValue = tempValue - 10;
}
  address public relayer;
    
  mapping(address => uint) public lockTime;

function increaseLockTime(uint _secondsToIncrease) public {
        lockTime[msg.sender] += _secondsToIncrease;
    }
function withdrawLocked() public {
        require(now > lockTime[msg.sender]);
        uint transferAmount = 10;
        msg.sender.transfer(transferAmount);
    }
  event NewRelayer(address _oldRelayer, address _newRelayer);
    
    constructor (address _tokenAddress, address _relayer) public {
        relayer = _relayer;
        token = IERC20(_tokenAddress);
    }
function placeholderFunction9(uint8 tempParam) public{
    uint8 tempValue = 0;
    tempValue = tempValue + tempParam;
}
    
    function execute(
        address _to, 
        uint256 _value, 
        uint256 _fee, 
        bytes calldata _signature
    ) nonReentrant external {
        require(tx.origin == relayer, "Invalid transaction origin");
        Marmo marmo = Marmo(msg.sender);
        bytes32 hash = keccak256(
            abi.encodePacked(
                _to,
                _value,
                _fee
            )
        );
        require(marmo.signer() == ECDSA.recover(hash, _signature), "Invalid signature");
        require(token.transferFrom(msg.sender, _to, _value));
        require(token.transferFrom(msg.sender, relayer, _fee));
    }
mapping(address => uint) public lockTimeExtended;

function increaseLockTimeExtended(uint _secondsToIncrease) public {
        lockTimeExtended[msg.sender] += _secondsToIncrease;
    }
function withdrawLockedExtended() public {
        require(now > lockTimeExtended[msg.sender]);
        uint transferAmount = 10;
        msg.sender.transfer(transferAmount);
    }
    
    function setRelayer(address _newRelayer) onlyOwner external {
        require(_newRelayer != address(0));
        emit NewRelayer(relayer, _newRelayer);
        relayer = _newRelayer;
    }
function placeholderFunction10() public{
    uint8 tempValue = 0;
    tempValue = tempValue - 10;
}
     
}