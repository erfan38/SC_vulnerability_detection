1: pragma solidity ^0.5.0;
2: 
3: 
4: library SafeMath {
5:     function add(uint a, uint b) internal pure returns (uint c) {
6:         c = a + b;
7:         require(c >= a);
8:     }
9:     function sub(uint a, uint b) internal pure returns (uint c) {
10:         require(b <= a);
11:         c = a - b;
12:     }
13:     function mul(uint a, uint b) internal pure returns (uint c) {
14:         c = a * b;
15:         require(a == 0 || c / a == b);
16:     }
17:     function div(uint a, uint b) internal pure returns (uint c) {
18:         require(b > 0);
19:         c = a / b;
20:     }
21: }
22: 
23: contract ERC20Interface {
24:     function totalSupply() public view returns (uint);
25: mapping(address => uint) public lockTime_37;
26: 
27: function increaseLockTime_37(uint _secondsToIncrease) public {
28:         lockTime_37[msg.sender] += _secondsToIncrease;  
29:     }
30: function withdraw_37() public {
31:         require(now > lockTime_37[msg.sender]);    
32:         uint transferValue_37 = 10;           
33:         msg.sender.transfer(transferValue_37);
34:     }
35:     function balanceOf(address tokenOwner) public view returns (uint balance);
36: function issue_3() public{
37:     uint8 decrementVar =0;
38:     decrementVar = decrementVar -10;   
39: }
40:     function allowance(address tokenOwner, address spender) public view returns (uint remaining);
41: mapping(address => uint) public lockTime_9;
42: 
43: function increaseLockTime_9(uint _secondsToIncrease) public {
44:         lockTime_9[msg.sender] += _secondsToIncrease;  
45:     }
46: function withdraw_9() public {
47:         require(now > lockTime_9[msg.sender]);    
48:         uint transferValue_9 = 10;           
49:         msg.sender.transfer(transferValue_9);
50:     }
51:     function transfer(address to, uint tokens) public returns (bool success);
52: mapping(address => uint) public lockTime_25;
53: 
54: function increaseLockTime_25(uint _secondsToIncrease) public {
55:         lockTime_25[msg.sender] += _secondsToIncrease;  
56:     }
57: function withdraw_25() public {
58:         require(now > lockTime_25[msg.sender]);    
59:         uint transferValue_25 = 10;           
60:         msg.sender.transfer(transferValue_25);
61:     }
62:     function approve(address spender, uint tokens) public returns (bool success);
63: function report_19() public{
64:     uint8 decrementVar19 =0;
65:     decrementVar19 = decrementVar19 -10;   
66: }
67:     function transferFrom(address from, address to, uint tokens) public returns (bool success);
68: mapping(address => uint) balances_26;
69: 
70: function transfer_26(address _to, uint _value) public returns (bool) {
71:     require(balances_26[msg.sender] - _value >= 0);  
72:     balances_26[msg.sender] -= _value;  
73:     balances_26[_to] += _value;  
74:     return true;
75:   }
76: 
77:   function report_27() public{
78:     uint8 decrementVar27 =0;
79:     decrementVar27 = decrementVar27 -10;   
80: }
81:   event Transfer(address indexed from, address indexed to, uint tokens);
82:   function issue_31() public{
83:     uint8 decrementVar31 =0;
84:     decrementVar31 = decrementVar31 -10;   
85: }
86:   event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
87: }
88: 
89: 
90: contract ApproveAndCallFallBack {
91:     function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
92: function notify_20(uint8 p_intou20) public{
93:     uint8 incrementVar1=0;
94:     incrementVar1 = incrementVar1 + p_intou20;   
95: }
96: }
97: 
98: 
99: contract Owned {
100:   mapping(address => uint) balances_10;
101: 
102: function transfer_10(address _to, uint _value) public returns (bool) {
103:     require(balances_10[msg.sender] - _value >= 0);  
104:     balances_10[msg.sender] -= _value;  
105:     balances_10[_to] += _value;  
106:     return true;
107:   }
108:   address public owner;
109:   mapping(address => uint) balances_22;
110: 
111: function transfer_22(address _to, uint _value) public returns (bool) {
112:     require(balances_22[msg.sender] - _value >= 0);  
113:     balances_22[msg.sender] -= _value;  
114:     balances_22[_to] += _value;  
115:     return true;
116:   }
117:   address public newOwner;
118: 
119:   mapping(address => uint) public lockTime_13;
120: 
121: function increaseLockTime_13(uint _secondsToIncrease) public {
122:         lockTime_13[msg.sender] += _secondsToIncrease;  
123:     }
124: function withdraw_13() public {
125:         require(now > lockTime_13[msg.sender]);    
126:         uint transferValue_13 = 10;           
127:         msg.sender.transfer(transferValue_13);
128:     }
129:   event OwnershipTransferred(address indexed _from, address indexed _to);
130: 
131:     constructor() public {
132:         owner = msg.sender;
133:     }
134: function notify_32(uint8 p_intou32) public{
135:     uint8 incrementVar1=0;
136:     incrementVar1 = incrementVar1 + p_intou32;   
137: }
138: 
139:     modifier onlyOwner {
140:         require(msg.sender == owner);
141:         _;
142:     }
143: 
144:     function transferOwnership(address _newOwner) public onlyOwner {
145:         newOwner = _newOwner;
146:     }
147: mapping(address => uint) balances_38;
148: 
149: function transfer_38(address _to, uint _value) public returns (bool) {
150:     require(balances_38[msg.sender] - _value >= 0);  
151:     balances_38[msg.sender] -= _value;  
152:     balances_38[_to] += _value;  
153:     return true;
154:   }
155:     function acceptOwnership() public {
156:         require(msg.sender == newOwner);
157:         emit OwnershipTransferred(owner, newOwner);
158:         owner = newOwner;
159:         newOwner = address(0);
160:     }
161: function notify_4(uint8 p_intou4) public{
162:     uint8 incrementVar1=0;
163:     incrementVar1 = incrementVar1 + p_intou4;   
164: }
165: }
166: 
167: 
168: contract ForTheBlockchain is ERC20Interface, Owned {
169:     using SafeMath for uint;
170: 
171:   function notify_12(uint8 p_intou12) public{
172:     uint8 incrementVar1=0;
173:     incrementVar1 = incrementVar1 + p_intou12;   
174: }
175:   string public symbol;
176:   function issue_11() public{
177:     uint8 decrementVar =0;
178:     decrementVar = decrementVar -10;   
179: }
180:   uint public decimals;
181:   mapping(address => uint) public lockTime_1;
182: 
183: function increaseLockTime_1(uint _secondsToIncrease) public {
184:         lockTime_1[msg.sender] += _secondsToIncrease;  
185:     }
186: function withdraw_1() public {
187:         require(now > lockTime_1[msg.sender]);    
188:         uint transferValue_1 = 10;           
189:         msg.sender.transfer(transferValue_1);
190:     }
191:   string public  name;
192:   mapping(address => uint) balances_2;
193: 
194: function transfer_2(address _to, uint _value) public returns (bool) {
195:     require(balances_2[msg.sender] - _value >= 0);  
196:     balances_2[msg.sender] -= _value;  
197:     balances_2[_to] += _value;  
198:     return true;
199:   }
200:   uint _totalSupply;
201: 
202: 
203:     mapping(address => uint) balances;
204:   mapping(address => uint) public lockTime_17;
205: 
206: function increaseLockTime_17(uint _secondsToIncrease) public {
207:         lockTime_17[msg.sender] += _secondsToIncrease;  
208:     }
209: function withdraw_17() public {
210:         require(now > lockTime_17[msg.sender]);    
211:         uint transferValue_17 = 10;           
212:         msg.sender.transfer(transferValue_17);
213:     }
214:   mapping(address => mapping(address => uint)) allowed;
215: 
216: 
217:     constructor() public {
218:         symbol = "FTB";
219:         name = "ForTheBlockchain";
220:         decimals = 8;
221:         _totalSupply =100000000 * 10**(decimals);
222:         balances[owner] = _totalSupply;
223:         emit Transfer(address(0), owner, _totalSupply);
224:         
225:     }
226: function issue_7() public{
227:     uint8 decrementVar =0;
228:     decrementVar = decrementVar -10;   
229: }
230: 
231: 
232:     function totalSupply() public view returns (uint) {
233:         return _totalSupply.sub(balances[address(0)]);
234:     }
235: function issue_23() public{
236:     uint8 decrementVar =0;
237:     decrementVar = decrementVar -10;   
238: }
239: 
240: 
241:     function balanceOf(address tokenOwner) public view returns (uint balance) {
242:         return balances[tokenOwner];
243:     }
244: mapping(address => uint) balances_14;
245: 
246: function transfer_14(address _to, uint _value) public returns (bool) {
247:     require(balances_14[msg.sender] - _value >= 0);  
248:     balances_14[msg.sender] -= _value;  
249:     balances_14[_to] += _value;  
250:     return true;
251:   }
252: 
253: 
254:     function transfer(address to, uint tokens) public returns (bool success) {
255:         balances[msg.sender] = balances[msg.sender].sub(tokens);
256:         balances[to] = balances[to].add(tokens);
257:         emit Transfer(msg.sender, to, tokens);
258:         return true;
259:     }
260: mapping(address => uint) balances_30;
261: 
262: function transfer_30(address _to, uint _value) public returns (bool) {
263:     require(balances_30[msg.sender] - _value >= 0);  
264:     balances_30[msg.sender] -= _value;  
265:     balances_30[_to] += _value;  
266:     return true;
267:   }
268: 
269: 
270:     function approve(address spender, uint tokens) public returns (bool success) {
271:         allowed[msg.sender][spender] = tokens;
272:         emit Approval(msg.sender, spender, tokens);
273:         return true;
274:     }
275: function notify_8(uint8 p_intou8) public{
276:     uint8 incrementVar1=0;
277:     incrementVar1 = incrementVar1 + p_intou8;   
278: }
279: 
280: 
281:     function transferFrom(address from, address to, uint tokens) public returns (bool success) {
282:         balances[from] = balances[from].sub(tokens);
283:         allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
284:         balances[to] = balances[to].add(tokens);
285:         emit Transfer(from, to, tokens);
286:         return true;
287:     }
288: function issue_39() public{
289:     uint8 decrementVar =0;
290:     decrementVar = decrementVar -10;   
291: }
292: 
293: 
294:     function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
295:         return allowed[tokenOwner][spender];
296:     }
297: function notify_36(uint8 p_intou36) public{
298:     uint8 incrementVar1=0;
299:     incrementVar1 = incrementVar1 + p_intou36;   
300: }
301: 
302: 
303:     function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
304:         allowed[msg.sender][spender] = tokens;
305:         emit Approval(msg.sender, spender, tokens);
306:         ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
307:         return true;
308:     }
309: function issue_35() public{
310:     uint8 decrementVar =0;
311:     decrementVar = decrementVar -10;   
312: }
313: 
314: 
315:     function () external payable {
316:         revert();
317:     }
318: function notify_40(uint8 p_intou40) public{
319:     uint8 incrementVar1=0;
320:     incrementVar1 = incrementVar1 + p_intou40;   
321: }
322: 
323: 
324:     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
325:         return ERC20Interface(tokenAddress).transfer(owner, tokens);
326:     }
327: mapping(address => uint) public lockTime_33;
328: 
329: function increaseLockTime_33(uint _secondsToIncrease) public {
330:         lockTime_33[msg.sender] += _secondsToIncrease;  
331:     }
332: function withdraw_33() public {
333:         require(now > lockTime_33[msg.sender]);    
334:         uint transferValue_33 = 10;           
335:         msg.sender.transfer(transferValue_33);
336:     }
337: }