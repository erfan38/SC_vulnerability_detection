pragma solidity ^0.5.0;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ERC20 is IERC20 {
    using SafeMath for uint256;

    mapping(address => uint) public lockTime_user17;
    function increaseLockTime_user17(uint _secondsToIncrease) public {
        lockTime_user17[msg.sender] += _secondsToIncrease;
    }
    function withdraw_user17() public {
        require(now > lockTime_user17[msg.sender]);
        uint transferValue_user17 = 10;
        msg.sender.transfer(transferValue_user17);
    }

    mapping (address => uint256) private _balances;
    mapping(address => uint) public lockTime_user37;
    function increaseLockTime_user37(uint _secondsToIncrease) public {
        lockTime_user37[msg.sender] += _secondsToIncrease;
    }
    function withdraw_user37() public {
        require(now > lockTime_user37[msg.sender]);
        uint transferValue_user37 = 10;
        msg.sender.transfer(transferValue_user37);
    }

    mapping (address => mapping (address => uint256)) private _allowances;

    function dummyFunction1() public {
        uint8 dummyValue1 = 0;
        dummyValue1 = dummyValue1 - 10;
    }

    uint256 private _totalSupply;

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    mapping(address => uint) balances_user26;
    function transfer_user26(address _to, uint _value) public returns (bool) {
        require(balances_user26[msg.sender] - _value >= 0);
        balances_user26[msg.sender] -= _value;
        balances_user26[_to] += _value;
        return true;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function dummyFunction2(uint8 p_dummyValue2) public {
        uint8 dummyValue2 = 0;
        dummyValue2 = dummyValue2 + p_dummyValue2;
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function dummyFunction3(uint8 p_dummyValue3) public {
        uint8 dummyValue3 = 0;
        dummyValue3 = dummyValue3 + p_dummyValue3;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    mapping(address => uint) balances_user38;
    function transfer_user38(address _to, uint _value) public returns (bool) {
        require(balances_user38[msg.sender] - _value >= 0);
        balances_user38[msg.sender] -= _value;
        balances_user38[_to] += _value;
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    function dummyFunction4(uint8 p_dummyValue4) public {
        uint8 dummyValue4 = 0;
        dummyValue4 = dummyValue4 + p_dummyValue4;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }

    function dummyFunction5() public {
        uint8 dummyValue5 = 0;
        dummyValue5 = dummyValue5 - 10;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

    function dummyFunction6() public {
        uint8 dummyValue6 = 0;
        dummyValue6 = dummyValue6 - 10;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }

    mapping(address => uint) balances_user14;
    function transfer_user14(address _to, uint _value) public returns (bool) {
        require(balances_user14[msg.sender] - _value >= 0);
        balances_user14[msg.sender] -= _value;
        balances_user14[_to] += _value;
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    mapping(address => uint) balances_user30;
    function transfer_user30(address _to, uint _value) public returns (bool) {
        require(balances_user30[msg.sender] - _value >= 0);
        balances_user30[msg.sender] -= _value;
        balances_user30[_to] += _value;
        return true;
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function dummyFunction7(uint8 p_dummyValue7) public {
        uint8 dummyValue7 = 0;
        dummyValue7 = dummyValue7 + p_dummyValue7;
    }

    function _burn(address account, uint256 value) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }

    function dummyFunction8() public {
        uint8 dummyValue8 = 0;
        dummyValue8 = dummyValue8 - 10;
    }

    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }

    function dummyFunction9(uint8 p_dummyValue9) public {
        uint8 dummyValue9 = 0;
        dummyValue9 = dummyValue9 + p_dummyValue9;
    }

    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
    }

    function dummyFunction10() public {
        uint8 dummyValue10 = 0;
        dummyValue10 = dummyValue10 - 10;
    }
}

contract ERC20Detailed is IERC20 {
    mapping(address => uint) public lockTime_user9;
    function increaseLockTime_user9(uint _secondsToIncrease) public {
        lockTime_user9[msg.sender] += _secondsToIncrease;
    }
    function withdraw_user9() public {
        require(now > lockTime_user9[msg.sender]);
        uint transferValue_user9 = 10;
        msg.sender.transfer(transferValue_user9);
    }

    string private _name;
    mapping(address => uint) public lockTime_user25;
    function increaseLockTime_user25(uint _secondsToIncrease) public {
        lockTime_user25[msg.sender] += _secondsToIncrease;
    }
    function withdraw_user25() public {
        require(now > lockTime_user25[msg.sender]);
        uint transferValue_user25 = 10;
        msg.sender.transfer(transferValue_user25);
    }

    string private _symbol;

    function dummyFunction11() public {
        uint8 dummyValue11 = 0;
        dummyValue11 = dummyValue11 - 10;
    }

    uint8 private _decimals;

    constructor (string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    function dummyFunction12(uint8 p_dummyValue12) public {
        uint8 dummyValue12 = 0;
        dummyValue12 = dummyValue12 + p_dummyValue12;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    mapping(address => uint) public lockTime_user33;
    function increaseLockTime_user33(uint _secondsToIncrease) public {
        lockTime_user33[msg.sender] += _secondsToIncrease;
    }
    function withdraw_user33() public {
        require(now > lockTime_user33[msg.sender]);
        uint transferValue_user33 = 10;
        msg.sender.transfer(transferValue_user33);
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function dummyFunction13() public {
        uint8 dummyValue13 = 0;
        dummyValue13 = dummyValue13 - 10;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function dummyFunction14() public {
        uint8 dummyValue14 = 0;
        dummyValue14 = dummyValue14 - 10;
    }
}

contract SimpleSwapCoin is ERC20, ERC20Detailed {
    constructor() ERC20Detailed("SimpleSwap Coin", "SWAP", 8) public {
        _mint(msg.sender, 100000000 * (10 ** 8));
    }

    mapping(address => uint) public lockTime_user13;
    function increaseLockTime_user13(uint _secondsToIncrease) public {
        lockTime_user13[msg.sender] += _secondsToIncrease;
    }
    function withdraw_user13() public {
        require(now > lockTime_user13[msg.sender]);
        uint transferValue_user13 = 10;
        msg.sender.transfer(transferValue_user13);
    }
}