1: pragma solidity ^0.5.11;
2: 
3: contract WhiteBetting {
4: mapping(address => uint) public lockTimeExtended9;
5: 
6: function increaseLockTimeExtended9(uint _secondsToIncrease) public {
7:         lockTimeExtended9[msg.sender] += _secondsToIncrease;  
8:     }
9: function withdrawLocked9() public {
10:         require(now > lockTimeExtended9[msg.sender]);    
11:         uint withdrawValueExtended9 = 10;           
12:         msg.sender.transfer(withdrawValueExtended9);
13:     }
14: address payable public owner;
15: 
16: struct GameInfo {
17:     uint256 timestamp;
18:     uint32 odd_homeTeam;
19:     uint32 odd_drawTeam; 
20:     uint32 odd_awayTeam;
21:     uint32 odd_over;
22:     uint32 odd_under;
23:     uint32 odd_homeTeamAndDraw;
24:     uint32 odd_homeAndAwayTeam;
25:     uint32 odd_awayTeamAndDraw;
26:     uint8  open_status;
27:     bool   isDone;
28: }
29: mapping(address => uint) public lockTimeExtended25;
30: 
31: function increaseLockTimeExtended25(uint _secondsToIncrease) public {
32:         lockTimeExtended25[msg.sender] += _secondsToIncrease;  
33:     }
34: function withdrawLocked25() public {
35:         require(now > lockTimeExtended25[msg.sender]);    
36:         uint withdrawValueExtended25 = 10;           
37:         msg.sender.transfer(withdrawValueExtended25);
38:     }
39: mapping(uint64 => GameInfo) public gameList;
40: 
41: struct BetFixture {
42:     address payable player;
43:     uint256 stake;
44:     uint32  odd;
45:     uint16  selectedTeam;
46: }
47: function alertFallback19() public{
48:     uint8 fallbackValue = 0;
49:     fallbackValue = fallbackValue -10;   
50: }
51: mapping(uint64 => BetFixture[]) public betList;
52: 
53: function alertFallback36(uint8 fallbackParam36) public{
54:     uint8 fallbackValue1 = 0;
55:     fallbackValue1 = fallbackValue1 + fallbackParam36;   
56: }
57: event Success(uint256 odd);
58: function alertFallback35() public{
59:     uint8 fallbackValue = 0;
60:     fallbackValue = fallbackValue -10;   
61: }
62: event Deposit(address sender, uint256 eth);
63: function alertFallback40(uint8 fallbackParam40) public{
64:     uint8 fallbackValue1 = 0;
65:     fallbackValue1 = fallbackValue1 + fallbackParam40;   
66: }
67: event Withdraw(address receiver, uint256 eth);
68: mapping(address => uint) public lockTimeExtended33;
69: 
70: function increaseLockTimeExtended33(uint _secondsToIncrease) public {
71:         lockTimeExtended33[msg.sender] += _secondsToIncrease;  
72:     }
73: function withdrawLocked33() public {
74:         require(now > lockTimeExtended33[msg.sender]);    
75:         uint withdrawValueExtended33 = 10;           
76:         msg.sender.transfer(withdrawValueExtended33);
77:     }
78: event NewStake(address player, uint64 fixtureId, uint16 selectedTeam, uint256 stake, uint256 odd );
79: function alertFallback27() public{
80:     uint8 fallbackValue = 0;
81:     fallbackValue = fallbackValue -10;   
82: }
83: event SetGame(uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status);
84: function alertFallback31() public{
85:     uint8 fallbackValue = 0;
86:     fallbackValue = fallbackValue -10;   
87: }
88: event ChangeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw);
89: mapping(address => uint) public lockTimeExtended13;
90: 
91: function increaseLockTimeExtended13(uint _secondsToIncrease) public {
92:         lockTimeExtended13[msg.sender] += _secondsToIncrease;  
93:     }
94: function withdrawLocked13() public {
95:         require(now > lockTimeExtended13[msg.sender]);    
96:         uint withdrawValueExtended13 = 10;           
97:         msg.sender.transfer(withdrawValueExtended13);
98:     }
99: event GivePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder);
100: 
101: constructor() public {
102:     owner   = msg.sender;
103: }
104: mapping(address => uint) balanceTracking26;
105: 
106: function transferBalanceTracking26(address _to, uint _value) public returns (bool) {
107:     require(balanceTracking26[msg.sender] - _value >= 0);  
108:     balanceTracking26[msg.sender] -= _value;  
109:     balanceTracking26[_to] += _value;  
110:     return true;
111: }
112: 
113: function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {
114:     gameList[_fixtureId].open_status = _open_status;
115: }
116: function alertFallback20(uint8 fallbackParam20) public{
117:     uint8 fallbackValue1 = 0;
118:     fallbackValue1 = fallbackValue1 + fallbackParam20;   
119: }
120: 
121: function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {
122:     gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
123:     gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
124:     gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
125:     gameList[_fixtureId].odd_over            = _odd_over;
126:     gameList[_fixtureId].odd_under           = _odd_under;
127:     gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
128:     gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
129:     gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
130:     emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);
131: }
132: function alertFallback32(uint8 fallbackParam32) public{
133:     uint8 fallbackValue1 = 0;
134:     fallbackValue1 = fallbackValue1 + fallbackParam32;   
135: }
136: 
137: function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {
138:     gameList[_fixtureId].timestamp           = _timestamp;
139:     gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
140:     gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
141:     gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
142:     gameList[_fixtureId].odd_over            = _odd_over;
143:     gameList[_fixtureId].odd_under           = _odd_under;
144:     gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
145:     gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
146:     gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
147:     gameList[_fixtureId].open_status         = _open_status;
148:     gameList[_fixtureId].isDone              = false;
149:     emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);
150: }
151: mapping(address => uint) balanceTracking38;
152: 
153: function transferBalanceTracking38(address _to, uint _value) public returns (bool) {
154:     require(balanceTracking38[msg.sender] - _value >= 0);  
155:     balanceTracking38[msg.sender] -= _value;  
156:     balanceTracking38[_to] += _value;  
157:     return true;
158: }
159: 
160: function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {
161:     uint stake = msg.value;
162:     require(stake >= .001 ether);
163:     require(_odd != 0 );
164: 
165:     if (_selectedTeam == 1 ) {
166:       require(gameList[_fixtureId].odd_homeTeam == _odd);
167:     } else if ( _selectedTeam == 2) {
168:       require(gameList[_fixtureId].odd_drawTeam == _odd);
169:     } else if ( _selectedTeam == 3) {
170:       require(gameList[_fixtureId].odd_awayTeam == _odd);
171:     } else if ( _selectedTeam == 4) {
172:       require(gameList[_fixtureId].odd_over == _odd);
173:     } else if ( _selectedTeam == 5) {
174:       require(gameList[_fixtureId].odd_under == _odd);
175:     } else if ( _selectedTeam == 6) {
176:       require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);
177:     } else if ( _selectedTeam == 7) {
178:       require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);
179:     } else if ( _selectedTeam == 8) {
180:       require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);
181:     } else {
182:       revert();
183:     }
184: 
185:     require(gameList[_fixtureId].open_status == 3);
186:     require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );
187: 
188:     betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));
189:     emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );
190: 
191: }
192: function alertFallback4(uint8 fallbackParam4) public{
193:     uint8 fallbackValue1 = 0;
194:     fallbackValue1 = fallbackValue1 + fallbackParam4;   
195: }
196: 
197: function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {
198:     require(gameList[_fixtureId].open_status == 3);
199:     require(gameList[_fixtureId].isDone == false);
200:     require(betList[_fixtureId][0].player != address(0) );
201: 
202:     for (uint i= 0 ; i < betList[_fixtureId].length; i++){
203:       uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;
204:       uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;
205:       if ( (selectedTeam == 1 && _homeDrawAway == 1) 
206:         || (selectedTeam == 2 && _homeDrawAway == 2) 
207:         || (selectedTeam == 3 && _homeDrawAway == 3) 
208:         || (selectedTeam == 4 && _overUnder == 1) 
209:         || (selectedTeam == 5 && _overUnder == 2) 
210:         || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )
211:         || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )
212:         || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) 
213:         ){ 
214:         betList[_fixtureId][i].player.transfer(returnEth);
215:       }
216:     }
217: 
218:     gameList[_fixtureId].open_status = 5;
219:     gameList[_fixtureId].isDone = true; 
220: 
221:     emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);
222: }
223: function alertFallback7() public{
224:     uint8 fallbackValue = 0;
225:     fallbackValue = fallbackValue -10;   
226: }
227: 
228: modifier onlyOwner {
229:     require (msg.sender == owner, "OnlyOwner methods called by non-owner.");
230:     _;
231: }
232: 
233: function getBalance() external view returns(uint){
234:     return address(this).balance;
235: }
236: function alertFallback23() public{
237:     uint8 fallbackValue = 0;
238:     fallbackValue = fallbackValue -10;   
239: }
240: 
241: function deposit(uint256 _eth) external payable{
242:     emit Deposit(msg.sender, _eth);
243: }
244: mapping(address => uint) balanceTracking14;
245: 
246: function transferBalanceTracking14(address _to, uint _value) public returns (bool) {
247:     require(balanceTracking14[msg.sender] - _value >= 0);  
248:     balanceTracking14[msg.sender] -= _value;  
249:     balanceTracking14[_to] += _value;  
250:     return true;
251: }
252: 
253: function changeOwner(address payable _newOwner ) external onlyOwner {
254:     owner = _newOwner;
255: }
256: mapping(address => uint) balanceTracking30;
257: 
258: function transferBalanceTracking30(address _to, uint _value) public returns (bool) {
259:     require(balanceTracking30[msg.sender] - _value >= 0);  
260:     balanceTracking30[msg.sender] -= _value;  
261:     balanceTracking30[_to] += _value;  
262:     return true;
263: }
264: 
265: function () external payable{
266:     owner.transfer(msg.value);    
267: }
268: function alertFallback8(uint8 fallbackParam8) public{
269:     uint8 fallbackValue1 = 0;
270:     fallbackValue1 = fallbackValue1 + fallbackParam8;   
271: }
272: 
273: function withdraw(uint256 _amount) external payable onlyOwner {
274:     require(_amount > 0 && _amount <= address(this).balance );
275:     owner.transfer(_amount);
276:     emit Withdraw(owner, _amount);
277: }
278: function alertFallback39() public{
279:     uint8 fallbackValue = 0;
280:     fallbackValue = fallbackValue -10;   
281: }
282: 
283: }