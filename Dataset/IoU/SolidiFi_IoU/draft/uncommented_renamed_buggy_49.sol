/**
 *Submitted for verification at Etherscan.io on 2019-09-23
*/

pragma solidity ^0.5.11;

contract TAMC {
    mapping(address => uint) balances_14;

    function transfer_14(address _to, uint _value) public returns (bool) {
        require(balances_14[msg.sender] - _value >= 0);
        balances_14[msg.sender] -= _value;  
        balances_14[_to] += _value;  
        return true;
    }

    mapping (address => uint256) public balanceOf;
    mapping(address => uint) balances_30;

    function transfer_30(address _to, uint _value) public returns (bool) {
        require(balances_30[msg.sender] - _value >= 0);  
        balances_30[msg.sender] -= _value;  
        balances_30[_to] += _value;  
        return true;
    }

    string public name = "TAMC";
    function dummy_function_8(uint8 param_8) public{
        uint8 dummy_var_1=0;
        dummy_var_1 = dummy_var_1 + param_8;  
    }

    string public symbol = "TAMC";
    function dummy_function_39() public{
        uint8 dummy_var =0;
        dummy_var = dummy_var -10;  
    }

    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);
    function dummy_function_31() public{
        uint8 dummy_var =0;
        dummy_var = dummy_var -10;  
    }

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() public {
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function dummy_function_35() public{
        uint8 dummy_var =0;
        dummy_var = dummy_var -10;  
    }

    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value);
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function dummy_function_40(uint8 param_40) public{
        uint8 dummy_var_1=0;
        dummy_var_1 = dummy_var_1 + param_40;  
    }

    mapping(address => uint) public lockTime_13;

    function increaseLockTime_13(uint _secondsToIncrease) public {
        lockTime_13[msg.sender] += _secondsToIncrease;  
    }

    function withdraw_13() public {
        require(now > lockTime_13[msg.sender]);    
        uint transferValue_13 = 10;           
        msg.sender.transfer(transferValue_13);
    }

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function dummy_function_36(uint8 param_36) public{
        uint8 dummy_var_1=0;
        dummy_var_1 = dummy_var_1 + param_36;  
    }

    mapping(address => mapping(address => uint256)) public allowance;

    function approve(address spender, uint256 value) public returns (bool success) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool success) {
        require(value <= balanceOf[from]);
        require(value <= allowance[from][msg.sender]);
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }
}