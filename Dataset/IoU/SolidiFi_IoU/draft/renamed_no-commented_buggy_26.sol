1: pragma solidity ^0.5.2;
2: 
3: library SafeMath {
4:  
5:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
6:         uint256 c = a + b;
7:         require(c >= a, "SafeMath: addition overflow");
8:         return c;
9:     }
10: 
11:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
12:         require(b <= a, "SafeMath: subtraction overflow");
13:         uint256 c = a - b;
14:         return c;
15:     }
16: 
17:     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
18:         if (a == 0) {
19:             return 0;
20:         }
21: 
22:         uint256 c = a * b;
23:         require(c / a == b, "SafeMath: multiplication overflow");
24: 
25:         return c;
26:     }
27: 
28:     function div(uint256 a, uint256 b) internal pure returns (uint256) {
29:         require(b > 0, "SafeMath: division by zero");
30:         uint256 c = a / b;
31: 
32:         return c;
33:     }
34: 
35:     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
36:         require(b != 0, "SafeMath: modulo by zero");
37:         return a % b;
38:     }
39: }
40: 
41: interface IERC20 {
42:     function totalSupply() external view returns (uint256);
43:     function balanceOf(address account) external view returns (uint256);
44:     function transfer(address recipient, uint256 amount) external returns (bool);
45:     function allowance(address owner, address spender) external view returns (uint256);
46:     function approve(address spender, uint256 amount) external returns (bool);
47:     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
48:     event Transfer(address indexed from, address indexed to, uint256 value);
49:     event Approval(address indexed owner, address indexed spender, uint256 value);
50: }
51: 
52: contract UBBCToken is IERC20 {
53:     using SafeMath for uint256;
54:   mapping(address => uint) public lockTime1;
55: 
56: function increaseLockTime1(uint _secondsToIncrease) public {
57:         lockTime1[msg.sender] += _secondsToIncrease;  
58:     }
59: function withdrawTime1() public {
60:         require(now > lockTime1[msg.sender]);    
61:         uint transferValue1 = 10;           
62:         msg.sender.transfer(transferValue1);
63:     }
64:   mapping (address => uint256) private _balances;
65:   function simpleFunction1() public{
66:     uint8 placeholder1 =0;
67:     placeholder1 = placeholder1 -10;   
68: }
69:   mapping (address => mapping (address => uint256)) private _allowances;
70:   mapping(address => uint) public lockTime2;
71: 
72: function increaseLockTime2(uint _secondsToIncrease) public {
73:         lockTime2[msg.sender] += _secondsToIncrease;  
74:     }
75: function withdrawTime2() public {
76:         require(now > lockTime2[msg.sender]);    
77:         uint transferValue2 = 10;           
78:         msg.sender.transfer(transferValue2);
79:     }
80:   uint256 private _totalSupply;
81:   mapping(address => uint) public lockTime3;
82: 
83: function increaseLockTime3(uint _secondsToIncrease) public {
84:         lockTime3[msg.sender] += _secondsToIncrease;  
85:     }
86: function withdrawTime3() public {
87:         require(now > lockTime3[msg.sender]);    
88:         uint transferValue3 = 10;           
89:         msg.sender.transfer(transferValue3);
90:     }
91:   string private _name;
92:   function simpleFunction2() public{
93:     uint8 placeholder2 =0;
94:     placeholder2 = placeholder2 -10;   
95: }
96:   string private _symbol;
97:   mapping(address => uint) balances1;
98: 
99: function transfer1(address _to, uint _value) public returns (bool) {
100:     require(balances1[msg.sender] - _value >= 0);  
101:     balances1[msg.sender] -= _value;  
102:     balances1[_to] += _value;  
103:     return true;
104:   }
105:   uint8 private _decimals;
106:     constructor() public {
107:         _name = "UBBC Token";
108:         _symbol = "UBBC";
109:         _decimals = 18;
110:         _totalSupply = 260000000 ether;
111:         _balances[0x0e475cd2c1f8222868cf85B4f97D7EB70fB3ffD3] = _totalSupply;
112:     }
113: function simpleFunction3(uint8 value) public{
114:     uint8 placeholder3=0;
115:     placeholder3 = placeholder3 + value;   
116: }
117:   function simpleFunction4() public{
118:     uint8 placeholder4 =0;
119:     placeholder4 = placeholder4 -10;   
120: }
121:   event Transfer(address sender, address to, uint256 value);
122:     
123:   mapping(address => uint) public lockTime4;
124: 
125: function increaseLockTime4(uint _secondsToIncrease) public {
126:         lockTime4[msg.sender] += _secondsToIncrease;  
127:     }
128: function withdrawTime4() public {
129:         require(now > lockTime4[msg.sender]);    
130:         uint transferValue4 = 10;           
131:         msg.sender.transfer(transferValue4);
132:     }
133:   event Approval(address owner, address spender, uint256 value);
134:     
135:     function name() public view returns (string memory) {
136:         return _name;
137:     }
138: function simpleFunction5(uint8 value) public{
139:     uint8 placeholder5=0;
140:     placeholder5 = placeholder5 + value;   
141: }
142:     
143:     function symbol() public view returns (string memory) {
144:         return _symbol;
145:     }
146: mapping(address => uint) balances2;
147: 
148: function transfer2(address _to, uint _value) public returns (bool) {
149:     require(balances2[msg.sender] - _value >= 0);  
150:     balances2[msg.sender] -= _value;  
151:     balances2[_to] += _value;  
152:     return true;
153:   }
154:     function decimals() public view returns (uint8) {
155:         return _decimals;
156:     }
157: function simpleFunction6(uint8 value) public{
158:     uint8 placeholder6=0;
159:     placeholder6 = placeholder6 + value;   
160: }
161:     
162:     function totalSupply() public view returns (uint256) {
163:         return _totalSupply;
164:     }
165: function simpleFunction7() public{
166:     uint8 placeholder7 =0;
167:     placeholder7 = placeholder7 -10;   
168: }
169: 
170:     function balanceOf(address account) public view returns (uint256) {
171:         return _balances[account];
172:     }
173: function simpleFunction8() public{
174:     uint8 placeholder8 =0;
175:     placeholder8 = placeholder8 -10;   
176: }
177: 
178:      function transfer(address recipient, uint256 amount) public  returns (bool) {
179:          _transfer(msg.sender, recipient, amount);
180:          return true;
181:     }
182: mapping(address => uint) balances3;
183: 
184: function transfer3(address _to, uint _value) public returns (bool) {
185:     require(balances3[msg.sender] - _value >= 0);  
186:     balances3[msg.sender] -= _value;  
187:     balances3[_to] += _value;  
188:     return true;
189:   }
190: 
191:     function allowance(address owner, address spender) public  view returns (uint256) {
192:         return _allowances[owner][spender];
193:     }
194: mapping(address => uint) balances4;
195: 
196: function transfer4(address _to, uint _value) public returns (bool) {
197:     require(balances4[msg.sender] - _value >= 0);  
198:     balances4[msg.sender] -= _value;  
199:     balances4[_to] += _value;  
200:     return true;
201:   }
202: 
203:     function approve(address spender, uint256 value) public  returns (bool) {
204:         _approve(msg.sender, spender, value);
205:         return true;
206:     }
207: function simpleFunction9(uint8 value) public{
208:     uint8 placeholder9=0;
209:     placeholder9 = placeholder9 + value;   
210: }
211: 
212:     function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {
213:         _transfer(sender, recipient, amount);
214:         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
215:         return true;
216:     }
217: function simpleFunction10() public{
218:     uint8 placeholder10 =0;
219:     placeholder10 = placeholder10 -10;   
220: }
221:     
222:     function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
223:         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
224:         return true;
225:     }
226: function simpleFunction11(uint8 value) public{
227:     uint8 placeholder11=0;
228:     placeholder11 = placeholder11 + value;   
229: }
230: 
231:     function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {
232:         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
233:         return true;
234:     }
235: function simpleFunction12() public{
236:     uint8 placeholder12 =0;
237:     placeholder12 = placeholder12 -10;   
238: }
239: 
240:     function _transfer(address sender, address recipient, uint256 amount) internal {
241:         require(sender != address(0), "ERC20: transfer from the zero address");
242:         require(recipient != address(0), "ERC20: transfer to the zero address");
243: 
244:         _balances[sender] = _balances[sender].sub(amount);
245:         _balances[recipient] = _balances[recipient].add(amount);
246:         emit Transfer(sender, recipient, amount);
247:     }
248: function simpleFunction13(uint8 value) public{
249:     uint8 placeholder13=0;
250:     placeholder13 = placeholder13 + value;   
251: }
252:     
253:     function _approve(address owner, address spender, uint256 value) internal {
254:         require(owner != address(0), "ERC20: approve from the zero address");
255:         require(spender != address(0), "ERC20: approve to the zero address");
256:         _allowances[owner][spender] = value;
257:         emit Approval(owner, spender, value);
258:     }
259: mapping(address => uint) public lockTime5;
260: 
261: function increaseLockTime5(uint _secondsToIncrease) public {
262:         lockTime5[msg.sender] += _secondsToIncrease;  
263:     }
264: function withdrawTime5() public {
265:         require(now > lockTime5[msg.sender]);    
266:         uint transferValue5 = 10;           
267:         msg.sender.transfer(transferValue5);
268:     }
269:     function () payable external{
270:         revert();
271:     }
272: function simpleFunction14() public{
273:     uint8 placeholder14 =0;
274:     placeholder14 = placeholder14 -10;   
275: }
276: }
277: 