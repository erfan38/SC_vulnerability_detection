[
    {
        "vulnerableLines": "5-9",
        "vulnerabilityReason": "The function uses call to send ether to the user and does not update the balance until after the ether has been sent, allowing for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether, draining the contract's funds before the balance is set to zero.",
        "fixedCode": "function withdrawBalances() public { uint256 balance = balances[msg.sender]; (bool success, ) = msg.sender.call.value(balance)(''); if (success) balances[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "13-19",
        "vulnerabilityReason": "The function uses call to send ether to the user before clearing the user's balance, risking reentrancy.",
        "potentialSecurityRisk": "An attacker can call this function multiple times, receiving more ether than they are entitled to, thus draining the funds.",
        "fixedCode": "function withdrawBalance() public { require(userBalance[msg.sender] > 0); uint256 amount = userBalance[msg.sender]; (bool success, ) = msg.sender.call.value(amount)(''); if (success) userBalance[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "29-33",
        "vulnerabilityReason": "The function uses call to send the jackpot amount before updating the lastPlayer variable, allowing for reentrancy.",
        "potentialSecurityRisk": "A malicious player may exploit this by causing multiple calls to this function, draining funds from the jackpot before the last player is updated.",
        "fixedCode": "function buyTicket() public { uint256 currentJackpot = jackpot; (bool success, ) = lastPlayer.call.value(currentJackpot)(''); if (!success) revert(); lastPlayer = msg.sender; jackpot = address(this).balance; }"
    },
    {
        "vulnerableLines": "48-52",
        "vulnerabilityReason": "Using transfer to send funds before the redeemable amounts are set to zero allows reentrancy risks.",
        "potentialSecurityRisk": "Attackers can drain funds by calling this function multiple times before their redeemable balance is reset.",
        "fixedCode": "function claimReward() public { require(redeemableEther[msg.sender] > 0); uint256 transferValue = redeemableEther[msg.sender]; redeemableEther[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "59-62",
        "vulnerabilityReason": "Using send to transfer funds without deducting the balance first allows multiple withdrawals in a single reentrant call.",
        "potentialSecurityRisk": "An attacker could exploit this to receive multiple payouts, exceeding their actual balance.",
        "fixedCode": "function withdrawBalanceToken() public { require(userBalanceToken[msg.sender] > 0); uint256 amount = userBalanceToken[msg.sender]; userBalanceToken[msg.sender] = 0; require(msg.sender.send(amount)); }"
    },
    {
        "vulnerableLines": "75-78",
        "vulnerabilityReason": "Using call to send funds before resetting the user's balance exposes the contract to reentrancy.",
        "potentialSecurityRisk": "This allows malicious actors to exploit the function for multiple withdrawals in quick succession.",
        "fixedCode": "function withdrawBalancesToken() public { uint256 amount = balancesToken[msg.sender]; (bool success, ) = msg.sender.call.value(amount)(''); if (success) balancesToken[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "82-86",
        "vulnerabilityReason": "The function allows ether to be sent to the user before updating the isCalled variable, risking reentrancy.",
        "potentialSecurityRisk": "This can allow an attacker to drain ether from the contract by repeatedly calling the function.",
        "fixedCode": "function initializeNotCalled41() public { require(notCalled41); notCalled41 = false; require(msg.sender.send(1 ether)); }"
    },
    {
        "vulnerableLines": "91-96",
        "vulnerabilityReason": "The function uses send to transfer funds without updating the counter before the potential reentrant call.",
        "potentialSecurityRisk": "An attacker can exploit this to repeat calls, allowing for excess fund withdrawals beyond limits.",
        "fixedCode": "function callMe42() public { require(counter42 <= 5); counter42 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "102-105",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayerToken, allowing for reentrancy.",
        "potentialSecurityRisk": "A malicious contract could withdraw more funds than allotted by being able to call back into buyTicketToken repeatedly.",
        "fixedCode": "function buyTicketToken() public { require(lastPlayerToken.send(jackpotToken)); lastPlayerToken = msg.sender; jackpotToken = address(this).balance; }"
    },
    {
        "vulnerableLines": "111-115",
        "vulnerabilityReason": "The function uses call to transfer funds before resetting the user balance, creating potential for reentrancy.",
        "potentialSecurityRisk": "An attacker may exploit this to make multiple claims for rewards due to the lack of balance checks before transfer.",
        "fixedCode": "function withdrawBalanceToken33() public { require(userBalanceToken33[msg.sender] > 0); uint256 amount = userBalanceToken33[msg.sender]; userBalanceToken33[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(''); if (!success) revert(); }"
    },
    {
        "vulnerableLines": "120-126",
        "vulnerabilityReason": "The function uses send to transfer ether before setting the notCalled27 flag to false, which can allow reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this by calling the function again before the state is updated, causing unintended ether transfers to occur repeatedly.",
        "fixedCode": "function initializeNotCalled27() public { require(notCalled27); notCalled27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "129-134",
        "vulnerabilityReason": "The function uses send to transfer ether before reducing the user's balance, which exposes it to reentrancy.",
        "potentialSecurityRisk": "An attacker could withdraw more ether than they actually have by exploiting the reentrant capability.",
        "fixedCode": "function withdrawFundsToken31 (uint256 _weiToWithdraw) public { require(balancesToken31[msg.sender] >= _weiToWithdraw); balancesToken31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "147-153",
        "vulnerabilityReason": "The function uses send to transfer ether before resetting the user's balance, which exposes it to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function during the transfer, capitalizing on the delay in updating the user balance.",
        "fixedCode": "function withdrawBalanceToken19() public { uint balance = userBalanceToken19[msg.sender]; require(msg.sender.send(balance)); userBalanceToken19[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "165-171",
        "vulnerabilityReason": "Using call.value to send funds before updating the user balance is prone to reentrancy attacks.",
        "potentialSecurityRisk": "This allows malicious actors to withdraw more than their balance allows, taking advantage of the period before the user balance is set to zero.",
        "fixedCode": "function withdrawBalanceToken26() public { uint balance = userBalanceToken26[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) userBalanceToken26[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "180-184",
        "vulnerabilityReason": "Similar to initializeNotCalled27, the state variable notCalled20 is not updated before the ether is sent, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this state of the contract by calling the function multiple times before the state variable is changed.",
        "fixedCode": "function initializeNotCalled20() public { require(notCalled20); notCalled20 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "208-212",
        "vulnerabilityReason": "Again using send before deducting the user's balance creates a reentrancy risk.",
        "potentialSecurityRisk": "Attackers could exploit this vulnerability by allowing multiple withdrawals before the checks are enforced.",
        "fixedCode": "function withdrawFundsToken38 (uint256 _weiToWithdraw) public { require(balancesToken38[msg.sender] >= _weiToWithdraw); balancesToken38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "194-199",
        "vulnerabilityReason": "This function transfers funds before resetting the user's redeemable balance, creating a reentrancy point.",
        "potentialSecurityRisk": "It could allow an attacker to claim multiple rewards before the state is updated, leading to a drain of contract funds.",
        "fixedCode": "function claimReward32() public { require(redeemableEther32[msg.sender] > 0); uint transferValue32 = redeemableEther32[msg.sender]; redeemableEther32[msg.sender] = 0; msg.sender.transfer(transferValue32); }"
    },
    {
        "vulnerableLines": "222-227",
        "vulnerabilityReason": "The redemption of funds occurs before the user's redeemable balance is set to zero, allowing for potential reentry.",
        "potentialSecurityRisk": "Players can exploit the timer by calling this function multiple times before their balance is updated.",
        "fixedCode": "function claimReward4() public { require(redeemableEther4[msg.sender] > 0); uint transferValue4 = redeemableEther4[msg.sender]; redeemableEther4[msg.sender] = 0; msg.sender.transfer(transferValue4); }"
    },
    {
        "vulnerableLines": "239-245",
        "vulnerabilityReason": "The function sends ether to msg.sender before updating the counter, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could call this function multiple times, draining more ether than allowed before the counter is updated.",
        "fixedCode": "function callMe7() public { require(counter7 <= 5); counter7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "248-255",
        "vulnerabilityReason": "The function uses call.value to send ether before changing the state variable notCalled13, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to invoke this function multiple times, receiving more ether than intended.",
        "fixedCode": "function initializeNotCalled13() public { require(notCalled13); notCalled13 = false; (bool success,) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "269-276",
        "vulnerabilityReason": "Ether is sent before updating the counter, allowing exploiters to withdraw funds multiple times.",
        "potentialSecurityRisk": "This allows attackers to potentially drain the contract of funds through repeated calls.",
        "fixedCode": "function callMe14() public { require(counter14 <= 5); counter14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "284-290",
        "vulnerabilityReason": "Ether is sent to lastPlayerToken30 before its address is updated, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to withdraw tickets more than once, draining the jackpot funds.",
        "fixedCode": "function buyTicketToken30() public { require(!(lastPlayerToken30.send(jackpotToken30))); lastPlayerToken30 = msg.sender; jackpotToken30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "298-302",
        "vulnerabilityReason": "Funds are sent prior to updating balancesToken8, exposing the contract to reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this feature to drain the contract by making repeated calls before the balance is reset.",
        "fixedCode": "function withdrawBalancesToken8() public { uint256 balance = balancesToken8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { balancesToken8[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "309-313",
        "vulnerabilityReason": "The contract sends ether before requiring that the user's redeemable balance is reset, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker might exploit this to repeatedly claim rewards, draining the contract before the balance is updated.",
        "fixedCode": "function claimReward39() public { require(redeemableEther39[msg.sender] > 0); uint transferValue39 = redeemableEther39[msg.sender]; redeemableEther39[msg.sender] = 0; msg.sender.transfer(transferValue39); }"
    },
    {
        "vulnerableLines": "321-324",
        "vulnerabilityReason": "Sending funds to msg.sender before resetting balancesToken36 allows for reentries that can drain the contract.",
        "potentialSecurityRisk": "Attackers can exploit this by calling the withdraw function multiple times, withdrawing more than what is allowed.",
        "fixedCode": "function withdrawBalancesToken36() public { uint256 balance = balancesToken36[msg.sender]; if (msg.sender.send(balance)) { balancesToken36[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "332-339",
        "vulnerabilityReason": "The function sends ether before updating the counter, facilitating multiple withdrawals from a single attack.",
        "potentialSecurityRisk": "This could allow an attacker to drain contract funds by exploiting the vulnerability in a single transaction.",
        "fixedCode": "function callMe35() public { require(counter35 <= 5); counter35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    }
]