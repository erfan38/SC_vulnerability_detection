[
    {
        "vulnerableLines": "10-14",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, allowing for reentrant calls to the function.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function before the counter is updated, causing them to collect ether more times than intended, draining the contract's balance.",
        "fixedCode": "function checking_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "23-29",
        "vulnerabilityReason": "The function sends ether to lastPlayer_30 before updating it, allowing reentrant calls.",
        "potentialSecurityRisk": "A malicious contract could exploit this by calling buyTicket_30 multiple times, resulting in the user draining the jackpot before lastPlayer_30 is updated.",
        "fixedCode": "function buyTicket_30() public { require(!(lastPlayer_30.send(jackpot_30))); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "43-46",
        "vulnerabilityReason": "The function uses call.value to send ether to the user before resetting their balance, creating a gap for reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit the time between the ether transfer and the balance reset to withdraw additional funds multiple times.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) balances_8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "49-55",
        "vulnerabilityReason": "The function allows ether transfer before updating the user's balance or tracking the withdraw fee, leading to potential reentrancy.",
        "potentialSecurityRisk": "A malicious actor can call this function and exploit the opportunity to withdraw more than they are entitled to by manipulating the contract's state before it updates.",
        "fixedCode": "function withdraw(uint8 type_, address tokenaddr, uint256 amount) public returns(bool) { require(type_ == 0 || type_ == 1); if(type_ == 0) { require(tokenaddr == address(0)); require(amount > 0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)] < amount); require(amount <= address(this).balance); userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount); msg.sender.transfer(amount.sub(withdrawfee[address(0)])); feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]); } else { require(tokenaddr != address(0) && tokendetails[tokenaddr].status == true); require(amount > 0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr] < amount); userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount); Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr]))); feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]); } emit DepositandWithdraw(msg.sender, tokenaddr, amount, 1); return true; }"
    },
    {
        "vulnerableLines": "70-75",
        "vulnerabilityReason": "The function transfers ether before resetting the user's redeemable balance, which exposes it to a reentrancy attack.",
        "potentialSecurityRisk": "An attacker can call this function repeatedly to claim rewards before the store of redeemable ether is cleared.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "95-98",
        "vulnerabilityReason": "Using send to transfer funds before resetting the user balance leads to potential reentrancy.",
        "potentialSecurityRisk": "Attackers can exploit this by invoking this function multiple times before the balance is updated to withdraw more funds than allowed.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; if (msg.sender.send(balance)) { balances_36[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "111-117",
        "vulnerabilityReason": "The function sends ether before updating the counter, creating a reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker can use this to drain the balance by repeatedly invoking this function, taking advantage of the counter not being updated before the ether is sent.",
        "fixedCode": "function checking_35() public { require(counter_35 <= 5); counter_35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    }
]