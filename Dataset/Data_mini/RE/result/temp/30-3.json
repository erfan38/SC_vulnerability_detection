[
    {
        "vulnerableLines": "1-4",
        "vulnerabilityReason": "The function uses send to transfer ether before deducting the user's balance, allowing for reentrant calls while the ether transfer is in process.",
        "potentialSecurityRisk": "An attacker could exploit this to call withdrawFunds_24 again before the balance is updated, thus draining more ether than they are entitled to.",
        "fixedCode": "function withdrawFunds_24(uint256 _weiToWithdraw) public { require(balances_24[msg.sender] >= _weiToWithdraw); balances_24[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "11-16",
        "vulnerabilityReason": "This function uses send to transfer ether before updating the user's balance, which allows for a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could continually withdraw ether by invoking withdrawBalance_5 before their balance is reset to zero.",
        "fixedCode": "function withdrawBalance_5() public { uint256 amountToWithdraw = userBalance_5[msg.sender]; require(msg.sender.send(amountToWithdraw)); userBalance_5[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "32-35",
        "vulnerabilityReason": "The function executes send to transfer ether before updating the balances_15 mapping, opening it to reentrancy exploitation.",
        "potentialSecurityRisk": "A malicious actor can continuously withdraw funds using reentrancy to exploit this vulnerability.",
        "fixedCode": "function withdraw_balances_15() public { uint256 amountToWithdraw = balances_15[msg.sender]; require(msg.sender.send(amountToWithdraw)); balances_15[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "43-49",
        "vulnerabilityReason": "The function allows ether transfer before updating the counter_28, which could lead to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call checkcall_28, resulting in the contract sending more ether than it should.",
        "fixedCode": "function checkcall_28() public { require(counter_28 <= 5); counter_28 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "56-62",
        "vulnerabilityReason": "Ether is sent to msg.sender before updating the callcount_34, allowing a reentrant call.",
        "potentialSecurityRisk": "An attacker could manipulate the system to receive multiple ether withdrawals by re-invoking this function.",
        "fixedCode": "function checkingbalance_34() public { require(callcount_34); callcount_34 = false; require(msg.sender.send(1 ether)); }"
    },
    {
        "vulnerableLines": "71-78",
        "vulnerabilityReason": "The function executes send before updating the counter_21, which can lead to repeated calls within the same transaction.",
        "potentialSecurityRisk": "This vulnerability could let attackers withdraw funds repeatedly until it drains the contract.",
        "fixedCode": "function checkcall_21() public { require(counter_21 <= 5); counter_21 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "96-100",
        "vulnerabilityReason": "Sending ether occurs before the balance is updated, allowing for reentrancy during the send call.",
        "potentialSecurityRisk": "An attacker could exploit this sequence to withdraw beyond their allowed balance.",
        "fixedCode": "function withdrawFunds_10(uint256 _weiToWithdraw) public { require(balances_10[msg.sender] >= _weiToWithdraw); balances_10[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    }
]