[
    {
        "vulnerableLines": "6-9",
        "vulnerabilityReason": "The function uses send to transfer funds before resetting the user's balance, which exposes it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to withdraw more funds than they are entitled to, draining the contract's balance.",
        "fixedCode": "function withdraw_balances_15() public { uint256 balance = balances_15[msg.sender]; require(msg.sender.send(balance)); balances_15[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "18-21",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the state variable var_balance_41, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to receive more ether than allowed before the state is updated.",
        "fixedCode": "function updates_41() public { require(var_balance_41); var_balance_41 = false; require(msg.sender.send(1 ether)); }"
    },
    {
        "vulnerableLines": "32-40",
        "vulnerabilityReason": "The function allows sending ether before updating the counter_42, exposing it to potential reentrant calls.",
        "potentialSecurityRisk": "An attacker can exploit this to drain funds through successive calls to this function.",
        "fixedCode": "function checking_42() public { require(counter_42 <= 5); counter_42 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "45-50",
        "vulnerabilityReason": "The function uses transfer to send funds before resetting the user's redeemable balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function to claim more rewards than intended, draining contract funds.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint256 transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "53-56",
        "vulnerabilityReason": "Using send to transfer funds before resetting the balance can lead to reentrancy issues.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw more funds by calling the function multiple times.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; require(msg.sender.send(balance)); balances_36[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "66-70",
        "vulnerabilityReason": "The function sends ether before updating the lastPlayer_2 address, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "Malicious users can exploit this to withdraw more than they are entitled to by re-entering the function.",
        "fixedCode": "function buyTicket_2() public { require(!(lastPlayer_2.send(jackpot_2))); lastPlayer_2 = msg.sender; jackpot_2 = address(this).balance; }"
    },
    {
        "vulnerableLines": "78-81",
        "vulnerabilityReason": "The use of call.value before deducting the user's balance allows for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly invoke the function before the balance is updated, siphoning off funds.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "98-102",
        "vulnerabilityReason": "This function uses call.value to send ether before updating the user's balance, which can lead to reentrancy problems.",
        "potentialSecurityRisk": "Attackers can exploit this vulnerability to withdraw more funds than allowable, drenching the contract.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "108-110",
        "vulnerabilityReason": "The function sends ether to lastPlayer_9 before updating state, exposing it to reentrant calls.",
        "potentialSecurityRisk": "Attackers could drain the contract by invoking the function multiple times within a single transaction.",
        "fixedCode": "function buyTicket_9() public { require(!(lastPlayer_9.send(jackpot_9))); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "116-120",
        "vulnerabilityReason": "The function allows sending funds before resetting the user's balance, which could encourage reentrancy.",
        "potentialSecurityRisk": "This could allow attackers to drain the contract of funds by invoking it multiple times before their balance is reset.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint256 transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    }
]