[
    {
        "vulnerableLines": "1-5",
        "vulnerabilityReason": "The function sends ether to the user before deducting their balance, allowing for reentrant calls that can drain funds.",
        "potentialSecurityRisk": "An attacker could exploit this to continuously withdraw funds before their balance is updated, leading to unauthorized withdrawals.",
        "fixedCode": "function withdrawFundsAvailable(uint256 _weiToWithdraw) public { require(userBalanceAvailable[msg.sender] >= _weiToWithdraw); userBalanceAvailable[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "24-29",
        "vulnerabilityReason": "This function calls msg.sender and sends ether before updating the state variable isAlreadyProcessed, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker can call this function multiple times, receiving ether before the process status is locked, draining the contract's funds.",
        "fixedCode": "function processStatusTwo() public { require(isAlreadyProcessed); isAlreadyProcessed = false; (bool success,) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } }"
    }
]