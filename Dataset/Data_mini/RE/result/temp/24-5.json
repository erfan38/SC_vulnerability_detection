[
    {
        "vulnerableLines": "1-6",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter. If the send fails, the counter is still incremented, allowing for repeated calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function multiple times before the counter check is enforced, draining funds from the contract.",
        "fixedCode": "function checking_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "9-14",
        "vulnerabilityReason": "Funds are sent to the engineer without resetting engineerFunds first, allowing a malicious actor to exploit this if they call back into the function.",
        "potentialSecurityRisk": "A reentrant call could allow draining of funds beyond the allowed amounts, risking the integrity of contracts' funds.",
        "fixedCode": "function engineerWithdraw() external onlyEngineer { uint256 avaliableAmount = engineerFunds; require(avaliableAmount > 0); engineerFunds = 0; engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount); msg.sender.transfer(avaliableAmount); }"
    },
    {
        "vulnerableLines": "17-23",
        "vulnerabilityReason": "The function uses send to transfer jackpot funds before setting lastPlayer_23, which opens it up to a reentrancy attack.",
        "potentialSecurityRisk": "An attacker can exploit this to replay the buyTicket_23 function multiple times to siphon funds.",
        "fixedCode": "function buyTicket_23() public { uint256 currentJackpot = jackpot_23; lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; if (!(msg.sender.send(currentJackpot))) { revert(); } }"
    },
    {
        "vulnerableLines": "26-31",
        "vulnerabilityReason": "Funds are sent to the operator without checking their balance first and updating operatorFunds afterward.",
        "potentialSecurityRisk": "A reentrancy attack could let an attacker continually request withdrawals, obtaining more than their entitled amount.",
        "fixedCode": "function operatorWithdraw() external onlyOwner { uint256 avaliableAmount = operatorFunds; require(avaliableAmount > 0); operatorFunds = 0; operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount); msg.sender.transfer(avaliableAmount); }"
    },
    {
        "vulnerableLines": "34-40",
        "vulnerabilityReason": "Similar to the first function, the send to the msg.sender occurs before updating the counter, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker may increase the number of calls made before hitting the counter limit, draining contract funds.",
        "fixedCode": "function checking_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "52-58",
        "vulnerabilityReason": "This buyTicket function sends funds before resetting lastPlayer_30. This could lead to reentrancy if called by a malicious actor.",
        "potentialSecurityRisk": "Repeated calls can exploit this function to transfer large amounts of funds unauthorized.",
        "fixedCode": "function buyTicket_30() public { uint256 currentJackpot = jackpot_30; lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; if (!(msg.sender.send(currentJackpot))) { revert(); } }"
    },
    {
        "vulnerableLines": "78-83",
        "vulnerabilityReason": "The withdraw function uses call.value to send funds without updating the balance, which makes it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can exploit this to withdraw more funds than they should before the balance check acts.",
        "fixedCode": "function withdraw_balances_8() public { uint256 amount = balances_8[msg.sender]; require(amount > 0); (bool success,) = msg.sender.call.value(amount)(''); if (success) balances_8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "89-94",
        "vulnerabilityReason": "The function sends ether before updating the redeemable balance, which is a common source of reentrancy vulnerabilities.",
        "potentialSecurityRisk": "A reentrant call to this function could allow an attacker to claim multiple rewards, draining the contract\u2019s funds.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "118-121",
        "vulnerabilityReason": "Withdrawals are made using send before resetting the balance, leading to potential repeated withdrawals through reentrancy.",
        "potentialSecurityRisk": "An attacker could drain funds repeatedly due to the state not being updated immediately after the send operation.",
        "fixedCode": "function withdraw_balances_36() public { uint256 amount = balances_36[msg.sender]; require(amount > 0); if (msg.sender.send(amount)) { balances_36[msg.sender] = 0; } }"
    }
]