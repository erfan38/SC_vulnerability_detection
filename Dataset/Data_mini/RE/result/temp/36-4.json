[
    {
        "vulnerableLines": "20-24",
        "vulnerabilityReason": "The function uses send to transfer jackpot_30 before updating lastPlayer_30, allowing a reentrant call to exploit the withdrawal.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling this function, draining the jackpot balance before the lastPlayer_30 is set.",
        "fixedCode": "function buyTicket_30() public { lastPlayer_30 = msg.sender; require(lastPlayer_30.send(jackpot_30)); jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "58-59",
        "vulnerabilityReason": "Using call.value to transfer funds to p.recipient before finalizing the proposal, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can call back into this function during the fund transfer process, potentially bypassing checks and draining funds.",
        "fixedCode": "if (yea > nay) { p.executed = true; (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode); require(success); p.proposalPassed = true; }"
    },
    {
        "vulnerableLines": "69-73",
        "vulnerabilityReason": "Calling msg.sender.call.value before resetting balances_8[msg.sender], which makes it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw funds multiple times before the user's balance is reset, draining the contract.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) balances_8[msg.sender] = 0; }"
    }
]