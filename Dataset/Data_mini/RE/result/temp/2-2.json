[
    {
        "vulnerableLines": "7-12",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could manipulate the state and repeatedly withdraw funds before the balance is updated, draining the contract's ethers.",
        "fixedCode": "function withdrawUserBalanceMapping() public { uint256 balance = userBalanceMapping[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { userBalanceMapping[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "20-25",
        "vulnerabilityReason": "This function also utilizes call.value to transfer funds before deducting the user's balance, creating a reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to withdraw more funds than their balance allows, compromising the contract's integrity.",
        "fixedCode": "function withdrawUserBalanceMappingSecondary() public { uint256 balance = userBalanceMappingSecondary[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { userBalanceMappingSecondary[msg.sender] = 0; } }"
    }
]