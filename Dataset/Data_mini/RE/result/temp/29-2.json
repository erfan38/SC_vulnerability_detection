[
    {
        "vulnerableLines": "9-12",
        "vulnerabilityReason": "The function uses send to transfer ether to the user before setting their balance to zero, which allows for reentrant calls if the user is a contract.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function repeatedly, draining funds from the contract by withdrawing more than their intended balance.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; if (msg.sender.send(balance)) { balances_36[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "17-22",
        "vulnerabilityReason": "The function allows for sending ether to the user before updating the counter, which can lead to reentrancy issues.",
        "potentialSecurityRisk": "An attacker can call this function multiple times before the counter is updated, leading to potentially draining funds.",
        "fixedCode": "function callcount_35() public { require(counter_35<=5); counter_35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "29-33",
        "vulnerabilityReason": "The function sends ether using call.value before resetting the user's balance. This exposes the function to reentrant calls.",
        "potentialSecurityRisk": "An attacker could call the function multiple times before balancing is reset, draining the contract's funds.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { userBalance_40[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "39-44",
        "vulnerabilityReason": "This function also uses call.value to transfer funds before resetting the user balance, allowing for reentrancy.",
        "potentialSecurityRisk": "It allows attackers to withdraw more than what they're entitled to by exploiting the reentrancy vulnerability.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { userBalance_33[msg.sender] = 0; } }"
    }
]