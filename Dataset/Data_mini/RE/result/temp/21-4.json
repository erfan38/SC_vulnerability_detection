[
    {
        "vulnerableLines": "1-6",
        "vulnerabilityReason": "The function uses call.value to transfer funds to the user before resetting their balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly invoke the withdrawBalance_40 function and drain funds from the contract.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { userBalance_40[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "22-27",
        "vulnerabilityReason": "Use of call.value to transfer funds before updating the user's balance exposes the contract to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious actor could call this function multiple times, withdrawing more than they should be able to.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { userBalance_33[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "34-40",
        "vulnerabilityReason": "The send function could allow reentrant calls before the balance_checking_27 is updated, allowing attackers to drain funds.",
        "potentialSecurityRisk": "An attacker could exploit the timing of state updates, resulting in multiple ether transfers to themselves.",
        "fixedCode": "function update_27() public { require(balance_checking_27); balance_checking_27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "47-50",
        "vulnerabilityReason": "The function sends ether before updating the user's balance, which allows for multiple withdrawals in case of reentrancy.",
        "potentialSecurityRisk": "An attacker can invoke this function repeatedly, draining the contract's funds beyond their allowed balance.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    }
]