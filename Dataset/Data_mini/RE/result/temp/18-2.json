[
    {
        "vulnerableLines": "1-4",
        "vulnerabilityReason": "The function uses send to transfer ether to the user before resetting their balance, which can lead to reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and withdraw more ether, drain the contract's funds by exploiting the moment before the balance is reset.",
        "fixedCode": "function withdraw_balances_15() public { uint256 balance = balances_15[msg.sender]; if (msg.sender.send(balance)) { balances_15[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "7-14",
        "vulnerabilityReason": "The function uses send to transfer ether before incrementing the counter, which makes it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this function to exceed the withdrawal limits by making multiple calls before the counter is updated.",
        "fixedCode": "function update_28() public { require(counter_28 <= 5); counter_28 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "16-23",
        "vulnerabilityReason": "The function sends ether before updating the counters, permitting reentrant calls.",
        "potentialSecurityRisk": "An attacker could drain funds by calling this function repeatedly before the state variable is updated.",
        "fixedCode": "function checking_34() public { require(counters_34); counters_34 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "26-34",
        "vulnerabilityReason": "Using call.value to send 1 ether before resetting the counters could lead to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to make multiple calls and drain 1 ether multiple times before the counter is set to false.",
        "fixedCode": "function checking_13() public { require(counters_13); (bool success,) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } counters_13 = false; }"
    },
    {
        "vulnerableLines": "84-89",
        "vulnerabilityReason": "Using call.value to send funds before updating the user's balance introduces reentrancy risks.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw more than they are entitled to, draining the contract.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "105-107",
        "vulnerabilityReason": "The call to lastPlayer_9 may cause reentrancy due to sending funds before updating the lastPlayer_9 address.",
        "potentialSecurityRisk": "An attacker could exploit this to repeat withdrawals, draining the jackpot before the next player's address is recorded.",
        "fixedCode": "function buyTicket_9() public { (bool success,) = lastPlayer_9.call.value(jackpot_9)(''); if (!success) revert(); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    }
]