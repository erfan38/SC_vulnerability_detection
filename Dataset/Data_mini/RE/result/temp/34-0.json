[
    {
        "vulnerableLines": "6-9",
        "vulnerabilityReason": "The withdraw_balances_15 function sends ether to the msg.sender before updating the balance, allowing for reentrant calls.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function, draining more ether than allowed from balances_15.",
        "fixedCode": "function withdraw_balances_15 () public { uint256 balance = balances_15[msg.sender]; require(msg.sender.send(balance)); balances_15[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "12-19",
        "vulnerabilityReason": "The userbalances_27 function sends ether before changing the callcount_27 state, making it vulnerable to reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly trigger this function and drain ether from the contract.",
        "fixedCode": "function userbalances_27() public { require(callcount_27); callcount_27 = false; require(msg.sender.send(1 ether)); }"
    },
    {
        "vulnerableLines": "25-31",
        "vulnerabilityReason": "The buyTicket_2 function sends jackpot_2 before setting lastPlayer_2, potentially allowing reentrancy.",
        "potentialSecurityRisk": "A malicious player could exploit the reentrant call to withdraw funds again before the lastPlayer_2 is updated.",
        "fixedCode": "function buyTicket_2() public { require(!(lastPlayer_2.send(jackpot_2))); lastPlayer_2 = msg.sender; jackpot_2 = address(this).balance; }"
    },
    {
        "vulnerableLines": "42-48",
        "vulnerabilityReason": "The withdrawFunds_17 function uses call.value to send funds before updating the user's balance, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker could call this function again during the fund transfer, allowing unauthorized withdrawals.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "94-101",
        "vulnerabilityReason": "The callcheck_28 function sends ether before changing the counter_28 state, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this function to make multiple calls, draining ether from the contract.",
        "fixedCode": "function callcheck_28() public { require(counter_28 <= 5); counter_28 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "104-110",
        "vulnerabilityReason": "The userbalances_34 function sends ether before updating the callcount_34 state, making it prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could trigger this function multiple times in a single transaction, draining further ether from the contract.",
        "fixedCode": "function userbalances_34() public { require(callcount_34); callcount_34 = false; require(msg.sender.send(1 ether)); }"
    },
    {
        "vulnerableLines": "114-120",
        "vulnerabilityReason": "The callcheck_21 function sends ether before updating the counter_21 state, exposing this to a reentrant attack.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function multiple times, receiving more ether than intended.",
        "fixedCode": "function callcheck_21() public { require(counter_21 <= 5); counter_21 += 1; require(msg.sender.send(10 ether)); }"
    }
]