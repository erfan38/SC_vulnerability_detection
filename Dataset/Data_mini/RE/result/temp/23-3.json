[
    {
        "vulnerableLines": "1-7",
        "vulnerabilityReason": "The function sends ether to the user before updating the state variable `balances_27`, allowing a potential reentrant call to occur.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain ether from the contract before the balance gets updated, leading to unauthorized withdrawals.",
        "fixedCode": "function withdraw_27() public { require(balances_27); balances_27 = false; require(msg.sender.send(1 ether)); }"
    },
    {
        "vulnerableLines": "12-17",
        "vulnerabilityReason": "The function deducts the user\u2019s balance after sending ether, which exposes it to a reentrancy attack where the user could withdraw more than their balance.",
        "potentialSecurityRisk": "A malicious user could exploit this by calling the function again during the ether transfer, draining more funds than they are entitled to.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "30-38",
        "vulnerabilityReason": "The function uses call.value to send ether before updating the state variable `balances_13`, which is susceptible to reentrancy.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function while still in the middle of processing the previous call, leading to draining of ether.",
        "fixedCode": "function withdraw_13() public { require(balances_13); balances_13 = false; (bool success, ) = msg.sender.call.value(1 ether)(''); require(success); }"
    }
]