[
    {
        "vulnerableLines": "1-2",
        "vulnerabilityReason": "The function uses call to send ether to msg.sender before updating their withdrawal balance, leading to reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could exploit this by re-invoking the withdraw function before the balance is reset, allowing them to withdraw more funds than they are entitled to.",
        "fixedCode": "function withdrawBalances10() public { uint256 amount = balancesForWithdrawal10[msg.sender]; (bool success,) = msg.sender.call.value(amount)(''); if (success) { balancesForWithdrawal10[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "3-4",
        "vulnerabilityReason": "The state variable balancesForWithdrawal10[msg.sender] is reset only if the call is successful, but the flow allows for reentrancy before the state change.",
        "potentialSecurityRisk": "An attacker could call this function multiple times to withdraw more than they're supposed to before their balance is updated to zero.",
        "fixedCode": "function withdrawBalances10() public { uint256 amount = balancesForWithdrawal10[msg.sender]; require(amount > 0, 'No funds available'); (bool success,) = msg.sender.call.value(amount)(''); require(success, 'Transfer failed'); balancesForWithdrawal10[msg.sender] = 0; }"
    }
]