[
    {
        "vulnerableLines": "6-9",
        "vulnerabilityReason": "The function sends ether to the sender before updating their balance, which can lead to multiple withdrawals during a single transaction if the sender calls back.",
        "potentialSecurityRisk": "An attacker can exploit this to withdraw more ether than they have deposited by continuously calling the fallback function during the send.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "18-22",
        "vulnerabilityReason": "The reward is sent to the msg.sender before resetting their redeemable balance, allowing for reentrant calls.",
        "potentialSecurityRisk": "This could lead to an attacker draining the contract by repeatedly triggering this function before their balance is set to zero.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }"
    },
    {
        "vulnerableLines": "30-36",
        "vulnerabilityReason": "The function allows a send operation before updating the counter, which opens it up to reentrant calls.",
        "potentialSecurityRisk": "An attacker can exploit this method to drain funds from the contract by continuously triggering the function before the counter is increased.",
        "fixedCode": "function update_7() public { require(counter_7 <= 5); counter_7 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "44-48",
        "vulnerabilityReason": "Funds are sent before updating the lastPlayer, permitting reentrancy and exploitation.",
        "potentialSecurityRisk": "If a malicious contract is used to call this method, it could multiply attack on the withdrawal method during the send.",
        "fixedCode": "function buyTicket_23() public { require(!(lastPlayer_23.send(jackpot_23))); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }"
    },
    {
        "vulnerableLines": "56-62",
        "vulnerabilityReason": "The function sends ether before updating the counter, making it possible for attackers to reenter the function.",
        "potentialSecurityRisk": "This allows attackers to withdraw more ether than intended by invoking multiple calls before the counter gets updated.",
        "fixedCode": "function update_14() public { require(counter_14 <= 5); counter_14 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "71-75",
        "vulnerabilityReason": "Like other functions, it sends ether to the lastPlayer before updating, which could lead to reentrant exploits.",
        "potentialSecurityRisk": "An attacker could take advantage of this to claim multiple rewards before the lastPlayer variable is updated.",
        "fixedCode": "function buyTicket_30() public { require(!(lastPlayer_30.send(jackpot_30))); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "86-90",
        "vulnerabilityReason": "The use of call.value exposes the function to reentrancy since the balance is reset only after the call is made.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling this function, draining funds from the contract.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) balances_8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "99-103",
        "vulnerabilityReason": "The reward value is sent before setting the redeemable balance to zero, allowing replays of the function to drain ether.",
        "potentialSecurityRisk": "This can be exploited to withdraw more ether than the user is entitled to by continually calling claimReward_39.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "112-114",
        "vulnerabilityReason": "The function sends ether before the user's balance is reset, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw multiple times before the balance is set to zero.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; if (msg.sender.send(balance)) { balances_36[msg.sender] = 0; } }"
    }
]