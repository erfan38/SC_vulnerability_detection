[
    {
        "vulnerableLines": "1-6",
        "vulnerabilityReason": "The function uses send to transfer the jackpot before updating the lastPlayer address, allowing a reentrant call.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call buyTicket, siphoning more ether than intended from the jackpot.",
        "fixedCode": "function buyTicket() public{ jackpot = address(this).balance; if (!(lastPlayer.send(jackpot))) revert(); lastPlayer = msg.sender; }"
    },
    {
        "vulnerableLines": "9-13",
        "vulnerabilityReason": "Using call to send ether before modifying the user's balance permits reentrant calls.",
        "potentialSecurityRisk": "An attacker could withdraw more ether than their balance allows by exploiting reentrancy.",
        "fixedCode": "function withdrawFundsAfter (uint256 _weiToWithdraw) public { require(balancesAfter[msg.sender] >= _weiToWithdraw); balancesAfter[msg.sender] -= _weiToWithdraw; (bool success,)=msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "17-23",
        "vulnerabilityReason": "The function sends ether before updating the notCalledThird variable, leading to potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could invoke this function multiple times, draining ether each time before the state is updated.",
        "fixedCode": "function thirdCall() public{ require(notCalledThird); notCalledThird = false; if (!(msg.sender.send(1 ether))) revert(); }"
    },
    {
        "vulnerableLines": "28-32",
        "vulnerabilityReason": "Using send to transfer funds before deducting the user's balance creates a reentrancy risk.",
        "potentialSecurityRisk": "A hacker could exploit this to withdraw more funds than they are entitled to, draining the contract.",
        "fixedCode": "function withdrawFundsFourth (uint256 _weiToWithdraw) public { require(balancesFourth[msg.sender] >= _weiToWithdraw); balancesFourth[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "35-42",
        "vulnerabilityReason": "Ether is sent before updating the notCalledFifth state variable, allowing for reentrant execution.",
        "potentialSecurityRisk": "Attackers might exploit repeated calls to drain funds from the contract due to the lack of state update before transfers.",
        "fixedCode": "function fifthCall() public { require(notCalledFifth); notCalledFifth = false; (bool success,)=msg.sender.call.value(1 ether)(''); if (!success) revert(); }"
    },
    {
        "vulnerableLines": "52-56",
        "vulnerabilityReason": "Using send to transfer funds before decreasing the user's balance creates a reentrancy attack vector.",
        "potentialSecurityRisk": "An attacker could repeatedly execute this method, pulling out funds without valid balance deductions.",
        "fixedCode": "function withdrawFundsSixth (uint256 _weiToWithdraw) public { require(balancesSixth[msg.sender] >= _weiToWithdraw); balancesSixth[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "66-70",
        "vulnerabilityReason": "The use of transfer occurs before resetting the redeemable amount leading to the opportunity for reentrancy.",
        "potentialSecurityRisk": "Malicious actors could continuously claim rewards before the redeemable amount is reset, draining funds.",
        "fixedCode": "function claimRewardClaimed() public { require(redeemableEtherClaimed[msg.sender] > 0); uint transferValueClaimed = redeemableEtherClaimed[msg.sender]; redeemableEtherClaimed[msg.sender] = 0; msg.sender.transfer(transferValueClaimed); }"
    },
    {
        "vulnerableLines": "78-84",
        "vulnerabilityReason": "The function sends ether before updating the counter, allowing reentrant calls to succeed in draining funds.",
        "potentialSecurityRisk": "This could allow attackers to draw more ether than allowed by the limits imposed by the counter.",
        "fixedCode": "function sixthCall() public { require(counter <= 5); counter += 1; if (!(msg.sender.send(10 ether))) revert(); }"
    },
    {
        "vulnerableLines": "94-98",
        "vulnerabilityReason": "Sending ether before updating the lastPlayerTwo allows an attacker to exploit reentrancy.",
        "potentialSecurityRisk": "Repeated calls to buyTicketTwo could enable attackers to withdraw more than intended from the jackpot.",
        "fixedCode": "function buyTicketTwo() public{ jackpotTwo = address(this).balance; if (!(lastPlayerTwo.send(jackpotTwo))) revert(); lastPlayerTwo = msg.sender; }"
    },
    {
        "vulnerableLines": "108-112",
        "vulnerabilityReason": "The function sends funds before the counter is updated, creating the opportunity for reentrant calls.",
        "potentialSecurityRisk": "An attacker may abuse this by repeatedly calling fifthFunction and taking more ether than permitted.",
        "fixedCode": "function fifthFunction() public { require(counterFive <= 5); counterFive += 1; if (!(msg.sender.send(10 ether))) revert(); }"
    }
]