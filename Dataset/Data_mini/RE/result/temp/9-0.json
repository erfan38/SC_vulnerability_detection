[
    {
        "vulnerableLines": "33-38",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the user's balance, making it prone to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability to withdraw more funds than they are entitled to, draining the contract's balance.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "45-50",
        "vulnerabilityReason": "The transfer occurs before the user's redeemable balance is reset, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly claim rewards, draining contract funds.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }"
    },
    {
        "vulnerableLines": "61-67",
        "vulnerabilityReason": "The function sends ether before updating the lastPlayer address, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly claim the jackpot, draining the contract's balance.",
        "fixedCode": "function buyTicket_37() public { if (!(lastPlayer_37.send(jackpot_37))) revert(); lastPlayer_37 = msg.sender; jackpot_37 = address(this).balance; }"
    },
    {
        "vulnerableLines": "71-76",
        "vulnerabilityReason": "Using call.value to transfer ether before updating the balance exposes the contract to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to drain more funds than permitted by the balance.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "80-85",
        "vulnerabilityReason": "The function sends ether before changing the lastPlayer address, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker may exploit this to withdraw funds multiple times before the state is updated.",
        "fixedCode": "function buyTicket_9() public { (bool success,) = lastPlayer_9.call.value(jackpot_9)(''); if (!success) revert(); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "90-95",
        "vulnerabilityReason": "The function sends ether before resetting the redeemable balance, which allows reentrancy.",
        "potentialSecurityRisk": "An attacker can continuously exploit this to deplete the contract's funds.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    },
    {
        "vulnerableLines": "98-102",
        "vulnerabilityReason": "Using send to transfer funds before setting the user balance to zero creates a reentrancy risk.",
        "potentialSecurityRisk": "An attacker can manipulate this to withdraw more funds than they should.",
        "fixedCode": "function withdrawBalance_19() public { uint256 amount = userBalance_19[msg.sender]; require(msg.sender.send(amount)); userBalance_19[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "106-112",
        "vulnerabilityReason": "The call to transfer funds occurs before resetting the user's balance, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker could leverage this to withdraw funds effectively, exceeding their rightful balance.",
        "fixedCode": "function withdrawBalance_26() public { uint256 amount = userBalance_26[msg.sender]; (bool success,) = msg.sender.call.value(amount)(''); require(success); userBalance_26[msg.sender] = 0; }"
    }
]