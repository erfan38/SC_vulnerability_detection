[
    {
        "vulnerableLines": "106-112",
        "vulnerabilityReason": "The function uses msg.sender.transfer(transferValue_18) to send ether before resetting the user's redeemable balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability by calling the claimReward_18() function recursively, draining more funds than intended from the contract.",
        "fixedCode": "function claimReward_18() public { require(redeemableEther_18[msg.sender] > 0); uint transferValue_18 = redeemableEther_18[msg.sender]; redeemableEther_18[msg.sender] = 0; msg.sender.transfer(transferValue_18); }"
    },
    {
        "vulnerableLines": "115-118",
        "vulnerabilityReason": "The function sends ether using msg.sender.send(balances_29[msg.sender]) before updating the user balance, allowing reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this multiple times before the balance is updated, effectively withdrawing more funds than they are entitled to.",
        "fixedCode": "function withdraw_balances_29() public { uint256 balance = balances_29[msg.sender]; require(msg.sender.send(balance)); balances_29[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "121-127",
        "vulnerabilityReason": "The function sends ether before updating the state variable 'balances_6', allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could call this function multiple times and receive ether prior to the sanity check, draining the contract's balance.",
        "fixedCode": "function updates6() public { require(balances_6); balances_6 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "129-136",
        "vulnerabilityReason": "The transfer of jackpot funds occurs before updating the lastPlayer_16 state variable.",
        "potentialSecurityRisk": "A malicious contract could exploit this to call 'buyTicket_16' repeatedly, draining the jackpot before the 'lastPlayer_16' is updated.",
        "fixedCode": "function buyTicket_16() public { lastPlayer_16 = msg.sender; require(!(lastPlayer_16.send(jackpot_16))); jackpot_16 = address(this).balance; }"
    },
    {
        "vulnerableLines": "138-143",
        "vulnerabilityReason": "Funds are sent to the msg.sender before deducting their balance, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could invoke this multiple times, withdraw more than intended, and create a reentrancy attack that drains funds.",
        "fixedCode": "function withdrawFunds_24 (uint256 _weiToWithdraw) public { require(balances_24[msg.sender] >= _weiToWithdraw); balances_24[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "145-151",
        "vulnerabilityReason": "The function sends funds before resetting the user's balance, leading to reentrancy protection vulnerabilities.",
        "potentialSecurityRisk": "This allows an attacker to drain their balance multiple times before it is reset.",
        "fixedCode": "function withdrawBalance_5() public { uint256 balance = userBalance_5[msg.sender]; if (!(msg.sender.send(balance))) { revert(); } userBalance_5[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "153-157",
        "vulnerabilityReason": "Funds are sent before the user's balance is updated, risking multiple withdrawals.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw funds multiple times, draining the contract's reserves.",
        "fixedCode": "function withdraw_balances_15 () public { uint256 balance = balances_15[msg.sender]; if (msg.sender.send(balance)) { balances_15[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "159-165",
        "vulnerabilityReason": "This function allows for a send call before updating the counter, opening potential for reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly execute the function, potentially draining funds before the counter limit is enforced.",
        "fixedCode": "function checking_28() public { require(counter_28 <= 5); counter_28 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "168-175",
        "vulnerabilityReason": "Before updating 'balances_34', funds are sent which can lead to reentrant execution.",
        "potentialSecurityRisk": "Allows an attacker to drain funds by triggering this function repeatedly before the state is changed.",
        "fixedCode": "function updates34() public { require(balances_34); balances_34 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "177-183",
        "vulnerabilityReason": "Sending funds occurs before the counter state is updated, allowing for reentrancy opportunities.",
        "potentialSecurityRisk": "Attackers can exploit this to withdraw constantly, leading to potential contract balance depletion.",
        "fixedCode": "function checking_21() public { require(counter_21 <= 5); counter_21 += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "187-192",
        "vulnerabilityReason": "The user balance is decremented only after a successful send, which opens a gap for a reentrancy attack.",
        "potentialSecurityRisk": "This permits an external call to withdraw more funds than the user should have access to, draining the contract.",
        "fixedCode": "function withdrawFunds_10 (uint256 _weiToWithdraw) public { require(balances_10[msg.sender] >= _weiToWithdraw); balances_10[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "195-200",
        "vulnerabilityReason": "The function sends funds before the balance mapping is updated, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could call the withdraw again during the send process, leading to multiple withdrawals.",
        "fixedCode": "function withdraw_balances_21 () public { uint256 balance = balances_21[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) balances_21[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "202-207",
        "vulnerabilityReason": "Funds are sent before the user's balance is updated which risks allowing reentrant withdrawals.",
        "potentialSecurityRisk": "This opens a pathway for malicious contracts to capture funds before they are effectively accounted.",
        "fixedCode": "function withdrawBalance_12() public { uint256 balance = userBalance_12[msg.sender]; if (!(msg.sender.send(balance))) { revert(); } userBalance_12[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "209-214",
        "vulnerabilityReason": "The payout occurs before resetting the redeemable balance, risking multiple claims.",
        "potentialSecurityRisk": "This could allow repeated claims from the same user before balance resets, draining the contract's ether.",
        "fixedCode": "function claimReward_11() public { require(redeemableEther_11[msg.sender] > 0); uint transferValue_11 = redeemableEther_11[msg.sender]; redeemableEther_11[msg.sender] = 0; msg.sender.transfer(transferValue_11); }"
    },
    {
        "vulnerableLines": "217-222",
        "vulnerabilityReason": "The function sends the balance before it is set to zero, enabling reentrant withdrawals.",
        "potentialSecurityRisk": "An attacker can leverage this function to withdraw funds multiple times before their balance is updated.",
        "fixedCode": "function withdraw_balances_1 () public { uint256 balance = balances_1[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) balances_1[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "233-240",
        "vulnerabilityReason": "Funds are sent before the state variable 'balances_41' is updated, which poses a reentrancy risk.",
        "potentialSecurityRisk": "An attacker could call this repeatedly to drain funds from the contract before the variable is set to false.",
        "fixedCode": "function updates41() public { require(balances_41); balances_41 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "246-252",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_42, allowing for a reentrant call before the limit is enforced.",
        "potentialSecurityRisk": "An attacker could exploit this function to call it repeatedly, draining extra ether from the contract before the increment of the counter takes effect.",
        "fixedCode": "function checking_42() public { require(counter_42 <= 5); counter_42 += 1; require(msg.sender.send(10 ether), 'Transfer failed'); }"
    },
    {
        "vulnerableLines": "269-275",
        "vulnerabilityReason": "The function uses send to transfer jackpot_2 before updating lastPlayer_2, which can lead to reentrancy.",
        "potentialSecurityRisk": "Malicious contracts can call this function multiple times during the transfer to drain more ether than allowed before the player address updates.",
        "fixedCode": "function buyTicket_2() public { require(!(lastPlayer_2.send(jackpot_2)), 'Transfer failed'); lastPlayer_2 = msg.sender; jackpot_2 = address(this).balance; }"
    },
    {
        "vulnerableLines": "288-292",
        "vulnerabilityReason": "Uses call.value to transfer funds before the user's balance is deducted, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to withdraw funds repeatedly before their balance is modified.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success, 'Transfer failed'); }"
    },
    {
        "vulnerableLines": "298-304",
        "vulnerabilityReason": "The function sends ether before the lastPlayer_37 is updated, facilitating a potential reentrant attack.",
        "potentialSecurityRisk": "An attacker could exploit the time between sending funds and updating state variables, draining contract funds.",
        "fixedCode": "function buyTicket_37() public { require(!(lastPlayer_37.send(jackpot_37)), 'Transfer failed'); lastPlayer_37 = msg.sender; jackpot_37 = address(this).balance; }"
    },
    {
        "vulnerableLines": "320-324",
        "vulnerabilityReason": "The funds are sent using call.value before the user balance is reset, allowing for reentrancy.",
        "potentialSecurityRisk": "Attackers could withdraw more funds than they are entitled to by repeatedly calling the function before the balance is deducted.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success, 'Transfer failed'); }"
    },
    {
        "vulnerableLines": "354-361",
        "vulnerabilityReason": "The transfer to lastPlayer_9 is executed before the lastPlayer_9 is updated, making it susceptible to reentry.",
        "potentialSecurityRisk": "An attacker could call this function multiple times, claiming rewards more than accrued before the player address is updated.",
        "fixedCode": "function buyTicket_9() public { (bool success,) = lastPlayer_9.call.value(jackpot_9)(''); require(success, 'Transfer failed'); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "395-401",
        "vulnerabilityReason": "The function calls transfer to send rewards to the user before updating their redeemable balance, which may allow for reentrant calls by the user.",
        "potentialSecurityRisk": "An attacker can call this function multiple times through a fallback function when receiving ether, draining the contract's balance.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    },
    {
        "vulnerableLines": "416-422",
        "vulnerabilityReason": "The function sends the user balance before updating it to zero, enabling reentrancy attacks where an attacker can repeatedly withdraw funds.",
        "potentialSecurityRisk": "This could lead to draining the funds from the contract if an attacker exploits the timing of the send call.",
        "fixedCode": "function withdrawBalance_19() public { uint balance = userBalance_19[msg.sender]; require(msg.sender.send(balance)); userBalance_19[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "432-438",
        "vulnerabilityReason": "Similar to previous withdrawals, the user balance is being sent before the state of userBalance_26 is updated.",
        "potentialSecurityRisk": "Repeated calls can drain balance because the contract does not zero out the user's balance before sending ether.",
        "fixedCode": "function withdrawBalance_26() public { uint balance = userBalance_26[msg.sender]; (bool success, ) = msg.sender.call.value(balance)(''); require(success); userBalance_26[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "449-456",
        "vulnerabilityReason": "Sending ether before updating the balances_20 state catches potential reentrancy issues, as an attacker can call updates20 repeatedly.",
        "potentialSecurityRisk": "Repeated calls may allow an attacker to gain more ether than intended with the condition check, draining contract funds.",
        "fixedCode": "function updates20() public { require(balances_20); balances_20 = false; require(msg.sender.send(1 ether)); }"
    },
    {
        "vulnerableLines": "467-472",
        "vulnerabilityReason": "The redeemable ether balance is reset after attempting to send the funds, creating a window for reentrancy.",
        "potentialSecurityRisk": "If an attacker controls the contract receiving the ether and calls claimReward_32 while it executes, they could reclaim funds continuously.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }"
    },
    {
        "vulnerableLines": "533-536",
        "vulnerabilityReason": "The withdrawal uses send to transfer ether before updating the user's balance, allowing potentially malicious contracts to re-enter and withdraw additional funds.",
        "potentialSecurityRisk": "An attacker could drain funds from the contract by exploiting this vulnerability, withdrawing more than their actual balance.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "540-557",
        "vulnerabilityReason": "The function transfers user funds before resetting their investment state, enabling potential reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could call this function repeatedly, withdrawing more funds than allowed before their state is properly updated.",
        "fixedCode": "function userWithdraw() external { User storage user = userMapping[msg.sender]; if (user.currentInvestAmount > 0) { uint256 avaliableIA = user.currentInvestAmount; if (!isInvestExpired(user)) { avaliableIA = getAbortInvestAmount(user); } uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user); user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA); user.currentInvestTime = 0; user.currentInvestAmount = 0; user.currentInvestCycle = 0; user.currentlevel = 0; user.currentStaticCommissionRatio = 0; user.currentStaticCommissionWithdrawAmount = 0; user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA); totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA); } if (avaliableIA > 0) { msg.sender.transfer(avaliableIA); } }"
    },
    {
        "vulnerableLines": "560-564",
        "vulnerabilityReason": "The function uses transfer to send the reward balance before resetting it, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers could use this vulnerability to withdraw rewards repeatedly, draining the contract's funds.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }"
    },
    {
        "vulnerableLines": "586-586",
        "vulnerabilityReason": "The withdrawal of user commission is executed before updating the user state, leading to possible reentrancy.",
        "potentialSecurityRisk": "A malicious actor could drain user's accumulative commissions multiple times before updates take effect.",
        "fixedCode": "function userWithdrawCommission() external { User storage user = userMapping[msg.sender]; uint256 avaliableDCB = user.dynamicCommissionBalance; uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user); uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA); uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB); if (avaliableWithdrawAmount >= ONE_ETH.div(10)) { user.staticCommissionBalance = 0; user.dynamicCommissionBalance = 0; user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA); user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB); user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB); user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount); totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB); totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB); totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount); if (avaliableSCB > 0) { addStaticCommissionRecord(msg.sender, now, avaliableSCB); } if (avaliableWithdrawAmount > 0) { msg.sender.transfer(avaliableWithdrawAmount); } } }"
    },
    {
        "vulnerableLines": "590-595",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter. If the send fails, the counter is still incremented, allowing for repeated calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function multiple times before the counter check is enforced, draining funds from the contract.",
        "fixedCode": "function checking_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "598-603",
        "vulnerabilityReason": "Funds are sent to the engineer without resetting engineerFunds first, allowing a malicious actor to exploit this if they call back into the function.",
        "potentialSecurityRisk": "A reentrant call could allow draining of funds beyond the allowed amounts, risking the integrity of contracts' funds.",
        "fixedCode": "function engineerWithdraw() external onlyEngineer { uint256 avaliableAmount = engineerFunds; require(avaliableAmount > 0); engineerFunds = 0; engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount); msg.sender.transfer(avaliableAmount); }"
    },
    {
        "vulnerableLines": "606-612",
        "vulnerabilityReason": "The function uses send to transfer jackpot funds before setting lastPlayer_23, which opens it up to a reentrancy attack.",
        "potentialSecurityRisk": "An attacker can exploit this to replay the buyTicket_23 function multiple times to siphon funds.",
        "fixedCode": "function buyTicket_23() public { uint256 currentJackpot = jackpot_23; lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; if (!(msg.sender.send(currentJackpot))) { revert(); } }"
    },
    {
        "vulnerableLines": "615-620",
        "vulnerabilityReason": "Funds are sent to the operator without checking their balance first and updating operatorFunds afterward.",
        "potentialSecurityRisk": "A reentrancy attack could let an attacker continually request withdrawals, obtaining more than their entitled amount.",
        "fixedCode": "function operatorWithdraw() external onlyOwner { uint256 avaliableAmount = operatorFunds; require(avaliableAmount > 0); operatorFunds = 0; operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount); msg.sender.transfer(avaliableAmount); }"
    },
    {
        "vulnerableLines": "623-629",
        "vulnerabilityReason": "Similar to the first function, the send to the msg.sender occurs before updating the counter, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker may increase the number of calls made before hitting the counter limit, draining contract funds.",
        "fixedCode": "function checking_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "641-647",
        "vulnerabilityReason": "This buyTicket function sends funds before resetting lastPlayer_30. This could lead to reentrancy if called by a malicious actor.",
        "potentialSecurityRisk": "Repeated calls can exploit this function to transfer large amounts of funds unauthorized.",
        "fixedCode": "function buyTicket_30() public { uint256 currentJackpot = jackpot_30; lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; if (!(msg.sender.send(currentJackpot))) { revert(); } }"
    },
    {
        "vulnerableLines": "667-672",
        "vulnerabilityReason": "The withdraw function uses call.value to send funds without updating the balance, which makes it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can exploit this to withdraw more funds than they should before the balance check acts.",
        "fixedCode": "function withdraw_balances_8() public { uint256 amount = balances_8[msg.sender]; require(amount > 0); (bool success,) = msg.sender.call.value(amount)(''); if (success) balances_8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "678-683",
        "vulnerabilityReason": "The function sends ether before updating the redeemable balance, which is a common source of reentrancy vulnerabilities.",
        "potentialSecurityRisk": "A reentrant call to this function could allow an attacker to claim multiple rewards, draining the contract\u2019s funds.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "707-710",
        "vulnerabilityReason": "Withdrawals are made using send before resetting the balance, leading to potential repeated withdrawals through reentrancy.",
        "potentialSecurityRisk": "An attacker could drain funds repeatedly due to the state not being updated immediately after the send operation.",
        "fixedCode": "function withdraw_balances_36() public { uint256 amount = balances_36[msg.sender]; require(amount > 0); if (msg.sender.send(amount)) { balances_36[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "732-739",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, allowing for reentrant calls.",
        "potentialSecurityRisk": "A malicious contract could call `checking_35` repeatedly, exceeding the limit set by `counter_35` and draining funds.",
        "fixedCode": "function checking_35() public { require(counter_35 <= 5); counter_35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "761-767",
        "vulnerabilityReason": "The call to send ether happens before resetting the user balance, providing a reentrancy opportunity.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, withdrawing more ether than their balance allows, leading to significant losses.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) userBalance_40[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "820-826",
        "vulnerabilityReason": "Using call.value before resetting the user's balance introduces a reentrancy risk.",
        "potentialSecurityRisk": "An attacker can exploit this by calling `withdrawBalance_33` multiple times before the balance is updated, draining funds.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) userBalance_33[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "836-841",
        "vulnerabilityReason": "The function sends ether before updating the state variable balances_27, which allows an attacker to reenter this function and receive funds again.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability to call the updates27 function multiple times, draining more than the intended amount of ether from the contract.",
        "fixedCode": "function updates27() public { require(balances_27); balances_27 = false; require(msg.sender.send(1 ether)); }"
    },
    {
        "vulnerableLines": "880-884",
        "vulnerabilityReason": "The function uses send before updating the user balance in balances_31, exposing it to reentrancy risks where the user could withdraw again before the balance is deducted.",
        "potentialSecurityRisk": "An attacker could drain ether from the contract by exploiting this timing vulnerability and withdrawing funds multiple times.",
        "fixedCode": "function withdrawFunds_31 (uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "897-904",
        "vulnerabilityReason": "In the updates13 function, ether is sent before updating the balances_13 state variable, allowing a potential reentrant attack.",
        "potentialSecurityRisk": "A malicious actor could exploit this to call updates13 repeatedly, extracting more funds than allowed.",
        "fixedCode": "function updates13() public { require(balances_13); balances_13 = false; (bool success,) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } }"
    }
]