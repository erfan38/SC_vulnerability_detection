[
    {
        "vulnerableLines": "5-5",
        "vulnerabilityReason": "The function getAvaliableStaticCommissionAmount uses now to calculate commissionDays, which can be manipulated by miners.",
        "potentialSecurityRisk": "Miners can influence the calculation, allowing them to receive more commissions than intended, leading to potential financial losses for users.",
        "fixedCode": "function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) { if (user.currentInvestAmount == 0) { amount = 0; } else { uint256 commissionDays = block.timestamp.sub(user.currentInvestTime).div(ONE_DAY); if (commissionDays > user.currentInvestCycle) { commissionDays = user.currentInvestCycle; } amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays); amount = amount.div(1000); amount = amount.sub(user.currentStaticCommissionWithdrawAmount); } }"
    },
    {
        "vulnerableLines": "15-18",
        "vulnerabilityReason": "The function balances_32 relies on now for condition checks, making it susceptible to manipulation.",
        "potentialSecurityRisk": "An attacker could manipulate the timing conditions, leading to unintended ether transfers or denial of services.",
        "fixedCode": "function balances_32 () public payable { uint pastBlockTime_32; require(msg.value == 10 ether); require(block.timestamp != pastBlockTime_32); pastBlockTime_32 = block.timestamp; if(block.timestamp % 15 == 0) { msg.sender.transfer(address(this).balance); } }"
    },
    {
        "vulnerableLines": "34-35",
        "vulnerabilityReason": "The play_38 function uses block.timestamp to determine the winner, allowing miners to manipulate the outcome.",
        "potentialSecurityRisk": "Miners could forcibly ensure that specific transactions win, leading to unfair advantages and the potential to exploit the contract.",
        "fixedCode": "function play_38(uint startTime) public { require(startTime + (5 * 1 days) <= block.timestamp, 'Invalid start time'); winner_38 = msg.sender; }"
    },
    {
        "vulnerableLines": "45-48",
        "vulnerabilityReason": "The function balances_4 uses now to check for the state, exposing it to potential miner manipulation.",
        "potentialSecurityRisk": "An attacker could exploit this to trigger the ether transfers inappropriately, leading to financial loss for the contract.",
        "fixedCode": "function balances_4 () public payable { uint pastBlockTime_4; require(msg.value == 10 ether); require(block.timestamp != pastBlockTime_4); pastBlockTime_4 = block.timestamp; if (block.timestamp % 15 == 0) { msg.sender.transfer(address(this).balance); } }"
    },
    {
        "vulnerableLines": "65-67",
        "vulnerabilityReason": "The play_7 function checks for conditions against block.timestamp which could be influenced by miners.",
        "potentialSecurityRisk": "This allows miners to create a \u2018winning\u2019 condition by manipulating the timestamp, causing unfair outcomes.",
        "fixedCode": "function play_7(uint startTime) public { require(startTime + (5 * 1 days) <= block.timestamp, 'Invalid start time'); winner_7 = msg.sender; }"
    },
    {
        "vulnerableLines": "90-90",
        "vulnerabilityReason": "The invest function uses now for assigning values to the user struct which can be manipulated.",
        "potentialSecurityRisk": "Manipulation can lead to incorrect user states and undermine the integrity of the investment process.",
        "fixedCode": "user.currentInvestTime = block.timestamp;"
    },
    {
        "vulnerableLines": "104-104",
        "vulnerabilityReason": "Similar to previous timestamps, using now directly in the initialization exposes the contract to miner manipulation.",
        "potentialSecurityRisk": "This can lead to erroneous contract behavior and manipulation of user states.",
        "fixedCode": " userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount, block.timestamp, investAmount, investCycle, level, getStaticCommissionRatio(level, investCycle), 0, 0, 0, 0, sponsorAddress);"
    },
    {
        "vulnerableLines": "121-121",
        "vulnerabilityReason": "The addition to invest records uses now, which is manipulable, impacting the integrity of investment records.",
        "potentialSecurityRisk": "Creating or adjusting investment records based on a miner-influenced timestamp compromises user trust and contract validity.",
        "fixedCode": "addInvestRecord(msg.sender, block.timestamp, investAmount, investCycle);"
    }
]