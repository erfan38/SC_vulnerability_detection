[
    {
        "vulnerableLines": "8-15",
        "vulnerabilityReason": "The function 'buyTicket_re_ent2' sends ether to the last player using 'lastPlayer_re_ent2.send(jackpot_re_ent2)' before updating 'lastPlayer_re_ent2' and 'jackpot_re_ent2'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent2() public { uint tempJackpot = jackpot_re_ent2; address payable tempLastPlayer = lastPlayer_re_ent2; lastPlayer_re_ent2 = msg.sender; jackpot_re_ent2 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)){ revert(); }}"
    },
    {
        "vulnerableLines": "17-23",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' sends ether to msg.sender using 'msg.sender.call.value(_weiToWithdraw)' before updating 'balances_re_ent17[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent17(uint256 _weiToWithdraw) public { require(balances_re_ent17[msg.sender] >= _weiToWithdraw); uint amount = balances_re_ent17[msg.sender]; balances_re_ent17[msg.sender] = 0; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); if (!success) { balances_re_ent17[msg.sender] = amount; } else { balances_re_ent17[msg.sender] -= _weiToWithdraw; }}"
    },
    {
        "vulnerableLines": "27-34",
        "vulnerabilityReason": "The function 'bug_re_ent27' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent27'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent27() public{ require(not_called_re_ent27); not_called_re_ent27 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent27 = true; revert(); }}"
    },
    {
        "vulnerableLines": "40-47",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent32'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent32() public { require(redeemableEther_re_ent32[msg.sender] > 0); uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent32); }"
    },
    {
        "vulnerableLines": "57-63",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent38' sends ether to msg.sender using 'msg.sender.send(_weiToWithdraw)' before updating 'balances_re_ent38[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent38(uint256 _weiToWithdraw) public { require(balances_re_ent38[msg.sender] >= _weiToWithdraw); uint amount = balances_re_ent38[msg.sender]; balances_re_ent38[msg.sender] = 0; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent38[msg.sender] = amount; } else { balances_re_ent38[msg.sender] -= _weiToWithdraw; }}"
    },
    {
        "vulnerableLines": "101-108",
        "vulnerabilityReason": "The function 'claimReward_re_ent4' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent4[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent4() public { require(redeemableEther_re_ent4[msg.sender] > 0); uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender]; redeemableEther_re_ent4[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent4); }"
    },
    {
        "vulnerableLines": "110-117",
        "vulnerabilityReason": "The function 'callme_re_ent7' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating the 'counter_re_ent7'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent7() public{ require(counter_re_ent7 <= 5); counter_re_ent7 += 1; if (!msg.sender.send(10 ether)){ revert(); }}"
    },
    {
        "vulnerableLines": "121-126",
        "vulnerabilityReason": "Function 'buyTicket_re_ent23' sends ether to 'lastPlayer_re_ent23' using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call can be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw the jackpot amount by triggering reentrant calls.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "132-137",
        "vulnerabilityReason": "Function 'buyTicket_re_ent37' sends ether to 'lastPlayer_re_ent37' using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. A reentrant call can be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw the jackpot amount by triggering reentrant calls.",
        "fixedCode": "function buyTicket_re_ent37() public { uint tempJackpot = jackpot_re_ent37; address payable tempLastPlayer = lastPlayer_re_ent37; lastPlayer_re_ent37 = msg.sender; jackpot_re_ent37 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "140-145",
        "vulnerabilityReason": "Function 'withdrawFunds_re_ent3' sends ether to 'msg.sender' using 'msg.sender.call.value(_weiToWithdraw)(\"\")' before updating 'balances_re_ent3[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's balance is updated.",
        "fixedCode": "function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); uint amount = _weiToWithdraw; balances_re_ent3[msg.sender] -= amount; (bool success,) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "151-156",
        "vulnerabilityReason": "Function 'buyTicket_re_ent9' sends ether to 'lastPlayer_re_ent9' using 'lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\")' before updating 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call can be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw the jackpot amount by triggering reentrant calls.",
        "fixedCode": "function buyTicket_re_ent9() public { uint tempJackpot = jackpot_re_ent9; address payable tempLastPlayer = lastPlayer_re_ent9; lastPlayer_re_ent9 = msg.sender; jackpot_re_ent9 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); if (!success) { revert(); }}"
    },
    {
        "vulnerableLines": "159-165",
        "vulnerabilityReason": "Function 'claimReward_re_ent25' sends ether to 'msg.sender' using 'msg.sender.transfer(transferValue_re_ent25)' before updating 'redeemableEther_re_ent25[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's redeemable ether is reset.",
        "fixedCode": "function claimReward_re_ent25() public { uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender]; redeemableEther_re_ent25[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent25); }"
    },
    {
        "vulnerableLines": "169-176",
        "vulnerabilityReason": "Function 'withdrawBalance_re_ent19' sends ether to 'msg.sender' using 'msg.sender.send(userBalance_re_ent19[msg.sender])' before updating 'userBalance_re_ent19[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent19() public { uint amount = userBalance_re_ent19[msg.sender]; userBalance_re_ent19[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent19[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "180-187",
        "vulnerabilityReason": "Function 'withdrawBalance_re_ent26' sends ether to 'msg.sender' using 'msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\")' before updating 'userBalance_re_ent26[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent26() public { uint amount = userBalance_re_ent26[msg.sender]; userBalance_re_ent26[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent26[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "191-195",
        "vulnerabilityReason": "Function 'withdrawFunds_re_ent31' sends ether to 'msg.sender' using 'msg.sender.send(_weiToWithdraw)' before updating 'balances_re_ent31[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public { require(balances_re_ent31[msg.sender] >= _weiToWithdraw); balances_re_ent31[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent31[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "199-205",
        "vulnerabilityReason": "Function 'bug_re_ent13' sends ether to 'msg.sender' using 'msg.sender.call.value(1 ether)(\"\")' before updating 'not_called_re_ent13'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the flag is reset.",
        "fixedCode": "function bug_re_ent13() public{ require(not_called_re_ent13); not_called_re_ent13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { not_called_re_ent13 = true; revert(); }}"
    },
    {
        "vulnerableLines": "215-220",
        "vulnerabilityReason": "Function 'bug_re_ent20' sends ether to 'msg.sender' using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent20'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the flag is reset.",
        "fixedCode": "function bug_re_ent20() public{ require(not_called_re_ent20); not_called_re_ent20 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent20 = true; revert(); }}"
    },
    {
        "vulnerableLines": "230-236",
        "vulnerabilityReason": "Function 'callme_re_ent14' sends ether to 'msg.sender' using 'msg.sender.send(10 ether)' before updating 'counter_re_ent14'. A reentrant call can be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the counter is incremented.",
        "fixedCode": "function callme_re_ent14() public{ require(counter_re_ent14 <= 5); counter_re_ent14 += 1; if (!msg.sender.send(10 ether)){ revert(); }}"
    },
    {
        "vulnerableLines": "245-252",
        "vulnerabilityReason": "In the function 'buyTicket_re_ent30', the function sends ether to the last player using 'lastPlayer_re_ent30.send(jackpot_re_ent30)' before updating 'lastPlayer_re_ent30' and 'jackpot_re_ent30'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent30() public { uint tempJackpot = jackpot_re_ent30; address payable tempLastPlayer = lastPlayer_re_ent30; lastPlayer_re_ent30 = msg.sender; jackpot_re_ent30    = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "264-269",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent8' sends ether to msg.sender using a call before updating 'balances_re_ent8[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent8 () public { uint amount = balances_re_ent8[msg.sender]; balances_re_ent8[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent8[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "274-281",
        "vulnerabilityReason": "The function 'claimReward_re_ent39' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent39[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent39() public { uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender]; redeemableEther_re_ent39[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent39); }"
    },
    {
        "vulnerableLines": "286-290",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent36' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent36[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent36 () public { uint amount = balances_re_ent36[msg.sender]; balances_re_ent36[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent36[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "296-303",
        "vulnerabilityReason": "The function 'callme_re_ent35' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent35'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent35() public{ require(counter_re_ent35 <= 5); counter_re_ent35 += 1; if (!msg.sender.send(10 ether)){ revert(); }}"
    },
    {
        "vulnerableLines": "308-317",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent40' sends ether to msg.sender using a call before updating 'userBalance_re_ent40[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent40() public { uint amount = userBalance_re_ent40[msg.sender]; userBalance_re_ent40[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent40[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "324-333",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent33' sends ether to msg.sender using a call before updating 'userBalance_re_ent33[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent33() public { uint amount = userBalance_re_ent33[msg.sender]; userBalance_re_ent33[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent33[msg.sender] = amount; }}"
    }
]