[
    {
        "vulnerableLines": "22-29",
        "vulnerabilityReason": "The function 'callme_re_ent7' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating the counter_re_ent7. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent7() public { require(counter_re_ent7 <= 5); counter_re_ent7 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "36-43",
        "vulnerabilityReason": "The function 'buyTicket_re_ent23' sends ether to the last player using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "51-58",
        "vulnerabilityReason": "The function 'callme_re_ent14' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating the counter_re_ent14. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent14() public { require(counter_re_ent14 <= 5); counter_re_ent14 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "65-72",
        "vulnerabilityReason": "The function 'buyTicket_re_ent30' sends ether to the last player using 'lastPlayer_re_ent30.send(jackpot_re_ent30)' before updating 'lastPlayer_re_ent30' and 'jackpot_re_ent30'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent30() public { uint tempJackpot = jackpot_re_ent30; address payable tempLastPlayer = lastPlayer_re_ent30; lastPlayer_re_ent30 = msg.sender; jackpot_re_ent30 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "78-83",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent8' sends ether to msg.sender using a call before updating 'balances_re_ent8[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent8 () public { uint amount = balances_re_ent8[msg.sender]; balances_re_ent8[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent8[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "86-92",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent31' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent31[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public { require(balances_re_ent31[msg.sender] >= _weiToWithdraw); balances_re_ent31[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent31[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "94-102",
        "vulnerabilityReason": "The function 'bug_re_ent13' sends ether to msg.sender using a call before updating 'not_called_re_ent13'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent13() public { require(not_called_re_ent13); not_called_re_ent13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { not_called_re_ent13 = true; revert(); }}"
    },
    {
        "vulnerableLines": "108-117",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent26' sends ether to msg.sender using a call before updating 'userBalance_re_ent26[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent26() public { uint amount = userBalance_re_ent26[msg.sender]; userBalance_re_ent26[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent26[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "119-126",
        "vulnerabilityReason": "The function 'bug_re_ent20' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent20'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent20() public { require(not_called_re_ent20); not_called_re_ent20 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent20 = true; revert(); }}"
    },
    {
        "vulnerableLines": "134-141",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent32[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent32() public { uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent32); }"
    },
    {
        "vulnerableLines": "143-149",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent38' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent38[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public { require(balances_re_ent38[msg.sender] >= _weiToWithdraw); balances_re_ent38[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent38[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "151-158",
        "vulnerabilityReason": "The function 'claimReward_re_ent4' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent4[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent4() public { uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender]; redeemableEther_re_ent4[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent4); }"
    },
    {
        "vulnerableLines": "168-175",
        "vulnerabilityReason": "The function 'claimReward_re_ent39' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent39[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent39() public { uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender]; redeemableEther_re_ent39[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent39); }"
    },
    {
        "vulnerableLines": "184-188",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent36' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent36[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent36 () public { uint amount = balances_re_ent36[msg.sender]; balances_re_ent36[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent36[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "201-208",
        "vulnerabilityReason": "The function 'callme_re_ent35' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent35'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent35() public { require(counter_re_ent35 <= 5); counter_re_ent35 += 1; if (!msg.sender.send(10 ether)){ revert(); }}"
    },
    {
        "vulnerableLines": "213-222",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent40' sends ether to msg.sender using a call before updating 'userBalance_re_ent40[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent40() public { uint amount = userBalance_re_ent40[msg.sender]; userBalance_re_ent40[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent40[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "229-238",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent33' sends ether to msg.sender using a call before updating 'userBalance_re_ent33[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent33() public { uint amount = userBalance_re_ent33[msg.sender]; userBalance_re_ent33[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent33[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "243-250",
        "vulnerabilityReason": "The function 'bug_re_ent27' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent27'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent27() public { require(not_called_re_ent27); not_called_re_ent27 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent27 = true; revert(); }}"
    },
    {
        "vulnerableLines": "229-235",
        "vulnerabilityReason": "The function 'claimReward_re_ent18' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent18[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent18() public { uint transferValue_re_ent18 = redeemableEther_re_ent18[msg.sender]; redeemableEther_re_ent18[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent18); }"
    },
    {
        "vulnerableLines": "237-241",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent29' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent29[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent29 () public { uint amount = balances_re_ent29[msg.sender]; balances_re_ent29[msg.sender] = 0; if (msg.sender.send(amount)) { balances_re_ent29[msg.sender] = 0; }}"
    },
    {
        "vulnerableLines": "244-250",
        "vulnerabilityReason": "The function 'bug_re_ent6' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent6'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent6() public{ require(not_called_re_ent6); not_called_re_ent6 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent6 = true; revert(); }}"
    },
    {
        "vulnerableLines": "252-259",
        "vulnerabilityReason": "The function 'buyTicket_re_ent16' sends ether to the last player using 'lastPlayer_re_ent16.send(jackpot_re_ent16)' before updating 'lastPlayer_re_ent16' and 'jackpot_re_ent16'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent16() public { uint tempJackpot = jackpot_re_ent16; address payable tempLastPlayer = lastPlayer_re_ent16; lastPlayer_re_ent16 = msg.sender; jackpot_re_ent16 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "261-267",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent24' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent24[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent24(uint256 _weiToWithdraw) public { require(balances_re_ent24[msg.sender] >= _weiToWithdraw); balances_re_ent24[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent24[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "269-277",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent5' sends ether to msg.sender using 'msg.sender.send' before updating 'userBalance_re_ent5[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent5() public { uint amount = userBalance_re_ent5[msg.sender]; userBalance_re_ent5[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent5[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "279-283",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent15' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent15[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent15() public { uint amount = balances_re_ent15[msg.sender]; balances_re_ent15[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent15[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "285-292",
        "vulnerabilityReason": "The function 'callme_re_ent28' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent28'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent28() public { require(counter_re_ent28 <= 5); counter_re_ent28 += 1; if (!msg.sender.send(10 ether)) { counter_re_ent28 -= 1; revert(); }}"
    },
    {
        "vulnerableLines": "294-301",
        "vulnerabilityReason": "The function 'bug_re_ent34' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent34'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent34() public { require(not_called_re_ent34); not_called_re_ent34 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent34 = true; revert(); }}"
    },
    {
        "vulnerableLines": "303-310",
        "vulnerabilityReason": "The function 'callme_re_ent21' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent21'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent21() public { require(counter_re_ent21 <= 5); counter_re_ent21 += 1; if (!msg.sender.send(10 ether)) { counter_re_ent21 -= 1; revert(); }}"
    },
    {
        "vulnerableLines": "313-319",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent10' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent10[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent10(uint256 _weiToWithdraw) public { require(balances_re_ent10[msg.sender] >= _weiToWithdraw); balances_re_ent10[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent10[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "321-326",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent21' sends ether to msg.sender using a call before updating 'balances_re_ent21[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly calling the function before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent21() public { uint amount = balances_re_ent21[msg.sender]; balances_re_ent21[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent21[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "328-336",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent12' sends ether to msg.sender using 'msg.sender.send' before updating 'userBalance_re_ent12[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly calling the function before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent12() public { uint amount = userBalance_re_ent12[msg.sender]; userBalance_re_ent12[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent12[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "338-345",
        "vulnerabilityReason": "The function 'claimReward_re_ent11' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent11[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly calling the function before the balance is reset.",
        "fixedCode": "function claimReward_re_ent11() public { uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender]; redeemableEther_re_ent11[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent11); }"
    },
    {
        "vulnerableLines": "347-352",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent1' sends ether to msg.sender using a call before updating 'balances_re_ent1[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly calling the function before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent1() public { uint amount = balances_re_ent1[msg.sender]; balances_re_ent1[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent1[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "372-379",
        "vulnerabilityReason": "The function 'bug_re_ent41' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent41'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent41() public { require(not_called_re_ent41); not_called_re_ent41 = false; if(!msg.sender.send(1 ether)) { not_called_re_ent41 = true; revert(); }}"
    },
    {
        "vulnerableLines": "390-397",
        "vulnerabilityReason": "The function 'callme_re_ent42' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent42'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent42() public { require(counter_re_ent42 <= 5); counter_re_ent42 += 1; if(!msg.sender.send(10 ether)) { counter_re_ent42 -= 1; revert(); }}"
    },
    {
        "vulnerableLines": "422-429",
        "vulnerabilityReason": "The function 'buyTicket_re_ent2' sends ether to the last player using 'lastPlayer_re_ent2.send(jackpot_re_ent2)' before updating 'lastPlayer_re_ent2' and 'jackpot_re_ent2'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent2() public { uint tempJackpot = jackpot_re_ent2; address payable tempLastPlayer = lastPlayer_re_ent2; lastPlayer_re_ent2 = msg.sender; jackpot_re_ent2 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { lastPlayer_re_ent2 = tempLastPlayer; jackpot_re_ent2 = tempJackpot; revert(); }}"
    },
    {
        "vulnerableLines": "440-447",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' sends ether to msg.sender using a call before updating 'balances_re_ent17[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public { require(balances_re_ent17[msg.sender] >= _weiToWithdraw); uint256 amount = balances_re_ent17[msg.sender]; balances_re_ent17[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); require(success); if (!success) { balances_re_ent17[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "452-459",
        "vulnerabilityReason": "The function 'buyTicket_re_ent37' sends ether to the last player using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent37() public { uint tempJackpot = jackpot_re_ent37; address payable tempLastPlayer = lastPlayer_re_ent37; lastPlayer_re_ent37 = msg.sender; jackpot_re_ent37 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { lastPlayer_re_ent37 = tempLastPlayer; jackpot_re_ent37 = tempJackpot; revert(); }}"
    },
    {
        "vulnerableLines": "473-480",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent3' sends ether to msg.sender using a call before updating 'balances_re_ent3[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); uint256 amount = balances_re_ent3[msg.sender]; balances_re_ent3[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); require(success); if (!success) { balances_re_ent3[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "509-517",
        "vulnerabilityReason": "The function 'buyTicket_re_ent9' sends ether to 'lastPlayer_re_ent9' using 'call.value' before updating 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the call operation before the state variables are properly updated.",
        "fixedCode": "function buyTicket_re_ent9() public { uint tempJackpot = jackpot_re_ent9; address payable tempLastPlayer = lastPlayer_re_ent9; lastPlayer_re_ent9 = msg.sender; jackpot_re_ent9 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "550-556",
        "vulnerabilityReason": "The function 'claimReward_re_ent25' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent25[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer operation before the state variable is properly updated.",
        "fixedCode": "function claimReward_re_ent25() public { uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender]; redeemableEther_re_ent25[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent25); }"
    },
    {
        "vulnerableLines": "572-580",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent19' sends ether to msg.sender using 'msg.sender.send' before updating 'userBalance_re_ent19[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent19() public { uint amount = userBalance_re_ent19[msg.sender]; userBalance_re_ent19[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent19[msg.sender] = amount; revert(); } }"
    },
    {
        "vulnerableLines": "590-598",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent26' sends ether to msg.sender using 'call.value' before updating 'userBalance_re_ent26[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent26() public { uint amount = userBalance_re_ent26[msg.sender]; userBalance_re_ent26[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent26[msg.sender] = amount; revert(); } }"
    },
    {
        "vulnerableLines": "609-616",
        "vulnerabilityReason": "The function 'bug_re_ent20' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent20'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent20() public { require(not_called_re_ent20); not_called_re_ent20 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent20 = true; revert(); } }"
    },
    {
        "vulnerableLines": "626-633",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' sends ether to msg.sender using 'msg.sender.transfer(transferValue_re_ent32)' before updating 'redeemableEther_re_ent32[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent32() public { uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent32); }"
    },
    {
        "vulnerableLines": "693-699",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent38' sends ether to msg.sender using 'msg.sender.send(_weiToWithdraw)' before updating 'balances_re_ent38[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public { require(balances_re_ent38[msg.sender] >= _weiToWithdraw); balances_re_ent38[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent38[msg.sender] += _weiToWithdraw; revert(); } }"
    },
    {
        "vulnerableLines": "701-719",
        "vulnerabilityReason": "The function 'userWithdraw' sends ether to msg.sender using 'msg.sender.transfer(avaliableIA)' before updating the user's investment-related state variables. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer operation before the state is properly updated.",
        "fixedCode": "function userWithdraw() external { User storage user = userMapping[msg.sender]; if (user.currentInvestAmount > 0) { uint256 avaliableIA = user.currentInvestAmount; if (!isInvestExpired(user)) { avaliableIA = getAbortInvestAmount(user); } uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user); user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA); user.currentInvestTime = 0; user.currentInvestAmount = 0; user.currentInvestCycle = 0; user.currentlevel = 0; user.currentStaticCommissionRatio = 0; user.currentStaticCommissionWithdrawAmount = 0; user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA); totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA); uint256 amountToTransfer = avaliableIA; msg.sender.transfer(amountToTransfer); } }"
    },
    {
        "vulnerableLines": "722-728",
        "vulnerabilityReason": "The function 'claimReward_re_ent4' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent4[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent4() public { uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender]; redeemableEther_re_ent4[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent4); }"
    },
    {
        "vulnerableLines": "749-750",
        "vulnerabilityReason": "The function 'userWithdrawCommission' sends ether to msg.sender using 'msg.sender.transfer(avaliableWithdrawAmount)' before updating the relevant user's balances. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before all balances are updated.",
        "fixedCode": "function userWithdrawCommission() external { User storage user = userMapping[msg.sender]; uint256 avaliableDCB = user.dynamicCommissionBalance; uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user); uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA); uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB); if (avaliableWithdrawAmount >= ONE_ETH.div(10)) { user.staticCommissionBalance = 0; user.dynamicCommissionBalance = 0; user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA); user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB); user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB); user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount); totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB); totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB); totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount); if (avaliableSCB > 0) { addStaticCommissionRecord(msg.sender, now, avaliableSCB); } uint256 amount = avaliableWithdrawAmount; msg.sender.transfer(amount); } }"
    },
    {
        "vulnerableLines": "752-759",
        "vulnerabilityReason": "The function 'callme_re_ent7' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent7'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent7() public{ require(counter_re_ent7 <= 5); counter_re_ent7 += 1; if(!msg.sender.send(10 ether)){ revert(); } }"
    },
    {
        "vulnerableLines": "761-767",
        "vulnerabilityReason": "The function 'engineerWithdraw' sends ether to msg.sender using 'msg.sender.transfer(avaliableAmount)' before updating 'engineerFunds' and 'engineerWithdrawAmount'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the state is properly updated.",
        "fixedCode": "function engineerWithdraw() external onlyEngineer { uint256 avaliableAmount = engineerFunds; if (avaliableAmount > 0) { engineerFunds = 0; engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount); uint256 amount = avaliableAmount; msg.sender.transfer(amount); } }"
    },
    {
        "vulnerableLines": "769-776",
        "vulnerabilityReason": "The function 'buyTicket_re_ent23' sends ether to the last player using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "778-784",
        "vulnerabilityReason": "The function 'operatorWithdraw' sends ether to msg.sender using 'msg.sender.transfer(avaliableAmount)' before updating 'operatorFunds' and 'operatorWithdrawAmount'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the state is properly updated.",
        "fixedCode": "function operatorWithdraw() external onlyOwner { uint256 avaliableAmount = operatorFunds; if (avaliableAmount > 0) { operatorFunds = 0; operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount); uint256 amount = avaliableAmount; msg.sender.transfer(amount); } }"
    },
    {
        "vulnerableLines": "786-793",
        "vulnerabilityReason": "The function 'callme_re_ent14' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent14'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent14() public{ require(counter_re_ent14 <= 5); counter_re_ent14 += 1; if(!msg.sender.send(10 ether)){ revert(); } }"
    },
    {
        "vulnerableLines": "804-811",
        "vulnerabilityReason": "The function 'buyTicket_re_ent30' sends ether to the last player using 'lastPlayer_re_ent30.send(jackpot_re_ent30)' before updating 'lastPlayer_re_ent30' and 'jackpot_re_ent30'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent30() public { uint tempJackpot = jackpot_re_ent30; address payable tempLastPlayer = lastPlayer_re_ent30; lastPlayer_re_ent30 = msg.sender; jackpot_re_ent30 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "830-835",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent8' sends ether to msg.sender using a call before updating 'balances_re_ent8[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent8 () public { uint amount = balances_re_ent8[msg.sender]; balances_re_ent8[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent8[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "842-848",
        "vulnerabilityReason": "The function 'claimReward_re_ent39' sends ether to msg.sender using 'msg.sender.transfer(transferValue_re_ent39)' before updating 'redeemableEther_re_ent39[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent39() public { uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender]; redeemableEther_re_ent39[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent39); }"
    },
    {
        "vulnerableLines": "870-874",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent36' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent36[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent36() public { uint amount = balances_re_ent36[msg.sender]; balances_re_ent36[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent36[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "896-903",
        "vulnerabilityReason": "The function 'callme_re_ent35' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent35'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent35() public { require(counter_re_ent35 <= 5); counter_re_ent35 += 1; if (!msg.sender.send(10 ether)) { revert(); }}"
    },
    {
        "vulnerableLines": "925-934",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent40' sends ether to msg.sender using a call before updating 'userBalance_re_ent40[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent40() public { uint amount = userBalance_re_ent40[msg.sender]; userBalance_re_ent40[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent40[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "987-995",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent33' sends ethers to msg.sender using a call before updating 'userBalance_re_ent33[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent33() public { uint amount = userBalance_re_ent33[msg.sender]; userBalance_re_ent33[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent33[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "1003-1010",
        "vulnerabilityReason": "The function 'bug_re_ent27' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent27'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent27() public { require(not_called_re_ent27); not_called_re_ent27 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent27 = true; revert(); }}"
    },
    {
        "vulnerableLines": "1048-1054",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent31' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent31[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent31(uint256 _weiToWithdraw) public { require(balances_re_ent31[msg.sender] >= _weiToWithdraw); balances_re_ent31[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent31[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "1066-1074",
        "vulnerabilityReason": "The function 'bug_re_ent13' sends ether to msg.sender using a call before updating 'not_called_re_ent13'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent13() public { require(not_called_re_ent13); not_called_re_ent13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { not_called_re_ent13 = true; revert(); }}"
    }
]