[
    {
        "vulnerableLines": "1-6",
        "vulnerabilityReason": "The function 'buyTicket_re_ent2' sends ether to the last player using 'lastPlayer_re_ent2.send(jackpot_re_ent2)' before updating 'lastPlayer_re_ent2' and 'jackpot_re_ent2'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent2() public { uint tempJackpot = jackpot_re_ent2; address payable tempLastPlayer = lastPlayer_re_ent2; lastPlayer_re_ent2 = msg.sender; jackpot_re_ent2 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "20-27",
        "vulnerabilityReason": "The function 'buyTicket_re_ent30' sends ether to the last player using 'lastPlayer_re_ent30.send(jackpot_re_ent30)' before updating 'lastPlayer_re_ent30' and 'jackpot_re_ent30'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent30() public { uint tempJackpot = jackpot_re_ent30; address payable tempLastPlayer = lastPlayer_re_ent30; lastPlayer_re_ent30 = msg.sender; jackpot_re_ent30 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "32-37",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent8' sends ether to msg.sender using a call before updating 'balances_re_ent8[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent8() public { uint amount = balances_re_ent8[msg.sender]; balances_re_ent8[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(''); if (!success) { balances_re_ent8[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "46-53",
        "vulnerabilityReason": "The function 'claimReward_re_ent39' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent39[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent39() public { uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender]; redeemableEther_re_ent39[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent39); }"
    },
    {
        "vulnerableLines": "61-65",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent36' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent36[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent36() public { uint amount = balances_re_ent36[msg.sender]; balances_re_ent36[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent36[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "76-83",
        "vulnerabilityReason": "The function 'callme_re_ent35' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent35'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent35() public { require(counter_re_ent35 <= 5); counter_re_ent35 += 1; if (!msg.sender.send(10 ether)) { revert(); }}"
    }
]