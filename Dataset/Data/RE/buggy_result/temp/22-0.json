[
    {
        "vulnerableLines": "9-13",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent15' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent15[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent15() public { uint amount = balances_re_ent15[msg.sender]; balances_re_ent15[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent15[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "19-26",
        "vulnerabilityReason": "The function 'bug_re_ent41' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent41'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent41() public { require(not_called_re_ent41); not_called_re_ent41 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent41 = true; revert(); }}"
    },
    {
        "vulnerableLines": "36-43",
        "vulnerabilityReason": "The function 'callme_re_ent42' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent42'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent42() public { require(counter_re_ent42 <= 5); counter_re_ent42 += 1; if (!msg.sender.send(10 ether)) { counter_re_ent42 -= 1; revert(); }}"
    },
    {
        "vulnerableLines": "47-55",
        "vulnerabilityReason": "The function 'claimReward_re_ent39' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent39[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent39() public { uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender]; redeemableEther_re_ent39[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent39); }"
    },
    {
        "vulnerableLines": "57-61",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent36' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent36[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent36() public { uint amount = balances_re_ent36[msg.sender]; balances_re_ent36[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent36[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "81-87",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' sends ether to msg.sender using a call before updating 'balances_re_ent17[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent17(uint256 _weiToWithdraw) public { require(balances_re_ent17[msg.sender] >= _weiToWithdraw); uint amount = balances_re_ent17[msg.sender]; balances_re_ent17[msg.sender] = 0; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); if (!success) { balances_re_ent17[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "93-101",
        "vulnerabilityReason": "The function 'buyTicket_re_ent37' sends ether to the last player using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent37() public { uint tempJackpot = jackpot_re_ent37; address payable tempLastPlayer = lastPlayer_re_ent37; lastPlayer_re_ent37 = msg.sender; jackpot_re_ent37 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { lastPlayer_re_ent37 = tempLastPlayer; jackpot_re_ent37 = tempJackpot; revert(); }}"
    },
    {
        "vulnerableLines": "103-110",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent3' sends ether to msg.sender using a call before updating 'balances_re_ent3[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent3(uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); uint amount = balances_re_ent3[msg.sender]; balances_re_ent3[msg.sender] = 0; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); if (!success) { balances_re_ent3[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "112-120",
        "vulnerabilityReason": "The function 'buyTicket_re_ent9' sends ether to the last player using 'lastPlayer_re_ent9.call.value(jackpot_re_ent9)' before updating 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the call operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent9() public { uint tempJackpot = jackpot_re_ent9; address payable tempLastPlayer = lastPlayer_re_ent9; lastPlayer_re_ent9 = msg.sender; jackpot_re_ent9 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); if (!success) { lastPlayer_re_ent9 = tempLastPlayer; jackpot_re_ent9 = tempJackpot; revert(); }}"
    }
]