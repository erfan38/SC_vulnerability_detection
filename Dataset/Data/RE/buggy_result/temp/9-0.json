[
    {
        "vulnerableLines": "54-62",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' sends ether using 'msg.sender.call.value(_weiToWithdraw)' before updating 'balances_re_ent17[msg.sender]'. This makes it vulnerable to reentrancy attacks as a reentrant call could be made before the balance is updated, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public { require(balances_re_ent17[msg.sender] >= _weiToWithdraw); uint amount = _weiToWithdraw; balances_re_ent17[msg.sender] -= amount; (bool success,)= msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "68-75",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' sends ether using 'msg.sender.transfer' before updating 'redeemableEther_re_ent32[msg.sender]'. This makes it vulnerable to reentrancy attacks as a reentrant call could be made before the balance is reset, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent32() public { require(redeemableEther_re_ent32[msg.sender] > 0); uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent32); }"
    },
    {
        "vulnerableLines": "86-94",
        "vulnerabilityReason": "The function 'buyTicket_re_ent37' sends ether using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent37() public { uint tempJackpot = jackpot_re_ent37; address payable tempLastPlayer = lastPlayer_re_ent37; lastPlayer_re_ent37 = msg.sender; jackpot_re_ent37 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "96-103",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent3' sends ether using 'msg.sender.call.value(_weiToWithdraw)' before updating 'balances_re_ent3[msg.sender]'. This makes it vulnerable to reentrancy attacks as a reentrant call could be made before the balance is updated, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); uint amount = _weiToWithdraw; balances_re_ent3[msg.sender] -= amount; (bool success,)= msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "105-113",
        "vulnerabilityReason": "The function 'buyTicket_re_ent9' sends ether using 'lastPlayer_re_ent9.call.value(jackpot_re_ent9)' before updating 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent9() public { uint tempJackpot = jackpot_re_ent9; address payable tempLastPlayer = lastPlayer_re_ent9; lastPlayer_re_ent9 = msg.sender; jackpot_re_ent9 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); if (!success) { revert(); }}"
    }
]