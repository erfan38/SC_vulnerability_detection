[
    {
        "vulnerableLines": "55-62",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent40' sends ether to msg.sender using a call before updating 'userBalance_re_ent40[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent40() public { uint amount = userBalance_re_ent40[msg.sender]; userBalance_re_ent40[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent40[msg.sender] = amount; } }"
    },
    {
        "vulnerableLines": "71-75",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent10' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent10[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent10(uint256 _weiToWithdraw) public { require(balances_re_ent10[msg.sender] >= _weiToWithdraw); uint amount = _weiToWithdraw; balances_re_ent10[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(amount)) { balances_re_ent10[msg.sender] += amount; revert(); } }"
    },
    {
        "vulnerableLines": "90-94",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent21' sends ether to msg.sender using a call before updating 'balances_re_ent21[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent21() public { uint amount = balances_re_ent21[msg.sender]; balances_re_ent21[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent21[msg.sender] = amount; } }"
    },
    {
        "vulnerableLines": "111-118",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent12' sends ether to msg.sender using 'msg.sender.send' before updating 'userBalance_re_ent12[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent12() public { uint amount = userBalance_re_ent12[msg.sender]; userBalance_re_ent12[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent12[msg.sender] = amount; revert(); } }"
    }
]