[
    {
        "vulnerableLines": "1-5",
        "vulnerabilityReason": "The function 'sell' performs a transfer to 'msg.sender' using 'msg.sender.transfer(amount * sellPrice)' after a balance check and before the state changes. Although the comment indicates awareness of reentrancy, this can still potentially lead to a reentrancy attack if an attacker can repeatedly call 'sell' before the state changes propagate.",
        "potentialSecurityRisk": "An attacker could repeatedly call 'sell' before the state changes propagate, allowing them to drain the contract of its ether.",
        "fixedCode": "function sell(uint256 amount) public { address myAddress = address(this); require(myAddress.balance >= amount * sellPrice); uint256 etherAmount = amount * sellPrice; _transfer(msg.sender, address(this), amount); msg.sender.transfer(etherAmount); }"
    },
    {
        "vulnerableLines": "7-14",
        "vulnerabilityReason": "The function 'callme_re_ent35' sends ether to 'msg.sender' using 'msg.sender.send(10 ether)' before updating 'counter_re_ent35'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent35() public { require(counter_re_ent35 <= 5); counter_re_ent35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    }
]