[
    {
        "vulnerableLines": "1-7",
        "vulnerabilityReason": "The function 'callme_re_ent7' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating the counter_re_ent7. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent7() public { require(counter_re_ent7 <= 5); counter_re_ent7 += 1; if(!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "10-16",
        "vulnerabilityReason": "The function 'buyTicket_re_ent23' sends ether to the last player using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "19-27",
        "vulnerabilityReason": "The function 'bug_re_ent13' sends ether to msg.sender using a call before updating 'not_called_re_ent13'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent13() public { require(not_called_re_ent13); not_called_re_ent13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { not_called_re_ent13 = true; revert(); }}"
    },
    {
        "vulnerableLines": "35-43",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent40' sends ether to msg.sender using a call before updating 'userBalance_re_ent40[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent40() public { uint amount = userBalance_re_ent40[msg.sender]; userBalance_re_ent40[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent40[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "64-73",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent33' sends ether to msg.sender using a call before updating 'userBalance_re_ent33[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent33() public { uint amount = userBalance_re_ent33[msg.sender]; userBalance_re_ent33[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent33[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "80-87",
        "vulnerabilityReason": "The function 'bug_re_ent27' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent27'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent27() public { require(not_called_re_ent27); not_called_re_ent27 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent27 = true; revert(); }}"
    }
]