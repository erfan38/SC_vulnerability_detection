[
    {
        "vulnerableLines": "13-20",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' sends ether to msg.sender using call before updating 'balances_re_ent17[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent17(uint256 _weiToWithdraw) public { require(balances_re_ent17[msg.sender] >= _weiToWithdraw); uint amount = _weiToWithdraw; balances_re_ent17[msg.sender] -= amount; (bool success, ) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "22-29",
        "vulnerabilityReason": "The function 'buyTicket_re_ent37' sends ether to the last player using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent37() public { uint tempJackpot = jackpot_re_ent37; address payable tempLastPlayer = lastPlayer_re_ent37; lastPlayer_re_ent37 = msg.sender; jackpot_re_ent37 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "31-38",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent3' sends ether to msg.sender using call before updating 'balances_re_ent3[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent3(uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); uint amount = _weiToWithdraw; balances_re_ent3[msg.sender] -= amount; (bool success, ) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "42-50",
        "vulnerabilityReason": "The function 'buyTicket_re_ent9' sends ether to the last player using 'lastPlayer_re_ent9.call.value(jackpot_re_ent9)('')' before updating 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent9() public { uint tempJackpot = jackpot_re_ent9; address payable tempLastPlayer = lastPlayer_re_ent9; lastPlayer_re_ent9 = msg.sender; jackpot_re_ent9 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); if (!success) { revert(); }}"
    },
    {
        "vulnerableLines": "52-59",
        "vulnerabilityReason": "The function 'claimReward_re_ent25' sends ether to msg.sender using transfer before updating 'redeemableEther_re_ent25[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent25() public { require(redeemableEther_re_ent25[msg.sender] > 0); uint amount = redeemableEther_re_ent25[msg.sender]; redeemableEther_re_ent25[msg.sender] = 0; msg.sender.transfer(amount); }"
    },
    {
        "vulnerableLines": "61-69",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent19' sends ether to msg.sender using send before updating 'userBalance_re_ent19[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent19() public { uint amount = userBalance_re_ent19[msg.sender]; userBalance_re_ent19[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent19[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "75-83",
        "vulnerabilityReason": "The function 'bug_re_ent6' sends ether to msg.sender using send before updating 'not_called_re_ent6'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent6() public { require(not_called_re_ent6); not_called_re_ent6 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent6 = true; revert(); }}"
    },
    {
        "vulnerableLines": "85-92",
        "vulnerabilityReason": "The function 'buyTicket_re_ent16' sends ether to the last player using 'lastPlayer_re_ent16.send(jackpot_re_ent16)' before updating 'lastPlayer_re_ent16' and 'jackpot_re_ent16'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent16() public { uint tempJackpot = jackpot_re_ent16; address payable tempLastPlayer = lastPlayer_re_ent16; lastPlayer_re_ent16 = msg.sender; jackpot_re_ent16 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "94-100",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent24' sends ether to msg.sender using send before updating 'balances_re_ent24[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent24(uint256 _weiToWithdraw) public { require(balances_re_ent24[msg.sender] >= _weiToWithdraw); uint amount = _weiToWithdraw; balances_re_ent24[msg.sender] -= amount; if (!msg.sender.send(amount)) { balances_re_ent24[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "103-111",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent5' sends ether to msg.sender using send before updating 'userBalance_re_ent5[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent5() public { uint amount = userBalance_re_ent5[msg.sender]; userBalance_re_ent5[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent5[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "113-117",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent15' sends ether to msg.sender using send before updating 'balances_re_ent15[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent15() public { uint amount = balances_re_ent15[msg.sender]; balances_re_ent15[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent15[msg.sender] = amount; }}"
    }
]