[
    {
        "vulnerableLines": "1-7",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent3' sends ether to msg.sender using '.call.value(_weiToWithdraw)('')' before updating 'balances_re_ent3[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is updated.",
        "fixedCode": "function withdrawFunds_re_ent3(uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); balances_re_ent3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "11-19",
        "vulnerabilityReason": "The function 'bug_re_ent13' sends ether to msg.sender using '.call.value(1 ether)('')' before updating 'not_called_re_ent13'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent13() public{ require(not_called_re_ent13); not_called_re_ent13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { not_called_re_ent13 = true; revert(); }}"
    },
    {
        "vulnerableLines": "28-35",
        "vulnerabilityReason": "The function 'buyTicket_re_ent23' sends ether to the last player using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "48-55",
        "vulnerabilityReason": "The function 'callme_re_ent14' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating the counter_re_ent14. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent14() public{ require(counter_re_ent14 <= 5); counter_re_ent14 += 1; if (!msg.sender.send(10 ether)){ revert(); }}"
    },
    {
        "vulnerableLines": "66-73",
        "vulnerabilityReason": "The function 'buyTicket_re_ent30' sends ether to the last player using 'lastPlayer_re_ent30.send(jackpot_re_ent30)' before updating 'lastPlayer_re_ent30' and 'jackpot_re_ent30'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent30() public { uint tempJackpot = jackpot_re_ent30; address payable tempLastPlayer = lastPlayer_re_ent30; lastPlayer_re_ent30 = msg.sender; jackpot_re_ent30 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "82-87",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent8' sends ether to msg.sender using a call before updating 'balances_re_ent8[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent8() public { uint amount = balances_re_ent8[msg.sender]; balances_re_ent8[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent8[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "96-103",
        "vulnerabilityReason": "The function 'claimReward_re_ent39' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent39[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent39() public { uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender]; redeemableEther_re_ent39[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent39); }"
    },
    {
        "vulnerableLines": "110-114",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent36' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent36[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent36() public { uint amount = balances_re_ent36[msg.sender]; balances_re_ent36[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent36[msg.sender] = amount; }}"
    }
]