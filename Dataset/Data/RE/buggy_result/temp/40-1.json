[
    {
        "vulnerableLines": "95-102",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' uses 'msg.sender.call.value' to send funds before updating the balance of the user. This can result in reentrancy vulnerability as the user can make repeated withdrawals before the state is updated.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is updated to reflect the withdrawal.",
        "fixedCode": "mapping(address => uint) balances_re_ent17;\nfunction withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public {\n  require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n  balances_re_ent17[msg.sender] -= _weiToWithdraw;\n  (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\");\n  require(success); \n}"
    },
    {
        "vulnerableLines": "105-112",
        "vulnerabilityReason": "The function 'buyTicket_re_ent37' sends ether to the last player using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. This creates a reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function to deplete the jackpot before the state variables are updated.",
        "fixedCode": "address payable lastPlayer_re_ent37;\nuint jackpot_re_ent37;\nfunction buyTicket_re_ent37() public {\n  uint tempJackpot = jackpot_re_ent37;\n  address payable tempLastPlayer = lastPlayer_re_ent37;\n  lastPlayer_re_ent37 = msg.sender;\n  jackpot_re_ent37 = address(this).balance;\n  if (!tempLastPlayer.send(tempJackpot)) { \n    revert(); \n  }\n}"
    }
]