[
    {
        "vulnerableLines": "1-7",
        "vulnerabilityReason": "The function 'bug_re_ent34' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent34'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent34() public { require(not_called_re_ent34); not_called_re_ent34 = false; if( ! msg.sender.send(1 ether) ) { revert(); }}"
    },
    {
        "vulnerableLines": "9-16",
        "vulnerabilityReason": "The function 'callme_re_ent21' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent21'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent21() public { require(counter_re_ent21 <= 5); counter_re_ent21 += 1; if( ! msg.sender.send(10 ether) ) { revert(); }}"
    },
    {
        "vulnerableLines": "18-24",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent10' sends ether to msg.sender using 'msg.sender.send(_weiToWithdraw)' before updating 'balances_re_ent10[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is updated.",
        "fixedCode": "function withdrawFunds_re_ent10(uint256 _weiToWithdraw) public { require(balances_re_ent10[msg.sender] >= _weiToWithdraw); balances_re_ent10[msg.sender] -= _weiToWithdraw; if( ! msg.sender.send(_weiToWithdraw) ){ balances_re_ent10[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "26-31",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent21' sends ether to msg.sender using 'msg.sender.call.value(balances_re_ent21[msg.sender])' before updating 'balances_re_ent21[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is updated.",
        "fixedCode": "function withdraw_balances_re_ent21() public { uint amount = balances_re_ent21[msg.sender]; balances_re_ent21[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if( ! success ) { balances_re_ent21[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "33-41",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent12' sends ether to msg.sender using 'msg.sender.send(userBalance_re_ent12[msg.sender])' before updating 'userBalance_re_ent12[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is updated.",
        "fixedCode": "function withdrawBalance_re_ent12() public { uint amount = userBalance_re_ent12[msg.sender]; userBalance_re_ent12[msg.sender] = 0; if( ! msg.sender.send(amount) ) { userBalance_re_ent12[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "43-50",
        "vulnerabilityReason": "The function 'claimReward_re_ent11' sends ether to msg.sender using 'msg.sender.transfer(transferValue_re_ent11)' before updating 'redeemableEther_re_ent11[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer operation before the balance is updated.",
        "fixedCode": "function claimReward_re_ent11() public { uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender]; redeemableEther_re_ent11[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent11); }"
    },
    {
        "vulnerableLines": "53-58",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent1' sends ether to msg.sender using 'msg.sender.call.value(balances_re_ent1[msg.sender])' before updating 'balances_re_ent1[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is updated.",
        "fixedCode": "function withdraw_balances_re_ent1() public { uint amount = balances_re_ent1[msg.sender]; balances_re_ent1[msg.sender] = 0; (bool success,) =msg.sender.call.value(amount)(\"\"); if( ! success ) { balances_re_ent1[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "61-68",
        "vulnerabilityReason": "The function 'callme_re_ent35' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent35'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent35() public { require(counter_re_ent35 <= 5); counter_re_ent35 += 1; if( ! msg.sender.send(10 ether) ) { revert(); }}"
    },
    {
        "vulnerableLines": "70-79",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent40' sends ether to msg.sender using 'msg.sender.call.value(userBalance_re_ent40[msg.sender])' before updating 'userBalance_re_ent40[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is updated.",
        "fixedCode": "function withdrawBalance_re_ent40() public { uint amount = userBalance_re_ent40[msg.sender]; userBalance_re_ent40[msg.sender] = 0; (bool success,) =msg.sender.call.value(amount)(\"\"); if( ! success ) { userBalance_re_ent40[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "81-90",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent33' sends ether to msg.sender using 'msg.sender.call.value(userBalance_re_ent33[msg.sender])' before updating 'userBalance_re_ent33[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is updated.",
        "fixedCode": "function withdrawBalance_re_ent33() public { uint amount = userBalance_re_ent33[msg.sender]; userBalance_re_ent33[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if( ! success ) { userBalance_re_ent33[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "92-99",
        "vulnerabilityReason": "The function 'bug_re_ent27' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent27'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent27() public { require(not_called_re_ent27); not_called_re_ent27 = false; if( ! msg.sender.send(1 ether) ) { revert(); }}"
    },
    {
        "vulnerableLines": "101-107",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent31' sends ether to msg.sender using 'msg.sender.send(_weiToWithdraw)' before updating 'balances_re_ent31[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is updated.",
        "fixedCode": "function withdrawFunds_re_ent31(uint256 _weiToWithdraw) public { require(balances_re_ent31[msg.sender] >= _weiToWithdraw); balances_re_ent31[msg.sender] -= _weiToWithdraw; if( ! msg.sender.send(_weiToWithdraw) ) { balances_re_ent31[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "109-116",
        "vulnerabilityReason": "The function 'bug_re_ent13' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent13'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent13() public { require(not_called_re_ent13); not_called_re_ent13 = false; if( ! msg.sender.send(1 ether) ) { revert(); }}"
    }
]