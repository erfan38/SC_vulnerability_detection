[
    {
        "vulnerableLines": "211-221",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent40' sends ether to msg.sender using a low-level call before updating 'userBalance_re_ent40[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly triggering the send operation before the user balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent40() public{ uint amount = userBalance_re_ent40[msg.sender]; userBalance_re_ent40[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); if(!success) { userBalance_re_ent40[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "229-238",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent33' sends ether to msg.sender using a low-level call before updating 'userBalance_re_ent33[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly triggering the send operation before the user balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent33() public{ uint amount = userBalance_re_ent33[msg.sender]; userBalance_re_ent33[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); if(!success) { userBalance_re_ent33[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "243-250",
        "vulnerabilityReason": "The function 'bug_re_ent27' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent27'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly triggering the send operation before the boolean is updated.",
        "fixedCode": "function bug_re_ent27() public{ require(not_called_re_ent27); not_called_re_ent27 = false; if(!msg.sender.send(1 ether)) { not_called_re_ent27 = true; revert(); }}"
    },
    {
        "vulnerableLines": "86-92",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent31' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent31[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly triggering the send operation before the user balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent31(uint256 _weiToWithdraw) public { require(balances_re_ent31[msg.sender] >= _weiToWithdraw); balances_re_ent31[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent31[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "78-83",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent8' sends ether to msg.sender using a low-level call before updating 'balances_re_ent8[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly triggering the send operation before the user balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent8 () public { uint amount = balances_re_ent8[msg.sender]; balances_re_ent8[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent8[msg.sender] = amount; }}"
    }
]