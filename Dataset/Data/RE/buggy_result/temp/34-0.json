[
    {
        "vulnerableLines": "9-13",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent15' sends ether to msg.sender using a send operation before updating 'balances_re_ent15[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent15 () public { uint amount = balances_re_ent15[msg.sender]; balances_re_ent15[msg.sender] = 0; if (msg.sender.send(amount)) { balances_re_ent15[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "16-23",
        "vulnerabilityReason": "The function 'bug_re_ent27' sends ether to msg.sender using a send operation before updating 'not_called_re_ent27'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent27() public{ require(not_called_re_ent27); not_called_re_ent27 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent27 = true; revert(); }}"
    },
    {
        "vulnerableLines": "29-36",
        "vulnerabilityReason": "The function 'buyTicket_re_ent2' sends ether to the last player using 'lastPlayer_re_ent2.send(jackpot_re_ent2)' before updating 'lastPlayer_re_ent2' and 'jackpot_re_ent2'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent2() public { uint tempJackpot = jackpot_re_ent2; address payable tempLastPlayer = lastPlayer_re_ent2; lastPlayer_re_ent2 = msg.sender; jackpot_re_ent2 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "46-53",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' sends ether to msg.sender using a call before updating 'balances_re_ent17[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent17(uint256 _weiToWithdraw) public { require(balances_re_ent17[msg.sender] >= _weiToWithdraw); uint amount = balances_re_ent17[msg.sender]; balances_re_ent17[msg.sender] = 0; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); if (!success) { balances_re_ent17[msg.sender] = amount; }}"
    }
]