[
    {
        "vulnerableLines": "25-32",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent3' sends ether to msg.sender using 'msg.sender.call.value' before updating 'balances_re_ent3[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent3(uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); uint256 amount = _weiToWithdraw; balances_re_ent3[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); require(success); balances_re_ent3[msg.sender] -= amount; }"
    },
    {
        "vulnerableLines": "54-62",
        "vulnerabilityReason": "The function 'buyTicket_re_ent9' sends ether to the last player using 'lastPlayer_re_ent9.call.value' before updating 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the call operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent9() public { uint jackpot = jackpot_re_ent9; address payable tempLastPlayer = lastPlayer_re_ent9; lastPlayer_re_ent9 = msg.sender; jackpot_re_ent9 = address(this).balance; (bool success,) = tempLastPlayer.call.value(jackpot)(\"\"); if (!success) revert(); }"
    },
    {
        "vulnerableLines": "95-102",
        "vulnerabilityReason": "The function 'claimReward_re_ent25' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent25[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer operation before the state is properly updated.",
        "fixedCode": "function claimReward_re_ent25() public { require(redeemableEther_re_ent25[msg.sender] > 0); uint transferValue = redeemableEther_re_ent25[msg.sender]; redeemableEther_re_ent25[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "108-116",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent19' sends ether to msg.sender using 'msg.sender.send' before updating 'userBalance_re_ent19[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent19() public { uint amount = userBalance_re_ent19[msg.sender]; userBalance_re_ent19[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent19[msg.sender] = amount; revert(); } }"
    }
]