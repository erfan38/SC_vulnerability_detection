[
    {
        "vulnerableLines": "1-6",
        "vulnerabilityReason": "The function 'callme_re_ent35' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent35'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent35() public { require(counter_re_ent35<=5); counter_re_ent35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "106-108",
        "vulnerabilityReason": "The function 'cancelOrder' indirectly through 'userBalance_re_ent40' sends ether before updating balances, making a reentrant call possible.",
        "potentialSecurityRisk": "An attacker could drain the contract by making recursive calls to 'cancelOrder'.",
        "fixedCode": "function cancelOrder(uint256 orderiD) internal { require(Order[orderiD].status == 1, 'Order not active'); uint256 amount = userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]; userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress] = 0; Order[orderiD].status = 2; (bool success,) = Order[orderiD].userAddress.call.value(amount)(\"\"); if (!success) { Order[orderiD].status = 1; userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress] = amount; revert('Transfer failed'); } }"
    }
]