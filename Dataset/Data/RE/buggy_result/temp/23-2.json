[
    {
        "vulnerableLines": "1-7",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent32[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent32() public { uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent32); }"
    },
    {
        "vulnerableLines": "22-28",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent38' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent38[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public { require(balances_re_ent38[msg.sender] >= _weiToWithdraw); uint amountToSend = balances_re_ent38[msg.sender]; balances_re_ent38[msg.sender] = 0; require(msg.sender.send(amountToSend)); }"
    },
    {
        "vulnerableLines": "44-51",
        "vulnerabilityReason": "The function 'claimReward_re_ent4' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent4[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent4() public { uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender]; redeemableEther_re_ent4[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent4); }"
    },
    {
        "vulnerableLines": "67-74",
        "vulnerabilityReason": "The function 'callme_re_ent7' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent7'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the counter is incremented.",
        "fixedCode": "function callme_re_ent7() public { require(counter_re_ent7 <= 5); counter_re_ent7 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "89-96",
        "vulnerabilityReason": "The function 'buyTicket_re_ent23' sends ether to the last player using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23    = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "112-119",
        "vulnerabilityReason": "The function 'callme_re_ent14' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent14'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the counter is incremented.",
        "fixedCode": "function callme_re_ent14() public { require(counter_re_ent14 <= 5); counter_re_ent14 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    }
]