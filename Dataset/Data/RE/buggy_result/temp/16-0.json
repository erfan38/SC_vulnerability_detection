[
    {
        "vulnerableLines": "52-59",
        "vulnerabilityReason": "The function 'callme_re_ent21' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent21'. A reentrant call could be made, reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent21() public { require(counter_re_ent21 <= 5); counter_re_ent21 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "61-67",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent10' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent10[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent10 (uint256 _weiToWithdraw) public { require(balances_re_ent10[msg.sender] >= _weiToWithdraw); balances_re_ent10[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent10[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "69-74",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent21' uses a low-level call to send ether before updating 'balances_re_ent21[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent21() public { uint amount = balances_re_ent21[msg.sender]; balances_re_ent21[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent21[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "76-84",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent12' sends ether to msg.sender using 'msg.sender.send(userBalance_re_ent12[msg.sender])' before updating 'userBalance_re_ent12[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent12() public { uint amount = userBalance_re_ent12[msg.sender]; userBalance_re_ent12[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent12[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "86-93",
        "vulnerabilityReason": "The function 'claimReward_re_ent11' sends ether to msg.sender using 'msg.sender.transfer(transferValue_re_ent11)' before updating 'redeemableEther_re_ent11[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent11() public { uint transferValue = redeemableEther_re_ent11[msg.sender]; redeemableEther_re_ent11[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "95-100",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent1' uses a low-level call to send ether before updating 'balances_re_ent1[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent1() public { uint amount = balances_re_ent1[msg.sender]; balances_re_ent1[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent1[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "102-109",
        "vulnerabilityReason": "The function 'callme_re_ent35' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent35'. A reentrant call could be made, reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent35() public { require(counter_re_ent35 <= 5); counter_re_ent35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "111-120",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent40' uses a low-level call to send ether before updating 'userBalance_re_ent40[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent40() public { uint amount = userBalance_re_ent40[msg.sender]; userBalance_re_ent40[msg.sender] = 0; if (!msg.sender.call.value(amount)(\"\").gas(2300)) { userBalance_re_ent40[msg.sender] = amount; revert(); }}"
    }
]