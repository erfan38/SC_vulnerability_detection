[
    {
        "vulnerableLines": "1-6",
        "vulnerabilityReason": "Function 'buyTicket_re_ent23' sends ether to 'lastPlayer_re_ent23' using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call can be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw the jackpot amount by triggering reentrant calls.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "12-17",
        "vulnerabilityReason": "Function 'buyTicket_re_ent37' sends ether to 'lastPlayer_re_ent37' using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. A reentrant call can be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw the jackpot amount by triggering reentrant calls.",
        "fixedCode": "function buyTicket_re_ent37() public { uint tempJackpot = jackpot_re_ent37; address payable tempLastPlayer = lastPlayer_re_ent37; lastPlayer_re_ent37 = msg.sender; jackpot_re_ent37 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "20-25",
        "vulnerabilityReason": "Function 'withdrawFunds_re_ent3' sends ether to 'msg.sender' using 'msg.sender.call.value(_weiToWithdraw)(\"\")' before updating 'balances_re_ent3[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's balance is updated.",
        "fixedCode": "function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); uint amount = _weiToWithdraw; balances_re_ent3[msg.sender] -= amount; (bool success,) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "31-36",
        "vulnerabilityReason": "Function 'buyTicket_re_ent9' sends ether to 'lastPlayer_re_ent9' using 'lastPlayer_re_ent9.call.value(jackpot_re_ent9)(\"\")' before updating 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call can be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw the jackpot amount by triggering reentrant calls.",
        "fixedCode": "function buyTicket_re_ent9() public { uint tempJackpot = jackpot_re_ent9; address payable tempLastPlayer = lastPlayer_re_ent9; lastPlayer_re_ent9 = msg.sender; jackpot_re_ent9 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); if (!success) { revert(); }}"
    },
    {
        "vulnerableLines": "39-45",
        "vulnerabilityReason": "Function 'claimReward_re_ent25' sends ether to 'msg.sender' using 'msg.sender.transfer(transferValue_re_ent25)' before updating 'redeemableEther_re_ent25[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's redeemable ether is reset.",
        "fixedCode": "function claimReward_re_ent25() public { uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender]; redeemableEther_re_ent25[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent25); }"
    },
    {
        "vulnerableLines": "49-56",
        "vulnerabilityReason": "Function 'withdrawBalance_re_ent19' sends ether to 'msg.sender' using 'msg.sender.send(userBalance_re_ent19[msg.sender])' before updating 'userBalance_re_ent19[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent19() public { uint amount = userBalance_re_ent19[msg.sender]; userBalance_re_ent19[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent19[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "60-67",
        "vulnerabilityReason": "Function 'withdrawBalance_re_ent26' sends ether to 'msg.sender' using 'msg.sender.call.value(userBalance_re_ent26[msg.sender])(\"\")' before updating 'userBalance_re_ent26[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent26() public { uint amount = userBalance_re_ent26[msg.sender]; userBalance_re_ent26[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_re_ent26[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "71-75",
        "vulnerabilityReason": "Function 'withdrawFunds_re_ent31' sends ether to 'msg.sender' using 'msg.sender.send(_weiToWithdraw)' before updating 'balances_re_ent31[msg.sender]'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the user's balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public { require(balances_re_ent31[msg.sender] >= _weiToWithdraw); balances_re_ent31[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent31[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "79-85",
        "vulnerabilityReason": "Function 'bug_re_ent13' sends ether to 'msg.sender' using 'msg.sender.call.value(1 ether)(\"\")' before updating 'not_called_re_ent13'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the flag is reset.",
        "fixedCode": "function bug_re_ent13() public{ require(not_called_re_ent13); not_called_re_ent13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { not_called_re_ent13 = true; revert(); }}"
    },
    {
        "vulnerableLines": "95-100",
        "vulnerabilityReason": "Function 'bug_re_ent20' sends ether to 'msg.sender' using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent20'. A reentrant call can be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the flag is reset.",
        "fixedCode": "function bug_re_ent20() public{ require(not_called_re_ent20); not_called_re_ent20 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent20 = true; revert(); }}"
    },
    {
        "vulnerableLines": "110-116",
        "vulnerabilityReason": "Function 'callme_re_ent14' sends ether to 'msg.sender' using 'msg.sender.send(10 ether)' before updating 'counter_re_ent14'. A reentrant call can be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the contract balance by triggering reentrant calls before the counter is incremented.",
        "fixedCode": "function callme_re_ent14() public{ require(counter_re_ent14 <= 5); counter_re_ent14 += 1; if (!msg.sender.send(10 ether)){ revert(); }}"
    }
]