[
    {
        "vulnerableLines": "1-5",
        "vulnerabilityReason": "The function 'buyTicket_re_ent23' sends ether to the last player using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "15-21",
        "vulnerabilityReason": "The function 'callme_re_ent14' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating the counter_re_ent14. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent14() public { require(counter_re_ent14 <= 5); counter_re_ent14 += 1; if (!msg.sender.send(10 ether)) { revert(); }}"
    },
    {
        "vulnerableLines": "30-36",
        "vulnerabilityReason": "The function 'buyTicket_re_ent30' sends ether to the last player using 'lastPlayer_re_ent30.send(jackpot_re_ent30)' before updating 'lastPlayer_re_ent30' and 'jackpot_re_ent30'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent30() public { uint tempJackpot = jackpot_re_ent30; address payable tempLastPlayer = lastPlayer_re_ent30; lastPlayer_re_ent30 = msg.sender; jackpot_re_ent30 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "49-54",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent8' sends ether to msg.sender using a call before updating 'balances_re_ent8[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent8() public { uint amount = balances_re_ent8[msg.sender]; balances_re_ent8[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent8[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "56-75",
        "vulnerabilityReason": "The function 'withdraw' sends ether to msg.sender using 'msg.sender.transfer' before updating 'userDetails[msg.sender][address(0)]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw(uint8 type_, address tokenaddr, uint256 amount) dexstatuscheck public returns(bool) { require(type_ == 0 || type_ == 1); if (type_ == 0) { require(tokenaddr == address(0)); require(amount > 0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)] < amount); require(amount <= address(this).balance); userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount); feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]); msg.sender.transfer(amount.sub(withdrawfee[address(0)])); } else { require(tokenaddr != address(0) && tokendetails[tokenaddr].status == true); require(amount > 0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr] < amount); userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount); feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]); Token(tokenaddr).transfer(msg.sender, amount.sub(withdrawfee[tokenaddr])); } emit DepositandWithdraw(msg.sender, tokenaddr, amount, 1); return true; }"
    },
    {
        "vulnerableLines": "77-83",
        "vulnerabilityReason": "The function 'claimReward_re_ent39' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent39[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent39() public { uint amount = redeemableEther_re_ent39[msg.sender]; redeemableEther_re_ent39[msg.sender] = 0; msg.sender.transfer(amount); }"
    },
    {
        "vulnerableLines": "103-107",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent36' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent36[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent36() public { uint amount = balances_re_ent36[msg.sender]; balances_re_ent36[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_re_ent36[msg.sender] = amount; }}"
    }
]