[
    {
        "vulnerableLines": "13-20",
        "vulnerabilityReason": "The function 'bug_re_ent20' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent20', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function bug_re_ent20() public{ require(not_called_re_ent20); not_called_re_ent20 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent20 = true; revert(); }}"
    },
    {
        "vulnerableLines": "22-29",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent32[msg.sender]', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function claimReward_re_ent32() public { uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent32); }"
    },
    {
        "vulnerableLines": "31-37",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent38' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent38[msg.sender]', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public { require(balances_re_ent38[msg.sender] >= _weiToWithdraw); balances_re_ent38[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent38[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "40-47",
        "vulnerabilityReason": "The function 'claimReward_re_ent4' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent4[msg.sender]', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function claimReward_re_ent4() public { uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender]; redeemableEther_re_ent4[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent4); }"
    },
    {
        "vulnerableLines": "51-58",
        "vulnerabilityReason": "The function 'callme_re_ent7' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent7', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function callme_re_ent7() public{ require(counter_re_ent7 <= 5); counter_re_ent7 += 1; if (!msg.sender.send(10 ether)) { counter_re_ent7 -= 1; revert(); }}"
    },
    {
        "vulnerableLines": "60-67",
        "vulnerabilityReason": "The function 'buyTicket_re_ent23' sends ether to the last player using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    },
    {
        "vulnerableLines": "71-78",
        "vulnerabilityReason": "The function 'bug_re_ent27' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent27', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function bug_re_ent27() public { require(not_called_re_ent27); not_called_re_ent27 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent27 = true; revert(); }}"
    },
    {
        "vulnerableLines": "82-88",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent31' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent31[msg.sender]', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent31 (uint256 _weiToWithdraw) public { require(balances_re_ent31[msg.sender] >= _weiToWithdraw); balances_re_ent31[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent31[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "92-100",
        "vulnerabilityReason": "The function 'bug_re_ent13' sends ether to msg.sender using a call before updating 'not_called_re_ent13', leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and drain funds before the state is properly updated.",
        "fixedCode": "function bug_re_ent13() public { require(not_called_re_ent13); not_called_re_ent13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { not_called_re_ent13 = true; revert(); }}"
    }
]