[
    {
        "vulnerableLines": "4-11",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' allows sending ether to msg.sender using 'msg.sender.transfer(transferValue_re_ent32)' before updating 'redeemableEther_re_ent32[msg.sender]'. A reentrant call can be made here before the balance is reset.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger the transfer operation before the balance is reset, draining the contract's funds.",
        "fixedCode": "function claimReward_re_ent32() public { require(redeemableEther_re_ent32[msg.sender] > 0); uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; (bool success,) = msg.sender.call.value(transferValue_re_ent32)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "17-24",
        "vulnerabilityReason": "The function 'callme_re_ent42' allows sending ether to msg.sender using 'msg.sender.send(10 ether)' before updating the variable 'counter_re_ent42'. A reentrant call can be made here before the counter is incremented.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger the send operation before the counter is properly updated, draining the contract's funds.",
        "fixedCode": "function callme_re_ent42() public { require(counter_re_ent42 <= 5); counter_re_ent42 += 1; (bool success,) = msg.sender.call.value(10 ether)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "26-33",
        "vulnerabilityReason": "The function 'buyTicket_re_ent2' allows sending ether to last player using 'lastPlayer_re_ent2.send(jackpot_re_ent2)' before updating the 'lastPlayer_re_ent2' and 'jackpot_re_ent2'. A reentrant call can be made before these updates.",
        "potentialSecurityRisk": "An attacker can continuously purchase tickets, preventing the jackpot and last player information from being updated, leading to draining of the jackpot.",
        "fixedCode": "function buyTicket_re_ent2() public { uint tempJackpot = jackpot_re_ent2; address payable tempLastPlayer = lastPlayer_re_ent2; lastPlayer_re_ent2 = msg.sender; jackpot_re_ent2 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "36-43",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' allows sending ether to msg.sender using 'msg.sender.call.value(_weiToWithdraw)' before updating the balance 'balances_re_ent17[msg.sender]'. A reentrant call can be made before the balance is updated.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger the send operation before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawFunds_re_ent17 (uint256 _weiToWithdraw) public { require(balances_re_ent17[msg.sender] >= _weiToWithdraw); uint balanceToWithdraw = _weiToWithdraw; balances_re_ent17[msg.sender] -= balanceToWithdraw; (bool success,) = msg.sender.call.value(balanceToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "45-52",
        "vulnerabilityReason": "The function 'buyTicket_re_ent37' allows sending ether to last player using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating the 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. A reentrant call can be made before these updates.",
        "potentialSecurityRisk": "An attacker can continuously purchase tickets, preventing the jackpot and last player information from being updated, leading to draining of the jackpot.",
        "fixedCode": "function buyTicket_re_ent37() public { uint tempJackpot = jackpot_re_ent37; address payable tempLastPlayer = lastPlayer_re_ent37; lastPlayer_re_ent37 = msg.sender; jackpot_re_ent37 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "54-61",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent3' allows sending ether to msg.sender using 'msg.sender.call.value(_weiToWithdraw)' before updating the balance 'balances_re_ent3[msg.sender]'. A reentrant call can be made before the balance is updated.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger the send operation before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawFunds_re_ent3 (uint256 _weiToWithdraw) public { require(balances_re_ent3[msg.sender] >= _weiToWithdraw); uint balanceToWithdraw = _weiToWithdraw; balances_re_ent3[msg.sender] -= balanceToWithdraw; (bool success,) = msg.sender.call.value(balanceToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "63-71",
        "vulnerabilityReason": "The function 'buyTicket_re_ent9' allows sending ether to last player using 'lastPlayer_re_ent9.call.value(jackpot_re_ent9)' before updating the 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call can be made before these updates.",
        "potentialSecurityRisk": "An attacker can continuously purchase tickets, preventing the jackpot and last player information from being updated, leading to draining of the jackpot.",
        "fixedCode": "function buyTicket_re_ent9() public { uint tempJackpot = jackpot_re_ent9; address payable tempLastPlayer = lastPlayer_re_ent9; lastPlayer_re_ent9 = msg.sender; jackpot_re_ent9 = address(this).balance; (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "73-80",
        "vulnerabilityReason": "The function 'claimReward_re_ent25' allows sending ether to msg.sender using 'msg.sender.transfer(transferValue_re_ent25)' before updating 'redeemableEther_re_ent25[msg.sender]'. A reentrant call can be made here before the balance is reset.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger the transfer operation before the balance is reset, draining the contract's funds.",
        "fixedCode": "function claimReward_re_ent25() public { require(redeemableEther_re_ent25[msg.sender] > 0); uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender]; redeemableEther_re_ent25[msg.sender] = 0; (bool success,) = msg.sender.call.value(transferValue_re_ent25)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "86-92",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent38' allows sending ether to msg.sender using 'msg.sender.send(_weiToWithdraw)' before updating the balance 'balances_re_ent38[msg.sender]'. A reentrant call can be made before the balance is updated.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger the send operation before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public { require(balances_re_ent38[msg.sender] >= _weiToWithdraw); uint balanceToWithdraw = _weiToWithdraw; balances_re_ent38[msg.sender] -= balanceToWithdraw; (bool success,) = msg.sender.call.value(balanceToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "97-104",
        "vulnerabilityReason": "The function 'claimReward_re_ent4' allows sending ether to msg.sender using 'msg.sender.transfer(transferValue_re_ent4)' before updating 'redeemableEther_re_ent4[msg.sender]'. A reentrant call can be made here before the balance is reset.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger the transfer operation before the balance is reset, draining the contract's funds.",
        "fixedCode": "function claimReward_re_ent4() public { require(redeemableEther_re_ent4[msg.sender] > 0); uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender]; redeemableEther_re_ent4[msg.sender] = 0; (bool success,) = msg.sender.call.value(transferValue_re_ent4)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "109-116",
        "vulnerabilityReason": "The function 'callme_re_ent7' allows sending ether to msg.sender using 'msg.sender.send(10 ether)' before updating the variable 'counter_re_ent7'. A reentrant call can be made here before the counter is incremented.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger the send operation before the counter is properly updated, draining the contract's funds.",
        "fixedCode": "function callme_re_ent7() public { require(counter_re_ent7 <= 5); counter_re_ent7 += 1; (bool success,) = msg.sender.call.value(10 ether)(\"\"); require(success); }"
    }
]