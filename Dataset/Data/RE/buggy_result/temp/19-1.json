[
    {
        "vulnerableLines": "1-7",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent17' sends ether to msg.sender using a low-level call before updating 'balances_re_ent17[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent17(uint256 _weiToWithdraw) public {\n    require(balances_re_ent17[msg.sender] >= _weiToWithdraw);\n    // limit the withdrawal\n    balances_re_ent17[msg.sender] -= _weiToWithdraw;\n    (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\");\n    require(success);\n}"
    },
    {
        "vulnerableLines": "13-20",
        "vulnerabilityReason": "The function 'buyTicket_re_ent37' sends ether to the last player using 'lastPlayer_re_ent37.send(jackpot_re_ent37)' before updating 'lastPlayer_re_ent37' and 'jackpot_re_ent37'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent37() public {\n    uint tempJackpot = jackpot_re_ent37;\n    address payable tempLastPlayer = lastPlayer_re_ent37;\n    lastPlayer_re_ent37 = msg.sender;\n    jackpot_re_ent37 = address(this).balance;\n    if (!tempLastPlayer.send(tempJackpot)) { revert(); }\n}"
    },
    {
        "vulnerableLines": "33-40",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent3' sends ether to msg.sender using a low-level call before updating 'balances_re_ent3[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent3(uint256 _weiToWithdraw) public {\n    require(balances_re_ent3[msg.sender] >= _weiToWithdraw);\n    // limit the withdrawal\n    balances_re_ent3[msg.sender] -= _weiToWithdraw;\n    (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\");\n    require(success);\n}"
    },
    {
        "vulnerableLines": "49-57",
        "vulnerabilityReason": "The function 'buyTicket_re_ent9' sends ether to the last player using a low-level call before updating 'lastPlayer_re_ent9' and 'jackpot_re_ent9'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the call operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent9() public {\n    uint tempJackpot = jackpot_re_ent9;\n    address payable tempLastPlayer = lastPlayer_re_ent9;\n    lastPlayer_re_ent9 = msg.sender;\n    jackpot_re_ent9 = address(this).balance;\n    (bool success,) = tempLastPlayer.call.value(tempJackpot)(\"\");\n    if (!success) { revert(); }\n}"
    },
    {
        "vulnerableLines": "68-75",
        "vulnerabilityReason": "The function 'claimReward_re_ent25' sends ether to msg.sender using transfer before updating 'redeemableEther_re_ent25[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent25() public {        \n    require(redeemableEther_re_ent25[msg.sender] > 0);\n    uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];\n    redeemableEther_re_ent25[msg.sender] = 0;\n    msg.sender.transfer(transferValue_re_ent25);   \n}"
    },
    {
        "vulnerableLines": "81-89",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent19' sends ether to msg.sender using 'msg.sender.send(userBalance_re_ent19[msg.sender])' before updating 'userBalance_re_ent19[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent19() public{\n    uint balance = userBalance_re_ent19[msg.sender];\n    userBalance_re_ent19[msg.sender] = 0;\n    if(!msg.sender.send(balance)){\n        userBalance_re_ent19[msg.sender] = balance;\n        revert();\n    }\n}"
    },
    {
        "vulnerableLines": "95-104",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent26' sends ether to msg.sender using a low-level call before updating 'userBalance_re_ent26[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the call operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent26() public{\n    uint balance = userBalance_re_ent26[msg.sender];\n    userBalance_re_ent26[msg.sender] = 0;\n    (bool success,) = msg.sender.call.value(balance)(\"\");\n    if(!success){\n        userBalance_re_ent26[msg.sender] = balance;\n        revert();\n    }\n}"
    },
    {
        "vulnerableLines": "110-117",
        "vulnerabilityReason": "The function 'bug_re_ent20' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent20'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent20() public{\n    require(not_called_re_ent20);\n    not_called_re_ent20 = false;\n    if(!msg.sender.send(1 ether)){\n        not_called_re_ent20 = true;\n        revert();\n    }\n}"
    }
]