[
    {
        "vulnerableLines": "1-8",
        "vulnerabilityReason": "The function 'withdrawBalance_re_ent12' sends ether to msg.sender using 'msg.sender.send(userBalance_re_ent12[msg.sender])' before updating 'userBalance_re_ent12[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawBalance_re_ent12() public { uint amount = userBalance_re_ent12[msg.sender]; userBalance_re_ent12[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance_re_ent12[msg.sender] = amount; revert(); }}"
    },
    {
        "vulnerableLines": "11-17",
        "vulnerabilityReason": "The function 'claimReward_re_ent11' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent11[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent11() public { uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender]; redeemableEther_re_ent11[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent11); }"
    },
    {
        "vulnerableLines": "20-28",
        "vulnerabilityReason": "The function 'bug_re_ent13' sends ether to msg.sender using a call before updating 'not_called_re_ent13'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent13() public { require(not_called_re_ent13); not_called_re_ent13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { not_called_re_ent13 = true; revert(); }}"
    },
    {
        "vulnerableLines": "34-41",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent32[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent32() public { uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent32); }"
    },
    {
        "vulnerableLines": "51-57",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent38' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent38[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function withdrawFunds_re_ent38 (uint256 _weiToWithdraw) public { require(balances_re_ent38[msg.sender] >= _weiToWithdraw); balances_re_ent38[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent38[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "64-71",
        "vulnerabilityReason": "The function 'claimReward_re_ent4' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent4[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent4() public { uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender]; redeemableEther_re_ent4[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent4); }"
    },
    {
        "vulnerableLines": "78-83",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent1' sends ether to msg.sender using a call before updating 'balances_re_ent1[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent1() public { uint amount = balances_re_ent1[msg.sender]; balances_re_ent1[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent1[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "85-92",
        "vulnerabilityReason": "The function 'bug_re_ent41' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent41'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent41() public { require(not_called_re_ent41); not_called_re_ent41 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent41 = true; revert(); }}"
    },
    {
        "vulnerableLines": "94-101",
        "vulnerabilityReason": "The function 'callme_re_ent42' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent42'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent42() public { require(counter_re_ent42 <= 5); counter_re_ent42 += 1; if (!msg.sender.send(10 ether)){ revert(); }}"
    },
    {
        "vulnerableLines": "103-110",
        "vulnerabilityReason": "The function 'buyTicket_re_ent2' sends ether to the last player using 'lastPlayer_re_ent2.send(jackpot_re_ent2)' before updating 'lastPlayer_re_ent2' and 'jackpot_re_ent2'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent2() public { uint tempJackpot = jackpot_re_ent2; address payable tempLastPlayer = lastPlayer_re_ent2; lastPlayer_re_ent2 = msg.sender; jackpot_re_ent2 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { revert(); }}"
    }
]