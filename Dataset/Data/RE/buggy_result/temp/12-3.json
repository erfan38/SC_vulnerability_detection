[
    {
        "vulnerableLines": "1-7",
        "vulnerabilityReason": "The function 'callme_re_ent28' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent28'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent28() public{ require(counter_re_ent28 <= 5); counter_re_ent28 += 1; if (!msg.sender.send(10 ether)) { revert(); }}"
    },
    {
        "vulnerableLines": "9-16",
        "vulnerabilityReason": "The function 'bug_re_ent34' sends ether to msg.sender using 'msg.sender.send(1 ether)' before updating 'not_called_re_ent34'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is updated.",
        "fixedCode": "function bug_re_ent34() public { require(not_called_re_ent34); not_called_re_ent34 = false; if (!msg.sender.send(1 ether)) { not_called_re_ent34 = true; revert(); }}"
    },
    {
        "vulnerableLines": "18-25",
        "vulnerabilityReason": "The function 'callme_re_ent21' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent21'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the state is properly updated.",
        "fixedCode": "function callme_re_ent21() public { require(counter_re_ent21 <= 5); counter_re_ent21 += 1; if (!msg.sender.send(10 ether)) { revert(); }}"
    },
    {
        "vulnerableLines": "31-37",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent10' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent10[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent10(uint256 _weiToWithdraw) public { require(balances_re_ent10[msg.sender] >= _weiToWithdraw); balances_re_ent10[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent10[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "40-45",
        "vulnerabilityReason": "The function 'withdraw_balances_re_ent21' sends ether to msg.sender using a call before updating 'balances_re_ent21[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdraw_balances_re_ent21() public { uint amount = balances_re_ent21[msg.sender]; balances_re_ent21[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_re_ent21[msg.sender] = amount; }}"
    },
    {
        "vulnerableLines": "53-60",
        "vulnerabilityReason": "The function 'claimReward_re_ent32' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent32[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent32() public { uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender]; redeemableEther_re_ent32[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent32); }"
    },
    {
        "vulnerableLines": "67-73",
        "vulnerabilityReason": "The function 'withdrawFunds_re_ent38' sends ether to msg.sender using 'msg.sender.send' before updating 'balances_re_ent38[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the balance is reset.",
        "fixedCode": "function withdrawFunds_re_ent38(uint256 _weiToWithdraw) public { require(balances_re_ent38[msg.sender] >= _weiToWithdraw); balances_re_ent38[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { balances_re_ent38[msg.sender] += _weiToWithdraw; revert(); }}"
    },
    {
        "vulnerableLines": "79-86",
        "vulnerabilityReason": "The function 'claimReward_re_ent4' sends ether to msg.sender using 'msg.sender.transfer' before updating 'redeemableEther_re_ent4[msg.sender]'. A reentrant call could be made before this update, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the transfer before the balance is reset.",
        "fixedCode": "function claimReward_re_ent4() public { uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender]; redeemableEther_re_ent4[msg.sender] = 0; msg.sender.transfer(transferValue_re_ent4); }"
    },
    {
        "vulnerableLines": "91-98",
        "vulnerabilityReason": "The function 'callme_re_ent7' sends ether to msg.sender using 'msg.sender.send(10 ether)' before updating 'counter_re_ent7'. A reentrant call could be made reducing the counter to less than or equal to 5, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly triggering the send operation before the counter is properly updated.",
        "fixedCode": "function callme_re_ent7() public { require(counter_re_ent7 <= 5); counter_re_ent7 += 1; if (!msg.sender.send(10 ether)) { counter_re_ent7 -= 1; revert(); } }"
    },
    {
        "vulnerableLines": "103-110",
        "vulnerabilityReason": "The function 'buyTicket_re_ent23' sends ether to the last player using 'lastPlayer_re_ent23.send(jackpot_re_ent23)' before updating 'lastPlayer_re_ent23' and 'jackpot_re_ent23'. A reentrant call could be made before these updates, allowing repeated withdrawals.",
        "potentialSecurityRisk": "An attacker could drain the jackpot by repeatedly triggering the send operation before updating the state variables.",
        "fixedCode": "function buyTicket_re_ent23() public { uint tempJackpot = jackpot_re_ent23; address payable tempLastPlayer = lastPlayer_re_ent23; lastPlayer_re_ent23 = msg.sender; jackpot_re_ent23 = address(this).balance; if (!tempLastPlayer.send(tempJackpot)) { lastPlayer_re_ent23 = tempLastPlayer; jackpot_re_ent23 = tempJackpot; revert(); }}"
    }
]