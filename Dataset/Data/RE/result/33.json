[
    {
        "vulnerableLines": "6-11",
        "vulnerabilityReason": "The `buyTicket` function uses `send` to transfer ether before updating the state variables `lastPlayer_ticketBuyer` and `jackpot_ticket`, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the state variables are updated, potentially draining funds from the contract.",
        "fixedCode": "function buyTicket() public { address payable currentLastPlayer = lastPlayer_ticketBuyer; uint currentJackpot = jackpot_ticket; lastPlayer_ticketBuyer = msg.sender; jackpot_ticket = address(this).balance; if (!currentLastPlayer.send(currentJackpot)) revert(); }"
    },
    {
        "vulnerableLines": "14-19",
        "vulnerabilityReason": "The function `withdrawFunds` uses `call.value` to transfer funds before updating the balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could invoke this function reentrantly, allowing them to withdraw funds repeatedly before their balance is updated, causing a loss of funds from the contract.",
        "fixedCode": "function withdrawFunds (uint256 _weiToWithdraw) public { require(balances_withdrawable[msg.sender] >= _weiToWithdraw); balances_withdrawable[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "22-29",
        "vulnerabilityReason": "The `initiateOwnerChange` function sends ether to the user before updating the `not_called_ownerChange` state variable, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "The attacker can make repeated calls to this function before the state variable is updated, allowing them to receive multiple payouts.",
        "fixedCode": "function initiateOwnerChange() public { require(not_called_ownerChange); not_called_ownerChange = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "36-41",
        "vulnerabilityReason": "The function `claimReward` transfers funds before updating the user\u2019s balance, potentially allowing for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could invoke this function reentrantly to drain more funds than they are entitled to by abusing the delay in updating the balance.",
        "fixedCode": "function claimReward() public { require(redeemableEther_balance[msg.sender] > 0); uint transferValue = redeemableEther_balance[msg.sender]; redeemableEther_balance[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "52-56",
        "vulnerabilityReason": "The `withdrawFundsStake` function transfers funds to the user before updating their balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly calling this function before their balance is updated.",
        "fixedCode": "function withdrawFundsStake (uint256 _weiToWithdraw) public { require(balances_staked[msg.sender] >= _weiToWithdraw); balances_staked[msg.sender] -= _weiToWithdraw; msg.sender.transfer(_weiToWithdraw); }"
    },
    {
        "vulnerableLines": "95-100",
        "vulnerabilityReason": "The function `claimRewardFunds` uses `msg.sender.transfer` to transfer funds before updating the user\u2019s balance, leaving it susceptible to reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call the function and drain the contract\u2019s funds before their balance is updated.",
        "fixedCode": "function claimRewardFunds() public { require(redeemableEther_funds[msg.sender] > 0); uint transferValue = redeemableEther_funds[msg.sender]; redeemableEther_funds[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "102-109",
        "vulnerabilityReason": "In the `callMethod` function, funds are sent to the user before updating the counter, allowing potential exploitation through reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is incremented, bypassing intended rate limitations and exhausting contract funds.",
        "fixedCode": "function callMethod() public { require(counter_call <= 5); counter_call += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "113-118",
        "vulnerabilityReason": "The `buyTicketPurchase` function uses `send` to transfer ether before updating state variables. This can permit reentrant calls before state changes.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain the jackpot funds before the state variables are updated.",
        "fixedCode": "function buyTicketPurchase() public { address payable currentLastPlayer = lastPlayer_purchase; uint currentJackpot = jackpot_ticketPurchase; lastPlayer_purchase = msg.sender; jackpot_ticketPurchase = address(this).balance; if (!currentLastPlayer.send(currentJackpot)) revert(); }"
    },
    {
        "vulnerableLines": "124-128",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the state variables lastPlayer_stake and jackpot_stake, allowing for a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the state is updated, leading to draining of the jackpot_stake.",
        "fixedCode": "function buyTicketStake() public { lastPlayer_stake = msg.sender; jackpot_stake = address(this).balance; if (!lastPlayer_stake.send(jackpot_stake)) { revert(); } }"
    },
    {
        "vulnerableLines": "132-136",
        "vulnerabilityReason": "The function uses call.value to send funds before updating the user balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could recursively call this function, draining funds from the contract before their balance is updated.",
        "fixedCode": "function withdrawFundsFromStake(uint256 _weiToWithdraw) public { require(balances_stake[msg.sender] >= _weiToWithdraw); balances_stake[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "142-147",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the state variables lastPlayer_transaction and jackpot_transaction, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could recursively call this function to withdraw more ether than they should, draining the jackpot_transaction.",
        "fixedCode": "function buyTicketTransaction() public { lastPlayer_transaction = msg.sender; jackpot_transaction = address(this).balance; (bool success,) = lastPlayer_transaction.call.value(jackpot_transaction)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "150-155",
        "vulnerabilityReason": "The function uses transfer to send funds to the user before updating their balance, allowing for reentrancy.",
        "potentialSecurityRisk": "This opens a chance for an attacker to call this function repeatedly, draining the redeemableEther_redeem balance.",
        "fixedCode": "function claimRewardRedeem() public { require(redeemableEther_redeem[msg.sender] > 0); uint transferValue = redeemableEther_redeem[msg.sender]; redeemableEther_redeem[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "159-164",
        "vulnerabilityReason": "The function sends ether before resetting the user balance, which allows reentrancy.",
        "potentialSecurityRisk": "An attacker could withdraw more than their balance multiple times through recursive calls.",
        "fixedCode": "function withdrawBalance() public { uint256 balance = userBalance_withdrawable[msg.sender]; userBalance_withdrawable[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }"
    },
    {
        "vulnerableLines": "168-173",
        "vulnerabilityReason": "The function uses call.value to transfer ether to the user before updating their balance.",
        "potentialSecurityRisk": "This can be exploited by an attacker to repeatedly withdraw more funds than their balance allows.",
        "fixedCode": "function withdrawBalanceRedeemable() public { uint256 balance = userBalance_redeemable[msg.sender]; userBalance_redeemable[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "176-181",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the user's balance, making it prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability to withdraw more funds than entitled repeatedly.",
        "fixedCode": "function withdrawFundsForStake(uint256 _weiToWithdraw) public { require(balances_staked[msg.sender] >= _weiToWithdraw); balances_staked[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "184-190",
        "vulnerabilityReason": "The function sends ether before updating the state variable not_called_staking, which introduces reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function through reentrancy, draining the contract's ether balance.",
        "fixedCode": "function initiateStake() public { require(not_called_staking); not_called_staking = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "200-205",
        "vulnerabilityReason": "This function also uses send to transfer ether before updating the state variable not_called_stake, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker may continuously drain the ether by invoking this function multiple times.",
        "fixedCode": "function initiateStakeAccount() public { require(not_called_stake); not_called_stake = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "215-221",
        "vulnerabilityReason": "The function sends ether before updating the counter_transaction, which could allow reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could leverage this vulnerability to withdraw more ether than intended by calling this function recursively.",
        "fixedCode": "function trackTransaction() public { require(counter_transaction <= 5); counter_transaction += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "234-239",
        "vulnerabilityReason": "Use of send to transfer ether before updating lastPlayer_ticketTransaction and jackpot_ticketTransaction makes this function vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker might use reentrancy to withdraw the jackpot_ticketTransaction multiple times, depleting the contract's balance.",
        "fixedCode": "function buyTicketTransaction() public { lastPlayer_ticketTransaction = msg.sender; jackpot_ticketTransaction = address(this).balance; if (!lastPlayer_ticketTransaction.send(jackpot_ticketTransaction)) { revert(); } }"
    },
    {
        "vulnerableLines": "251-256",
        "vulnerabilityReason": "The function uses call.value to send ether to the user before updating the balance, which allows potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function during the transfer, withdrawing more funds than their balance allows.",
        "fixedCode": "function withdrawFundsFromWithdrawable() public { uint amount = balances_withdrawable[msg.sender]; balances_withdrawable[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances_withdrawable[msg.sender] = amount; } }"
    },
    {
        "vulnerableLines": "261-267",
        "vulnerabilityReason": "This function uses transfer to send ether to the user before resetting the redeemable amount, which could lead to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to make multiple withdrawals, depleting the contract balance.",
        "fixedCode": "function claimRewardCustodialFunds() public { require(redeemableEther_custodialFunds[msg.sender] > 0); uint transferValue = redeemableEther_custodialFunds[msg.sender]; redeemableEther_custodialFunds[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "272-276",
        "vulnerabilityReason": "The function uses send to transfer ether before resetting the balance, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, withdrawing more ether than their allowed balance.",
        "fixedCode": "function withdrawFundsFromOtherWithdrawals() public { uint amount = balances_otherWithdrawals[msg.sender]; balances_otherWithdrawals[msg.sender] = 0; if (!msg.sender.send(amount)) { balances_otherWithdrawals[msg.sender] = amount; } }"
    },
    {
        "vulnerableLines": "281-287",
        "vulnerabilityReason": "The function sends ether to the user before updating the counter, which makes it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly invoke this function, circumventing the counter limit and draining ether from the contract.",
        "fixedCode": "function trackOtherWithdraw() public { require(counter_otherWithdraw <= 5); counter_otherWithdraw += 1; if (!msg.sender.send(10 ether)) { counter_otherWithdraw -= 1; revert(); } }"
    },
    {
        "vulnerableLines": "293-300",
        "vulnerabilityReason": "The function calls call.value to transfer ether before updating the user's balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker can reenter the function, draining funds from the contract before the user's balance is updated.",
        "fixedCode": "function withdrawUserBalance() public { uint amount = userBalance_withdrawable[msg.sender]; userBalance_withdrawable[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_withdrawable[msg.sender] = amount; revert(); } }"
    },
    {
        "vulnerableLines": "307-314",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the user's balance, making it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, withdrawing more funds than their actual balance by exploiting reentry.",
        "fixedCode": "function withdrawUserBalanceRedeemable() public { uint amount = userBalance_redeemable[msg.sender]; userBalance_redeemable[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance_redeemable[msg.sender] = amount; revert(); } }"
    }
]