[
    {
        "vulnerableLines": "6-10",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is reset, draining the contract's funds.",
        "fixedCode": "function withdrawBalances() public { uint256 amount = balancesWithdrawable[msg.sender]; balancesWithdrawable[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "12-18",
        "vulnerabilityReason": "The function uses send to transfer funds before resetting the user's balance, leading to potential reentrancy attacks.",
        "potentialSecurityRisk": "Attackers could repeatedly call this function before the user's balance is reset, draining the contract's funds.",
        "fixedCode": "function withdrawUserBalance() public { uint256 amount = userBalanceWithdrawable[msg.sender]; userBalanceWithdrawable[msg.sender] = 0; require(msg.sender.send(amount)); }"
    },
    {
        "vulnerableLines": "21-26",
        "vulnerabilityReason": "The function transfers ether before resetting the user's redeemable balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call the function and drain the contract's funds.",
        "fixedCode": "function claimReward() public { require(redeemableEtherBalances[msg.sender] > 0); uint transferValue = redeemableEtherBalances[msg.sender]; redeemableEtherBalances[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "29-33",
        "vulnerabilityReason": "The function uses send to transfer funds before resetting the user's balance, exposing it to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Attackers could drain the contract's funds by repeatedly calling this function before the user's balance is reset.",
        "fixedCode": "function withdrawReusableBalances() public { uint256 amount = balancesWithdrawReusable[msg.sender]; balancesWithdrawReusable[msg.sender] = 0; require(msg.sender.send(amount)); }"
    },
    {
        "vulnerableLines": "35-42",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the counter, leaving it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is updated, draining the contract's funds.",
        "fixedCode": "function callme() public { require(counter <= 5); counter += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "44-51",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, leading to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is reset, draining the contract's funds.",
        "fixedCode": "function withdrawUserBalanceInfo() public { uint256 amount = userBalance[msg.sender]; userBalance[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "53-60",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is reset, draining the contract's funds.",
        "fixedCode": "function withdrawCheckUserBalance() public { uint256 amount = userBalanceCheck[msg.sender]; userBalanceCheck[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "71-78",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the counter, resulting in potential reentrancy attacks.",
        "potentialSecurityRisk": "Attackers could exploit this to repeatedly call the function, draining the contract's funds before the counter is updated.",
        "fixedCode": "function callmeTwo() public { require(counterTwo <= 5); counterTwo += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "84-91",
        "vulnerabilityReason": "The function uses send to transfer the jackpot before updating the last player's address, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly call the function, receiving the jackpot amount multiple times before the state is updated.",
        "fixedCode": "function buyTicket() public { require(lastPlayer.send(jackpot)); lastPlayer = msg.sender; jackpot = address(this).balance; }"
    },
    {
        "vulnerableLines": "97-103",
        "vulnerabilityReason": "The function uses call.value to transfer funds before deducting the user's balance, exposing it to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is deducted, draining the contract's funds.",
        "fixedCode": "function withdrawUserFunds(uint256 _weiToWithdraw) public { require(balancesUserWithdraw[msg.sender] >= _weiToWithdraw); balancesUserWithdraw[msg.sender] -= _weiToWithdraw; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "127-134",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the lastPlayerCheck variable, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker may call the function repeatedly before the lastPlayerCheck is updated, effectively draining the contract's funds.",
        "fixedCode": "function buyTicketCheck() public { lastPlayerCheck = msg.sender; jackpotCheck = address(this).balance; require(lastPlayerCheck.send(jackpotCheck)); }"
    },
    {
        "vulnerableLines": "140-146",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user\u2019s balance, allowing reentrant calls.",
        "potentialSecurityRisk": "An attacker can call the function repeatedly before balance is updated, withdrawing more funds than they are entitled to.",
        "fixedCode": "function withdrawUserFundsCheck(uint256 _weiToWithdraw) public { require(balancesUserCheck[msg.sender] >= _weiToWithdraw); balancesUserCheck[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "152-160",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the lastPlayerTransfer variable, leading to potential reentrancy.",
        "potentialSecurityRisk": "This opens up the contract to multiple malicious calls before the state variable is updated, allowing attackers to drain funds.",
        "fixedCode": "function buyTicketTransfer() public { lastPlayerTransfer = msg.sender; jackpotTransfer = address(this).balance; (bool success,) = lastPlayerTransfer.call.value(jackpotTransfer)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "166-172",
        "vulnerabilityReason": "The function transfers ether before resetting the user's reward balance, allowing for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can receive multiple ether transfers by repeatedly calling the function before the reward balance is reset.",
        "fixedCode": "function claimRewardTransfer() public { require(redeemableEtherBalancesTransfer[msg.sender] > 0); uint transferValueTransfer = redeemableEtherBalancesTransfer[msg.sender]; redeemableEtherBalancesTransfer[msg.sender] = 0; msg.sender.transfer(transferValueTransfer); }"
    },
    {
        "vulnerableLines": "178-184",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the user balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "Attackers can exploit the gap to withdraw more funds than their balance holds by repeatedly calling this function.",
        "fixedCode": "function withdrawUserBalanceTransfer() public { uint256 balance = userBalanceTransfer[msg.sender]; userBalanceTransfer[msg.sender] = 0; if (!(msg.sender.send(balance))) { revert(); } }"
    },
    {
        "vulnerableLines": "190-197",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the balance, exposing the contract to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could withdraw multiple times before the balance is updated, draining the contract\u2019s ether.",
        "fixedCode": "function withdrawUserBalanceWithdrawal() public { uint256 balance = userBalanceWithdrawal[msg.sender]; userBalanceWithdrawal[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "203-210",
        "vulnerabilityReason": "The function transfers ether before updating the state variable, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers can exploit this to repeatedly call the function, draining funds before the state is properly updated.",
        "fixedCode": "function resetCalled() public { require(notCalled); notCalled = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "218-224",
        "vulnerabilityReason": "The function transfers ether before resetting the user\u2019s redeemable balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could claim the reward multiple times by making repeated calls before the balance is reset.",
        "fixedCode": "function claimRewardCheck() public { require(redeemableEtherBalancesCheck[msg.sender] > 0); uint transferValueCheck = redeemableEtherBalancesCheck[msg.sender]; redeemableEtherBalancesCheck[msg.sender] = 0; msg.sender.transfer(transferValueCheck); }"
    },
    {
        "vulnerableLines": "232-237",
        "vulnerabilityReason": "The function sends ether before updating the balance, allowing for reentrancy vulnerabilities.",
        "potentialSecurityRisk": "This can enable attackers to withdraw more than their entitled amount by repeatedly invoking the function before state update.",
        "fixedCode": "function withdrawUserFundsCheck(uint256 _weiToWithdraw) public { require(balancesUserWithdrawCheck[msg.sender] >= _weiToWithdraw); balancesUserWithdrawCheck[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "245-249",
        "vulnerabilityReason": "The function transfers ether to the msg.sender before resetting their redeemable balance, enabling reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly call the function and drain the contract's balance.",
        "fixedCode": "function claimRewardStop() public { require(redeemableEtherBalancesStop[msg.sender] > 0); uint transferValueStop = redeemableEtherBalancesStop[msg.sender]; redeemableEtherBalancesStop[msg.sender] = 0; msg.sender.transfer(transferValueStop); }"
    },
    {
        "vulnerableLines": "257-264",
        "vulnerabilityReason": "The function transfers ether to the sender before updating counterUser, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function and withdraw more ether, bypassing the intended limit.",
        "fixedCode": "function callmeUser() public { require(counterUser <= 5); counterUser += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "269-274",
        "vulnerabilityReason": "This function uses call.value to send ether before resetting the sender's balance, opening up reentrancy possibilities.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly withdraw funds before their balance is reset, depleting the contract.",
        "fixedCode": "function withdrawAccountBalances() public { uint256 balance = balancesAccount[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { balancesAccount[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "276-283",
        "vulnerabilityReason": "The function sends ether before setting notCalledAccount to false, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly invoke this function, withdrawing more ether than intended.",
        "fixedCode": "function resetAccountCalled() public { require(notCalledAccount); notCalledAccount = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "286-293",
        "vulnerabilityReason": "This function sends ether before updating the notCalledMaster flag, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker can call this function repeatedly and drain funds before the flag is updated.",
        "fixedCode": "function resetMasterCalled() public { require(notCalledMaster); notCalledMaster = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "295-300",
        "vulnerabilityReason": "The function sends ether to the sender before decrementing balancesAccountNew, enabling reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw funds before their balance is decremented, draining the contract.",
        "fixedCode": "function withdrawFundsAccountNew(uint256 _weiToWithdraw) public { require(balancesAccountNew[msg.sender] >= _weiToWithdraw); balancesAccountNew[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "302-310",
        "vulnerabilityReason": "The function calls call.value to send ether before updating notCalledUpdate, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker can leverage this to repeatedly withdraw ether before the flag is updated.",
        "fixedCode": "function resetUpdateCalled() public { require(notCalledUpdate); notCalledUpdate = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "317-324",
        "vulnerabilityReason": "The function sends ether to the last player before updating lastPlayerAccount, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly claim the jackpot before lastPlayerAccount is updated, draining funds.",
        "fixedCode": "function buyTicketAccount() public { require(lastPlayerAccount.send(jackpotAccount)); lastPlayerAccount = msg.sender; jackpotAccount = address(this).balance; }"
    },
    {
        "vulnerableLines": "330-337",
        "vulnerabilityReason": "The function sends ether to the sender before updating counterAccount, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker can reenter and withdraw more ether than intended, bypassing the limit.",
        "fixedCode": "function callmeAccount() public { require(counterAccount <= 5); counterAccount += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "348-355",
        "vulnerabilityReason": "The function sends ether before updating lastPlayerAccountUpdate, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly withdraw the jackpot before the state is updated, draining funds.",
        "fixedCode": "function buyTicketAccountUpdate() public { require(lastPlayerAccountUpdate.send(jackpotAccountUpdate)); lastPlayerAccountUpdate = msg.sender; jackpotAccountUpdate = address(this).balance; }"
    },
    {
        "vulnerableLines": "371-374",
        "vulnerabilityReason": "The function uses call.value to send ether before updating the user's balance, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before their balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawBalancesAccount() public { uint256 balance = balancesAccountWithdrawal[msg.sender]; balancesAccountWithdrawal[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { balancesAccountWithdrawal[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "387-392",
        "vulnerabilityReason": "The function sends ether using transfer before updating the reward balance, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly claim rewards before their balance is updated, draining the contract's funds.",
        "fixedCode": "function claimRewardDelete() public { require(redeemableEtherBalancesDelete[msg.sender] > 0); uint transferValueDelete = redeemableEtherBalancesDelete[msg.sender]; redeemableEtherBalancesDelete[msg.sender] = 0; msg.sender.transfer(transferValueDelete); }"
    }
]