[
    {
        "vulnerableLines": "33-37",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the balances_17 mapping, exposing it to reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this by calling the function repeatedly before their balance is updated, draining the contract.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "44-49",
        "vulnerabilityReason": "The function transfers funds before resetting the reward balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function to withdraw more than their entitled amount before their balance is reset.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }"
    },
    {
        "vulnerableLines": "63-67",
        "vulnerabilityReason": "Using send to transfer jackpot funds before updating the lastPlayer_37 address lets reentrancy attacks happen.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the lastPlayer_37 address is updated, draining the jackpot.",
        "fixedCode": "function buyTicket_37() public { require(lastPlayer_37.send(jackpot_37)); lastPlayer_37 = msg.sender; jackpot_37 = address(this).balance; }"
    },
    {
        "vulnerableLines": "71-75",
        "vulnerabilityReason": "The function sends ether via call.value() before updating the user's balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly invoke this function before their balance is updated, draining funds.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "80-85",
        "vulnerabilityReason": "The function calls lastPlayer_9.send() before updating the lastPlayer_9 address, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly invoke this function before the lastPlayer_9 address is updated, draining the contract's jackpot.",
        "fixedCode": "function buyTicket_9() public { (bool success,) = lastPlayer_9.call.value(jackpot_9)(\"\"); if (!success) revert(); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "90-95",
        "vulnerabilityReason": "The function transfers funds before updating the redeemableEther_25 mapping, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could call this function multiple times before the redeemable balance is updated, draining funds from the contract.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    },
    {
        "vulnerableLines": "98-102",
        "vulnerabilityReason": "The function sends funds using send before updating the user balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could keep invoking the function before their balance is updated, draining funds from the contract.",
        "fixedCode": "function withdrawBalance_19() public { uint256 balance = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }"
    },
    {
        "vulnerableLines": "107-112",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the balances_26 mapping, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this by calling the function repeatedly before their balance is updated, draining the contract.",
        "fixedCode": "function withdrawBalance_26() public { uint256 balance = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "116-122",
        "vulnerabilityReason": "The function sends ether before setting the checkvalues_20 flag to false, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker may repeatedly call this function, draining more ether than intended before the flag is updated.",
        "fixedCode": "function updates_20() public { require(checkvalues_20); checkvalues_20 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "126-132",
        "vulnerabilityReason": "Sending ether before updating the checkvalues_27 flag may allow reentrancy attacks.",
        "potentialSecurityRisk": "The Ether balance could be drained by an attacker through repeated calls before the flag is set to false.",
        "fixedCode": "function updates_27() public { require(checkvalues_27); checkvalues_27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "136-140",
        "vulnerabilityReason": "Ether is transferred to the user before adjusting the balance, introducing reentrancy vulnerabilities.",
        "potentialSecurityRisk": "This could allow attackers to withdraw more ether than their balance, draining the contract funds.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "144-151",
        "vulnerabilityReason": "The function sends ether before setting the checkvalues_13 flag to false, making it vulnerable to reentrant calls.",
        "potentialSecurityRisk": "Repeated call invocations could result in more ether being drained by an attacker before the flag is updated.",
        "fixedCode": "function updates_13() public { require(checkvalues_13); checkvalues_13 = false; (bool success, ) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "178-182",
        "vulnerabilityReason": "Ether is transferred before adjusting the user balance, enabling reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Attackers can call the function repeatedly to drain ether beyond their allowed balance.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "188-193",
        "vulnerabilityReason": "The ether transfer occurs before the user's redeemable ether balance is set to zero, which can enable reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly invoke the function to withdraw more rewards than permitted, depleting the contract balance.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }"
    },
    {
        "vulnerableLines": "199-205",
        "vulnerabilityReason": "The function sends ether before updating the counter, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "Repeated calls by an attacker could drain more ether than allowed since the counter is not updated until after the transfer.",
        "fixedCode": "function checkcall_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "212-217",
        "vulnerabilityReason": "Ether is transferred to the last player before updating the state, leading to possible reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Repeated reentrant invocations could drain the jackpot funds before the contract state is updated.",
        "fixedCode": "function buyTicket_23() public { if (!(lastPlayer_23.send(jackpot_23))) revert(); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }"
    },
    {
        "vulnerableLines": "225-230",
        "vulnerabilityReason": "The ether transfer happens before updating the function counter, leading to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Repeated attacker calls can drain the contract's ether funds before the function counter is updated.",
        "fixedCode": "function checkcall_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "238-242",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_30, leading to reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain the contract by exploiting the incomplete state update.",
        "fixedCode": "function buyTicket_30() public { lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; if (!(lastPlayer_30.send(jackpot_30))) { revert(); } }"
    },
    {
        "vulnerableLines": "250-255",
        "vulnerabilityReason": "The function uses call.value to send funds before updating the balances mapping, introducing reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to withdraw funds before their balance is updated.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; balances_8[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { balances_8[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "264-270",
        "vulnerabilityReason": "The function sends ether via transfer before setting the redeemableEther_39 mapping to 0, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can call the function repeatedly, draining more ether than they are supposed to.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "279-283",
        "vulnerabilityReason": "Using send to transfer funds before resetting the user's balance exposes the contract to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function to drain funds beyond their assigned balance.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; balances_36[msg.sender] = 0; if (!msg.sender.send(balance)) { balances_36[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "294-300",
        "vulnerabilityReason": "Funds are sent via send before updating the counter_35, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly trigger this function to drain the contract beyond the intended limit.",
        "fixedCode": "function checkcall_35() public { require(counter_35 <= 5); counter_35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "311-318",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the user balance, exposing it to a reentrancy attack.",
        "potentialSecurityRisk": "This allows an attacker to call the function repeatedly, withdrawing more ether than their balance allows.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; userBalance_40[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { userBalance_40[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "322-329",
        "vulnerabilityReason": "The function uses call.value to send ether before setting the user balance to 0, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call to drain the contract by exploiting the incomplete update of the user's balance.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; userBalance_33[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { userBalance_33[msg.sender] = balance; } }"
    }
]