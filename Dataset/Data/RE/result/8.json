[
    {
        "vulnerableLines": "5-8",
        "vulnerabilityReason": "Using call.value to transfer funds before resetting the user balance, which is prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could call this function reentrantly, draining the contract's funds by repeatedly withdrawing before their balance is updated.",
        "fixedCode": "function withdraw_balances_21() public { uint balance = balances_21[msg.sender]; balances_21[msg.sender] = 0; (bool success,)= msg.sender.call.value(balance)(\"\"); if (!success) { balances_21[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "13-18",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the balance, which allows reentrance.",
        "potentialSecurityRisk": "Attacker might repeatedly call this function and exhaust contract funds before their balance is reset.",
        "fixedCode": "function withdrawBalance_40() public { uint balance = userBalance_40[msg.sender]; userBalance_40[msg.sender] = 0; (bool success,)= msg.sender.call.value(balance)(\"\"); if (!success) { userBalance_40[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "28-33",
        "vulnerabilityReason": "Transfer of jackpot amount is conducted before setting the new player and jackpot, causing reentrancy risk.",
        "potentialSecurityRisk": "An attacker can drain the contract by repeatedly buying tickets before the balance is updated.",
        "fixedCode": "function buyTicket_9() public { (bool success,)= lastPlayer_9.call.value(jackpot_9)(\"\"); if(success) { lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; } else { revert(); } }"
    },
    {
        "vulnerableLines": "46-51",
        "vulnerabilityReason": "Sending funds to the user before updating redeemable ether balance allows reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly claim rewards, rapidly depleting contract funds.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    },
    {
        "vulnerableLines": "58-62",
        "vulnerabilityReason": "Funds sent before balance update; susceptible to reentrancy.",
        "potentialSecurityRisk": "Repeated calls to drain contract balance before user balance update.",
        "fixedCode": "function withdrawBalance_12() public { uint balance = userBalance_12[msg.sender]; userBalance_12[msg.sender] = 0; if (!msg.sender.send(balance)) { userBalance_12[msg.sender] = balance; revert(); } }"
    },
    {
        "vulnerableLines": "65-70",
        "vulnerabilityReason": "Execution of transfer before balance reset allows reentrancy.",
        "potentialSecurityRisk": "Attacker might siphon off funds by exploiting reentrant calls.",
        "fixedCode": "function claimReward_11() public { require(redeemableEther_11[msg.sender] > 0); uint transferValue_11 = redeemableEther_11[msg.sender]; redeemableEther_11[msg.sender] = 0; msg.sender.transfer(transferValue_11); }"
    },
    {
        "vulnerableLines": "74-77",
        "vulnerabilityReason": "Using call.value to send funds before balance reset exposes it to reentrancy.",
        "potentialSecurityRisk": "Enables malicious actors to repeatedly withdraw, draining funds.",
        "fixedCode": "function withdraw_balances_1() public { uint balance = balances_1[msg.sender]; balances_1[msg.sender] = 0; (bool success,)= msg.sender.call.value(balance)(\"\"); if (!success) { balances_1[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "90-96",
        "vulnerabilityReason": "Send operation precedes counter update, facilitating reentrancy.",
        "potentialSecurityRisk": "Potential for multiple withdrawals by circumventing counter control, draining contract.",
        "fixedCode": "function callcheck_42() public { require(counter_42<=5); counter_42 += 1; if (!msg.sender.send(10 ether)) { counter_42 -= 1; revert(); } }"
    },
    {
        "vulnerableLines": "101-105",
        "vulnerabilityReason": "Executing send before updating player and jackpot exposes the contract to reentrancy.",
        "potentialSecurityRisk": "Multiple fund withdrawals possible before state update.",
        "fixedCode": "function buyTicket_2() public { if (lastPlayer_2.send(jackpot_2)) { lastPlayer_2 = msg.sender; jackpot_2 = address(this).balance; } else { revert(); } }"
    },
    {
        "vulnerableLines": "110-115",
        "vulnerabilityReason": "call.value transfers funds before resetting balance, prone to reentrancy.",
        "potentialSecurityRisk": "Allows malicious actors to perform repeated calls, draining funds.",
        "fixedCode": "function withdrawBalance_33() public { uint balance = userBalance_33[msg.sender]; userBalance_33[msg.sender] = 0; (bool success,)= msg.sender.call.value(balance)(\"\"); if (!success) { userBalance_33[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "120-126",
        "vulnerabilityReason": "The function sends ether to msg.sender before updating callvalues_27, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, allowing them to withdraw more ether than intended.",
        "fixedCode": "function updates_27() public { require(callvalues_27); callvalues_27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "130-134",
        "vulnerabilityReason": "Funds are sent to the user before decrementing their balance, which can be exploited for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker may repeatedly withdraw funds, draining the contract's balance.",
        "fixedCode": "function withdrawFunds_31 (uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "147-153",
        "vulnerabilityReason": "The function uses send to transfer ether before nullifying the user's balance, allowing for reentrancy.",
        "potentialSecurityRisk": "Repeatedly calling this function might enable draining the contract's balance.",
        "fixedCode": "function withdrawBalance_19() public { uint256 amount = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; if (!msg.sender.send(amount)) { revert(); } }"
    },
    {
        "vulnerableLines": "165-172",
        "vulnerabilityReason": "The function sends funds to the user before setting their balance to zero, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker can perform reentrant calls to withdraw more ether than their balance, draining the contract.",
        "fixedCode": "function withdrawBalance_26() public { uint256 amount = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "178-185",
        "vulnerabilityReason": "The function calls send to transfer ether before updating callvalues_20, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker can call this function repeatedly, allowing them to withdraw more ether than allowed.",
        "fixedCode": "function updates_20() public { require(callvalues_20); callvalues_20 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "193-199",
        "vulnerabilityReason": "Funds are transferred to the user before their balance is set to zero, which could lead to reentrancy issues.",
        "potentialSecurityRisk": "An attacker could withdraw more funds than allowed through repeated calls, draining the contract.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint256 transferValue = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "207-212",
        "vulnerabilityReason": "The function transfers funds before deducting the user's balance, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker could drain the contract by repeatedly calling this function, withdrawing more funds than intended.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "221-227",
        "vulnerabilityReason": "The function transfers ether before setting the user's redeemable balance to zero, enabling potential reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to continually withdraw their balance, depleting the contract's ether.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint256 transferValue = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "239-245",
        "vulnerabilityReason": "The function sends ether to the sender before updating the counter_7, which can allow reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call the function before the counter_7 is updated, potentially draining funds.",
        "fixedCode": "function callcheck_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "248-256",
        "vulnerabilityReason": "The function sends ether to the sender before updating the callvalues_13 variable.",
        "potentialSecurityRisk": "An attacker could use reentrancy to repeatedly call the function before the callvalues_13 variable is updated, draining funds.",
        "fixedCode": "function updates_13() public { require(callvalues_13); callvalues_13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "269-276",
        "vulnerabilityReason": "The function sends ether to the sender before updating the counter_14, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter_14 is updated, draining the contract's funds.",
        "fixedCode": "function callcheck_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "284-291",
        "vulnerabilityReason": "The function sends ether to the lastPlayer_30 before updating the lastPlayer_30, which allows for reentrancy.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain the jackpot funds before lastPlayer_30 is updated.",
        "fixedCode": "function buyTicket_30() public { require(!(lastPlayer_30.send(jackpot_30))); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "297-302",
        "vulnerabilityReason": "The function sends ether to the sender before updating the balances_8 mapping.",
        "potentialSecurityRisk": "An attacker could use reentrancy to call this function multiple times before their balance is updated to zero, draining the contract.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balances_8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "308-314",
        "vulnerabilityReason": "The function transfers ether to the sender before resetting their redeemableEther_39 balance, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call the function and drain the contract's balance.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "320-324",
        "vulnerabilityReason": "The function uses send to transfer ether to the sender before resetting the balances_36 mapping.",
        "potentialSecurityRisk": "An attacker could trigger this function multiple times before the balance is updated, withdrawing more funds than allowed.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; if (msg.sender.send(balance)) { balances_36[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "332-339",
        "vulnerabilityReason": "The function sends ether to the sender before updating the counter_35, exposing it to reentrancy.",
        "potentialSecurityRisk": "This could allow an attacker to repeatedly invoke the function before counter_35 is updated, leading to fund exhaustion.",
        "fixedCode": "function callcheck_35() public { require(counter_35 <= 5); counter_35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    }
]