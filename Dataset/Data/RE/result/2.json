[
    {
        "vulnerableLines": "5-11",
        "vulnerabilityReason": "The function pauses execution and sends ether before updating the pause state, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker may exploit this function to call it multiple times, receiving more ether than intended.",
        "fixedCode": "function pause() public { require(isNotCalledPauseStatus); isNotCalledPauseStatus = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "14-18",
        "vulnerabilityReason": "The function sends ether to the user before updating their balance, leading to a potential reentrancy attack.",
        "potentialSecurityRisk": "Attackers can call this function repeatedly, withdrawing more ether than their balance allows and draining the contract.",
        "fixedCode": "function withdrawFunds(uint256 _weiToWithdraw) public { require(balances[msg.sender] >= _weiToWithdraw); balances[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "21-28",
        "vulnerabilityReason": "The function calls value on the caller and sends ether before updating the approval state, exposing it to reentrancy.",
        "potentialSecurityRisk": "Attackers may exploit this to repeatedly approve ether withdrawal, compromising the contract's intended behavior.",
        "fixedCode": "function approve() public { require(isNotCalledApproval); isNotCalledApproval = false; (bool success,) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "32-37",
        "vulnerabilityReason": "The function transfers ether without updating the redeemable balance first, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly call this function, withdrawing more than their entitled amount from the contract's funds.",
        "fixedCode": "function claimReward() public { require(redeemableEther[msg.sender] > 0); uint transferValue = redeemableEther[msg.sender]; redeemableEther[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "40-45",
        "vulnerabilityReason": "The function uses send to transfer ether before resetting the user balance, introducing reentrancy.",
        "potentialSecurityRisk": "An attacker can make repeated calls to deplete the contract's ether balance beyond their actual deposit.",
        "fixedCode": "function withdrawBalance() public { uint256 balance = userBalances[msg.sender]; if (!msg.sender.send(balance)) { revert(); } userBalances[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "48-54",
        "vulnerabilityReason": "The function calls value before setting the balance to zero, opening it up to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker can call this function multiple times to withdraw more ether than they are allowed, draining the contract.",
        "fixedCode": "function withdrawBalanceSecondary() public { uint256 balance = userBalanceSecondary[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (!success) { revert(); } userBalanceSecondary[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "67-71",
        "vulnerabilityReason": "The function transfers ether before setting the user's redeemable balance to zero, making it reentrancy-prone.",
        "potentialSecurityRisk": "Attackers can claim their reward repeatedly, withdrawing more funds than they have a right to, draining the contract.",
        "fixedCode": "function claimRewardSecondary() public { require(redeemableEtherSecondary[msg.sender] > 0); uint transferValueSecondary = redeemableEtherSecondary[msg.sender]; redeemableEtherSecondary[msg.sender] = 0; msg.sender.transfer(transferValueSecondary); }"
    },
    {
        "vulnerableLines": "73-78",
        "vulnerabilityReason": "The function sends ether before updating the user's balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers could continuously withdraw funds beyond their balance, effectively draining the contract's available ether.",
        "fixedCode": "function withdrawFundsSecondary(uint256 _weiToWithdraw) public { require(balancesSecondary[msg.sender] >= _weiToWithdraw); balancesSecondary[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "81-86",
        "vulnerabilityReason": "This function transfers ether prior to updating the user's redeemable balance, facilitating potential reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly claim rewards, withdrawing excess funds via this vulnerability.",
        "fixedCode": "function claimRewardThird() public { require(redeemableEtherThird[msg.sender] > 0); uint transferValueThird = redeemableEtherThird[msg.sender]; redeemableEtherThird[msg.sender] = 0; msg.sender.transfer(transferValueThird); }"
    },
    {
        "vulnerableLines": "90-96",
        "vulnerabilityReason": "Funds are sent before updating the function counter, which allows reentrant attacks to happen.",
        "potentialSecurityRisk": "An attacker could exploit this by calling the function multiple times, circumventing the intended counter limit.",
        "fixedCode": "function functionCallLimit() public { require(functionCounter <= 5); functionCounter += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "119-126",
        "vulnerabilityReason": "Ether is sent to the last player before updating the lastPlayer and jackpot state variables.",
        "potentialSecurityRisk": "An attacker can utilize reentrancy to buy multiple tickets, hence withdrawing more ether than they should be able to.",
        "fixedCode": "function buyTicket() public { require(!(lastPlayer.send(jackpot))); lastPlayer = msg.sender; jackpot = address(this).balance; }"
    },
    {
        "vulnerableLines": "148-155",
        "vulnerabilityReason": "Ether is sent to msg.sender before updating the function counter, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function, exploiting the delay in counter updates to withdraw excessive funds.",
        "fixedCode": "function functionCall() public { require(counterFunction <= 5); counterFunction += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "182-187",
        "vulnerabilityReason": "Ether is sent to the last player before updating lastPlayer and jackpot state variables.",
        "potentialSecurityRisk": "A reentrant attack may exploit the execution order to buy tickets multiple times and withdraw excess ether.",
        "fixedCode": "function buyTicketSecond() public { require(!(lastPlayerSecond.send(jackpotSecond))); lastPlayerSecond = msg.sender; jackpotSecond = address(this).balance; }"
    },
    {
        "vulnerableLines": "198-201",
        "vulnerabilityReason": "Ether is sent to the user before resetting their balance, making the function prone to reentrancy.",
        "potentialSecurityRisk": "An attacker can use reentrancy to call this function repeatedly, withdrawing more ether than their balance.",
        "fixedCode": "function withdrawUserBalance() public { uint256 balance = userBalances[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) userBalances[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "210-215",
        "vulnerabilityReason": "Ether is transferred to the user before resetting their redeemable balance, leading to potential reentrancy.",
        "potentialSecurityRisk": "Exploiters could repeatedly claim rewards, draining ether from the contract beyond their actual balance.",
        "fixedCode": "function claimRewardMapping() public { require(redeemableEtherSecondaryMapping[msg.sender] > 0); uint transferValueMapping = redeemableEtherSecondaryMapping[msg.sender]; redeemableEtherSecondaryMapping[msg.sender] = 0; msg.sender.transfer(transferValueMapping); }"
    },
    {
        "vulnerableLines": "225-228",
        "vulnerabilityReason": "Ether is sent before updating the user's balance, which exposes it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could withdraw funds repeatedly by calling this function due to the delay in updating the user's balance.",
        "fixedCode": "function withdrawSecondaryMapping() public { uint256 balance = balancesSecondaryMapping[msg.sender]; if (msg.sender.send(balance)) { balancesSecondaryMapping[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "235-241",
        "vulnerabilityReason": "Ether is sent before updating the counter, which allows the function to be executed multiple times via reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit the function to withdraw ether repeatedly, bypassing the function call limit.",
        "fixedCode": "function functionCallSecond() public { require(counterFunctionSecond <= 5); counterFunctionSecond += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "250-255",
        "vulnerabilityReason": "Ether is sent to the msg.sender before resetting their balance, making the function reentrancy-prone.",
        "potentialSecurityRisk": "Attackers can invoke reentrant calls to withdraw excess ether by repeatedly calling the function.",
        "fixedCode": "function withdrawUserBalanceMapping() public { uint256 balance = userBalanceMapping[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) userBalanceMapping[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "262-268",
        "vulnerabilityReason": "Ether is sent to the user before their balance is reset, susceptible to reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could drain the contract's funds by calling this function in a reentrant manner.",
        "fixedCode": "function withdrawUserBalanceMappingSecondary() public { uint256 balance = userBalanceMappingSecondary[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) userBalanceMappingSecondary[msg.sender] = 0; }"
    }
]