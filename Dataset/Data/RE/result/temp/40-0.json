[
    {
        "vulnerableLines": "66-71",
        "vulnerabilityReason": "The function `withdrawFunds` sends ether to the caller before deducting the balance of the user, potentially allowing reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function through reentrancy and deplete the contract's funds before the balance is updated.",
        "fixedCode": "function withdrawFunds(uint256 _weiToWithdraw) public { require(balances[msg.sender] >= _weiToWithdraw); balances[msg.sender] -= _weiToWithdraw; (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "76-80",
        "vulnerabilityReason": "The function `buyTicket` sends ether to the last player before updating the `lastPlayer` and `jackpot` variables, leaving a gap for reentrancy.",
        "potentialSecurityRisk": "A malicious contract could execute this function repeatedly, draining the contract's balance before it updates the state.",
        "fixedCode": "function buyTicket() public { if (!lastPlayer.send(jackpot)) revert(); lastPlayer = msg.sender; jackpot = address(this).balance; }"
    },
    {
        "vulnerableLines": "85-90",
        "vulnerabilityReason": "The function `withdrawFundsAlternative` sends ether to the caller before updating the `alternativeBalances`, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could deplete the contract's funds by calling the function recursively before the balance is reduced.",
        "fixedCode": "function withdrawFundsAlternative(uint256 _weiToWithdraw) public { require(alternativeBalances[msg.sender] >= _weiToWithdraw); alternativeBalances[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "96-103",
        "vulnerabilityReason": "The function `withdrawUserBalance` sends ether before resetting the user balance, which allows for reentrant execution.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function via reentrancy, causing the contract to send more funds than the attacker's actual balance.",
        "fixedCode": "function withdrawUserBalance() public { uint256 balance = userBalance[msg.sender]; userBalance[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "108-115",
        "vulnerabilityReason": "The function `activateFunctionCall` sends ether to the caller before updating the `isFunctionCalled` state, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function recursively, extracting more ether than intended from the contract.",
        "fixedCode": "function activateFunctionCall() public { require(isFunctionCalled); isFunctionCalled = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    }
]