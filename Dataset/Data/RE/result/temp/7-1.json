[
    {
        "vulnerableLines": "5-12",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the lastPlayerCheck variable, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker may call the function repeatedly before the lastPlayerCheck is updated, effectively draining the contract's funds.",
        "fixedCode": "function buyTicketCheck() public { lastPlayerCheck = msg.sender; jackpotCheck = address(this).balance; require(lastPlayerCheck.send(jackpotCheck)); }"
    },
    {
        "vulnerableLines": "18-24",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user\u2019s balance, allowing reentrant calls.",
        "potentialSecurityRisk": "An attacker can call the function repeatedly before balance is updated, withdrawing more funds than they are entitled to.",
        "fixedCode": "function withdrawUserFundsCheck(uint256 _weiToWithdraw) public { require(balancesUserCheck[msg.sender] >= _weiToWithdraw); balancesUserCheck[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "30-38",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the lastPlayerTransfer variable, leading to potential reentrancy.",
        "potentialSecurityRisk": "This opens up the contract to multiple malicious calls before the state variable is updated, allowing attackers to drain funds.",
        "fixedCode": "function buyTicketTransfer() public { lastPlayerTransfer = msg.sender; jackpotTransfer = address(this).balance; (bool success,) = lastPlayerTransfer.call.value(jackpotTransfer)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "44-50",
        "vulnerabilityReason": "The function transfers ether before resetting the user's reward balance, allowing for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can receive multiple ether transfers by repeatedly calling the function before the reward balance is reset.",
        "fixedCode": "function claimRewardTransfer() public { require(redeemableEtherBalancesTransfer[msg.sender] > 0); uint transferValueTransfer = redeemableEtherBalancesTransfer[msg.sender]; redeemableEtherBalancesTransfer[msg.sender] = 0; msg.sender.transfer(transferValueTransfer); }"
    },
    {
        "vulnerableLines": "56-62",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the user balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "Attackers can exploit the gap to withdraw more funds than their balance holds by repeatedly calling this function.",
        "fixedCode": "function withdrawUserBalanceTransfer() public { uint256 balance = userBalanceTransfer[msg.sender]; userBalanceTransfer[msg.sender] = 0; if (!(msg.sender.send(balance))) { revert(); } }"
    },
    {
        "vulnerableLines": "68-75",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the balance, exposing the contract to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could withdraw multiple times before the balance is updated, draining the contract\u2019s ether.",
        "fixedCode": "function withdrawUserBalanceWithdrawal() public { uint256 balance = userBalanceWithdrawal[msg.sender]; userBalanceWithdrawal[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "81-88",
        "vulnerabilityReason": "The function transfers ether before updating the state variable, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers can exploit this to repeatedly call the function, draining funds before the state is properly updated.",
        "fixedCode": "function resetCalled() public { require(notCalled); notCalled = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "96-102",
        "vulnerabilityReason": "The function transfers ether before resetting the user\u2019s redeemable balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could claim the reward multiple times by making repeated calls before the balance is reset.",
        "fixedCode": "function claimRewardCheck() public { require(redeemableEtherBalancesCheck[msg.sender] > 0); uint transferValueCheck = redeemableEtherBalancesCheck[msg.sender]; redeemableEtherBalancesCheck[msg.sender] = 0; msg.sender.transfer(transferValueCheck); }"
    },
    {
        "vulnerableLines": "110-115",
        "vulnerabilityReason": "The function sends ether before updating the balance, allowing for reentrancy vulnerabilities.",
        "potentialSecurityRisk": "This can enable attackers to withdraw more than their entitled amount by repeatedly invoking the function before state update.",
        "fixedCode": "function withdrawUserFundsCheck(uint256 _weiToWithdraw) public { require(balancesUserWithdrawCheck[msg.sender] >= _weiToWithdraw); balancesUserWithdrawCheck[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    }
]