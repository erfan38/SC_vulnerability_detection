[
    {
        "vulnerableLines": "15-19",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the balances, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is updated, potentially draining funds from the contract.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "38-44",
        "vulnerabilityReason": "The function transfers ether before updating the user's redeemable balance, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this function to withdraw funds multiple times before their balance is updated, draining the contract\u2019s funds.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }"
    },
    {
        "vulnerableLines": "73-77",
        "vulnerabilityReason": "The function uses call.value to transfer ether before resetting the user balance, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly during the ether transfer, causing the contract to transfer more funds than desired before the balance is updated.",
        "fixedCode": "function withdraw_balances_1() public { uint256 balance = balances_1[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { balances_1[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "95-101",
        "vulnerabilityReason": "The function sends ether before updating the counter, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function repeatedly before the counter is updated, potentially draining the contract\u2019s ether.",
        "fixedCode": "function callcheck_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "108-113",
        "vulnerabilityReason": "The function sends ether before updating the last player's address, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "A malicious contract could exploit this function to call it repeatedly before the last player's address is updated, draining the jackpot balance.",
        "fixedCode": "function buyTicket_23() public { require(!(lastPlayer_23.send(jackpot_23))); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }"
    }
]