[
    {
        "vulnerableLines": "6-13",
        "vulnerabilityReason": "The function sends ether to the previous last player before updating the lastPlayer_2 address, allowing reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly claim jackpot_2 before the lastPlayer_2 address is updated, draining the contract's funds.",
        "fixedCode": "function buyTicket_2() public { lastPlayer_2 = msg.sender; uint amount = jackpot_2; jackpot_2 = address(this).balance; if (!(lastPlayer_2.send(amount))) { revert(); } }"
    },
    {
        "vulnerableLines": "16-22",
        "vulnerabilityReason": "The function uses call.value to transfer ether before the user's balance is deducted, which can be exploited for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw more funds than their balance allows, potentially draining the contract's funds.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "25-32",
        "vulnerabilityReason": "The function sends ether to the previous last player before updating the lastPlayer_37 address, allowing reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly claim jackpot_37 before the lastPlayer_37 address is updated, draining the contract's funds.",
        "fixedCode": "function buyTicket_37() public { lastPlayer_37 = msg.sender; uint amount = jackpot_37; jackpot_37 = address(this).balance; if (!(lastPlayer_37.send(amount))) { revert(); } }"
    },
    {
        "vulnerableLines": "35-41",
        "vulnerabilityReason": "The function uses call.value to transfer ether before the user's balance is deducted, which can be exploited for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw more funds than their balance allows, potentially draining the contract's funds.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "50-58",
        "vulnerabilityReason": "The function sends ether to the previous last player before updating the lastPlayer_9 address, allowing reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly claim jackpot_9 before the lastPlayer_9 address is updated, draining the contract's funds.",
        "fixedCode": "function buyTicket_9() public { lastPlayer_9 = msg.sender; uint amount = jackpot_9; jackpot_9 = address(this).balance; (bool success, ) = lastPlayer_9.call.value(amount)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "61-67",
        "vulnerabilityReason": "The function sends ether to the user before updating the redeemableEther_25 balance, which can be exploited for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw more funds than their redeemable balance allows, potentially draining the contract's funds.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    },
    {
        "vulnerableLines": "70-75",
        "vulnerabilityReason": "The function sends ether to the user before updating the balances_31 balance, which can be exploited for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw more funds than their balance allows, potentially draining the contract's funds.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "78-86",
        "vulnerabilityReason": "The function uses call.value to send ether to the user before updating the callcheck_13 flag, potentially allowing reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly call this function, withdrawing more ether than allowed and draining the contract's funds.",
        "fixedCode": "function balances_13() public { require(callcheck_13); callcheck_13 = false; (bool success, ) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "103-109",
        "vulnerabilityReason": "The function sends ether to the user before resetting the userBalance_19 balance, allowing for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw multiple times before their balance is reset, potentially draining the contract's funds.",
        "fixedCode": "function withdrawBalance_19() public { uint balanceToSend = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; if (!msg.sender.send(balanceToSend)) { revert(); } }"
    }
]