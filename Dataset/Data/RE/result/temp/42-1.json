[
    {
        "vulnerableLines": "1-5",
        "vulnerabilityReason": "The function uses `send` to transfer the jackpot amount before updating `lastPlayer3`. This allows a reentrant call to execute again before state changes.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain funds associated with the jackpot as `lastPlayer3` is not updated before sending ether.",
        "fixedCode": "function buyTicket3() public { address payable previousPlayer = lastPlayer3; uint previousJackpot = jackpot3; lastPlayer3 = msg.sender; jackpot3 = address(this).balance; if (!previousPlayer.send(previousJackpot)) { revert(); } }"
    },
    {
        "vulnerableLines": "9-13",
        "vulnerabilityReason": "Funds are sent using `call.value` before the user balance is deducted, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "An attacker could reenter the function before the balances are updated, leading to an unauthorized withdrawal of additional funds.",
        "fixedCode": "function withdrawFunds3(uint256 _weiToWithdraw) public { require(balances3[msg.sender] >= _weiToWithdraw); balances3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "18-23",
        "vulnerabilityReason": "The function sends funds using `call.value` before updating `lastPlayer4`, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "A malicious contract could reenter and call this function repeatedly, draining the contract's funds.",
        "fixedCode": "function buyTicket4() public { address payable previousPlayer = lastPlayer4; uint previousJackpot = jackpot4; lastPlayer4 = msg.sender; jackpot4 = address(this).balance; (bool success,) = previousPlayer.call.value(previousJackpot)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "27-31",
        "vulnerabilityReason": "Sent funds using `transfer` call before updating the balance of the user, which makes it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can reenter during the `transfer` call and withdraw more than their entitled balance, draining contract funds.",
        "fixedCode": "function claimReward3() public { require(redeemableEther3[msg.sender] > 0); uint transferValue3 = redeemableEther3[msg.sender]; redeemableEther3[msg.sender] = 0; msg.sender.transfer(transferValue3); }"
    },
    {
        "vulnerableLines": "36-40",
        "vulnerabilityReason": "The function sends funds using `send` before resetting the user balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter this function multiple times, withdrawing more funds than they are entitled to, draining the contract balance.",
        "fixedCode": "function withdrawBalance2() public { uint balance = userBalance2[msg.sender]; userBalance2[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }"
    },
    {
        "vulnerableLines": "44-49",
        "vulnerabilityReason": "Funds are sent using `call.value` before resetting the user's balance, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw repeatedly, siphoning funds away from the contract.",
        "fixedCode": "function withdrawBalance3() public { uint balance = userBalance3[msg.sender]; userBalance3[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "53-56",
        "vulnerabilityReason": "Funds are sent using `send` before deducting the user's balance, exposing the contract to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit reentrancy to repeatedly withdraw funds before their balance is updated, potentially draining the contract.",
        "fixedCode": "function withdrawFunds4(uint256 _weiToWithdraw) public { require(balances4[msg.sender] >= _weiToWithdraw); balances4[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "60-66",
        "vulnerabilityReason": "The function uses `call.value` before updating the `notCalled2` variable, allowing for potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, siphoning ether from the contract before `notCalled2` is set to false.",
        "fixedCode": "function performCheck2() public { require(notCalled2); notCalled2 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "76-81",
        "vulnerabilityReason": "Funds are sent using `send` before setting the `notCalled3` variable, making it susceptible to reentrant attacks.",
        "potentialSecurityRisk": "This could be exploited by attackers to execute multiple withdrawals before state change, draining contract funds.",
        "fixedCode": "function performCheck3() public { require(notCalled3); notCalled3 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "92-97",
        "vulnerabilityReason": "The function uses `send` to transfer ether before updating the counter, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function checkCallCount2() public { require(counter2 <= 5); counter2 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "109-113",
        "vulnerabilityReason": "The function uses `send` to transfer the jackpot amount before updating `lastPlayer5`. This allows a reentrant call to execute again before state changes.",
        "potentialSecurityRisk": "A malicious contract could reenter and call this function repeatedly, draining the contract's funds.",
        "fixedCode": "function buyTicket5() public { address payable previousPlayer = lastPlayer5; uint previousJackpot = jackpot5; lastPlayer5 = msg.sender; jackpot5 = address(this).balance; if (!previousPlayer.send(previousJackpot)) { revert(); } }"
    }
]