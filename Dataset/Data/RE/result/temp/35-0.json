[
    {
        "vulnerableLines": "47-53",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the callcount_34 variable, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the callcount_34 variable is updated, potentially draining funds from the contract.",
        "fixedCode": "function userbalances_34() public { require(callcount_34); callcount_34 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "56-62",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_21, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter_21 is updated, potentially draining funds from the contract.",
        "fixedCode": "function callcheck_21() public { require(counter_21 <= 5); counter_21 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "66-70",
        "vulnerabilityReason": "The function sends ether to the user before updating their balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and withdraw more funds than they are entitled to, potentially draining the contract.",
        "fixedCode": "function withdraw_balances_36() public { uint balance = balances_36[msg.sender]; if (msg.sender.send(balance)) { balances_36[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "76-83",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_42, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter_42 is updated, potentially draining funds from the contract.",
        "fixedCode": "function callcheck_42() public { require(counter_42 <= 5); counter_42 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "94-101",
        "vulnerabilityReason": "The function sends ether to the previous player before updating the lastPlayer and jackpot variables, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly, draining the contract of the jackpot amount each time before state variables are updated.",
        "fixedCode": "function buyTicket_2() public { require(!(lastPlayer_2.send(jackpot_2))); lastPlayer_2 = msg.sender; jackpot_2 = address(this).balance; }"
    },
    {
        "vulnerableLines": "109-115",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before their balance is updated, potentially draining funds from the contract.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    }
]