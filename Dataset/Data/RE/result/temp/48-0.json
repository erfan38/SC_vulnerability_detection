[
    {
        "vulnerableLines": "28-33",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user's balance, which exposes it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before their balance is updated, depleting the contract's funds.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "37-42",
        "vulnerabilityReason": "The function transfers funds using send before updating the lastPlayer address, which exposes it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function multiple times before the state is updated, draining funds from the contract.",
        "fixedCode": "function buyTicket_37() public { if (!(lastPlayer_37.send(jackpot_37))) revert(); lastPlayer_37 = msg.sender; jackpot_37 = address(this).balance; }"
    },
    {
        "vulnerableLines": "45-50",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user's balance, which exposes it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this by calling the function multiple times before their balance is updated, draining funds from the contract.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "54-60",
        "vulnerabilityReason": "The function transfers funds using call.value before updating the lastPlayer address, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly call the function before the state is updated, draining funds from the contract.",
        "fixedCode": "function buyTicket_9() public { (bool success,) = lastPlayer_9.call.value(jackpot_9)(\"\"); if (!success) revert(); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "62-68",
        "vulnerabilityReason": "The function transfers ether to msg.sender before resetting their redeemable ether balance, which exposes it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could continuously reclaim rewards by calling the function multiple times before their balance is reset, draining the contract's funds.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    },
    {
        "vulnerableLines": "70-76",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the user's balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw more ether than they should by repeatedly invoking this function before their balance is updated.",
        "fixedCode": "function withdrawBalance_19() public { uint256 balance = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }"
    },
    {
        "vulnerableLines": "78-85",
        "vulnerabilityReason": "The function sends ether to msg.sender before updating the callcount_27 variable, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker could call this function multiple times before the state variable is updated, extracting more ether than intended.",
        "fixedCode": "function userbalances_27() public { require(callcount_27); callcount_27 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "88-92",
        "vulnerabilityReason": "The function sends ether to msg.sender before updating the user's balance in the contract, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly invoke the function before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "100-106",
        "vulnerabilityReason": "This function uses call.value to transfer funds before updating the user's balance, which can result in reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly execute this function before their balance is updated, depleting the contract's funds.",
        "fixedCode": "function withdrawBalance_26() public { uint256 balance = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "112-116",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user's balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call the function multiple times before the user balance is updated, depleting the contract's funds.",
        "fixedCode": "function withdraw_balances_21() public { uint256 balance = balances_21[msg.sender]; balances_21[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    }
]