[
    {
        "vulnerableLines": "6-10",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is reset, draining the contract's funds.",
        "fixedCode": "function withdrawBalances() public { uint256 amount = balancesWithdrawable[msg.sender]; balancesWithdrawable[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "12-18",
        "vulnerabilityReason": "The function uses send to transfer funds before resetting the user's balance, leading to potential reentrancy attacks.",
        "potentialSecurityRisk": "Attackers could repeatedly call this function before the user's balance is reset, draining the contract's funds.",
        "fixedCode": "function withdrawUserBalance() public { uint256 amount = userBalanceWithdrawable[msg.sender]; userBalanceWithdrawable[msg.sender] = 0; require(msg.sender.send(amount)); }"
    },
    {
        "vulnerableLines": "21-26",
        "vulnerabilityReason": "The function transfers ether before resetting the user's redeemable balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call the function and drain the contract's funds.",
        "fixedCode": "function claimReward() public { require(redeemableEtherBalances[msg.sender] > 0); uint transferValue = redeemableEtherBalances[msg.sender]; redeemableEtherBalances[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "29-33",
        "vulnerabilityReason": "The function uses send to transfer funds before resetting the user's balance, exposing it to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Attackers could drain the contract's funds by repeatedly calling this function before the user's balance is reset.",
        "fixedCode": "function withdrawReusableBalances() public { uint256 amount = balancesWithdrawReusable[msg.sender]; balancesWithdrawReusable[msg.sender] = 0; require(msg.sender.send(amount)); }"
    },
    {
        "vulnerableLines": "35-42",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the counter, leaving it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is updated, draining the contract's funds.",
        "fixedCode": "function callme() public { require(counter <= 5); counter += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "44-51",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, leading to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is reset, draining the contract's funds.",
        "fixedCode": "function withdrawUserBalanceInfo() public { uint256 amount = userBalance[msg.sender]; userBalance[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "53-60",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is reset, draining the contract's funds.",
        "fixedCode": "function withdrawCheckUserBalance() public { uint256 amount = userBalanceCheck[msg.sender]; userBalanceCheck[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "71-78",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the counter, resulting in potential reentrancy attacks.",
        "potentialSecurityRisk": "Attackers could exploit this to repeatedly call the function, draining the contract's funds before the counter is updated.",
        "fixedCode": "function callmeTwo() public { require(counterTwo <= 5); counterTwo += 1; require(msg.sender.send(10 ether)); }"
    },
    {
        "vulnerableLines": "84-91",
        "vulnerabilityReason": "The function uses send to transfer the jackpot before updating the last player's address, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly call the function, receiving the jackpot amount multiple times before the state is updated.",
        "fixedCode": "function buyTicket() public { require(lastPlayer.send(jackpot)); lastPlayer = msg.sender; jackpot = address(this).balance; }"
    },
    {
        "vulnerableLines": "97-103",
        "vulnerabilityReason": "The function uses call.value to transfer funds before deducting the user's balance, exposing it to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the user's balance is deducted, draining the contract's funds.",
        "fixedCode": "function withdrawUserFunds(uint256 _weiToWithdraw) public { require(balancesUserWithdraw[msg.sender] >= _weiToWithdraw); balancesUserWithdraw[msg.sender] -= _weiToWithdraw; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    }
]