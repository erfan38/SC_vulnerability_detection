[
    {
        "vulnerableLines": "8-14",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayerThree variable, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the lastPlayerThree is updated, potentially draining funds from the contract.",
        "fixedCode": "function buyTicketThree() public { require(!(lastPlayerThree.send(jackpotThree))); lastPlayerThree = msg.sender; jackpotThree = address(this).balance; }"
    },
    {
        "vulnerableLines": "33-38",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could call this function again during the fund transfer, allowing them to withdraw funds continuously before their balance is reset.",
        "fixedCode": "function withdrawBalancesEight() public { uint256 balance = balancesEight[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balancesEight[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "47-53",
        "vulnerabilityReason": "The function transfers funds before updating the redeemableEtherClaimed balance, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly claim rewards before their balance is reset, draining the contract's funds.",
        "fixedCode": "function claimRewardClaimed() public { require(redeemableEtherClaimed[msg.sender] > 0); uint transferValueClaimed = redeemableEtherClaimed[msg.sender]; redeemableEtherClaimed[msg.sender] = 0; msg.sender.transfer(transferValueClaimed); }"
    },
    {
        "vulnerableLines": "64-68",
        "vulnerabilityReason": "Funds are sent to the user before the balance is deducted, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "An attacker could drain the contract\u2019s funds by exploiting this reentrancy, receiving more ether than their allowed balance.",
        "fixedCode": "function withdrawBalancesThirtySix() public { uint256 balance = balancesThirtySix[msg.sender]; if (msg.sender.send(balance)) { balancesThirtySix[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "77-84",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function thirtyFiveCall() public { require(counterThirtyFive <= 5); counterThirtyFive += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "93-100",
        "vulnerabilityReason": "Use of call.value to send funds before validating the user\u2019s balance, which is prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could invoke this contract reentrantly, siphoning more funds than they have deposited.",
        "fixedCode": "function withdrawBalance() public { uint256 balance = userBalance[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalance[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "105-114",
        "vulnerabilityReason": "The function sends funds to the user before updating their balance, leading to a potential reentrancy attack.",
        "potentialSecurityRisk": "This can allow attackers to make repeated calls, withdrawing more than their balance allows, draining the contract.",
        "fixedCode": "function withdrawBalanceThirtyThree() public { uint256 balance = userBalanceThirtyThree[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalanceThirtyThree[msg.sender] = 0; }"
    }
]