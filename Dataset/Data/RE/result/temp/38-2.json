[
    {
        "vulnerableLines": "6-13",
        "vulnerabilityReason": "The function sends ether using send before updating the counter_14 variable, which may allow reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling the function before the counter is updated, causing a drain of funds.",
        "fixedCode": "function callcheck_14() public { require(counter_14 <= 5); counter_14 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "31-38",
        "vulnerabilityReason": "The function sends ether to the lastPlayer_30 before updating the state variables, which introduces a reentrancy vulnerability.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain the jackpot before state variables are correctly updated.",
        "fixedCode": "function buyTicket_30() public { require(lastPlayer_30.send(jackpot_30)); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "45-50",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the balance, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker might repeatedly call this function, withdrawing funds multiple times before the balance updates.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balances_8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "58-64",
        "vulnerabilityReason": "The function transfers ether using transfer before zeroing out the balance, which introduces a reentrancy vulnerability.",
        "potentialSecurityRisk": "Reentrancy can be exploited to drain rewards multiple times, leading to significant loss of contract funds.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "86-90",
        "vulnerabilityReason": "The function uses send before updating the balances, allowing potential reentrancy scenarios.",
        "potentialSecurityRisk": "Reentrancy could be exploited to withdraw funds multiple times before the balance is cleared, leading to loss of funds.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; if (msg.sender.send(balance)) balances_36[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "98-105",
        "vulnerabilityReason": "The function sends ether using send before updating the counter_35 variable, which may allow reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling the function before the counter is updated, causing a drain of funds.",
        "fixedCode": "function callcheck_35() public { require(counter_35 <= 5); counter_35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "113-120",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker might repeatedly call this function, withdrawing funds multiple times before the balance updates.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalance_40[msg.sender] = 0; }"
    }
]