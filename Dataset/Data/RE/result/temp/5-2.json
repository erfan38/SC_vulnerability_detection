[
    {
        "vulnerableLines": "1-7",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, allowing for potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is updated, draining the contract of ether.",
        "fixedCode": "function callMe7() public { require(counter7 <= 5); counter7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "10-18",
        "vulnerabilityReason": "The function uses call.value to send ether before updating the notCalled13 variable, making it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function before notCalled13 is updated, draining funds from the contract.",
        "fixedCode": "function initializeNotCalled13() public { require(notCalled13); notCalled13 = false; (bool success,) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "31-38",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, allowing for potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is updated, draining the contract of ether.",
        "fixedCode": "function callMe14() public { require(counter14 <= 5); counter14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "46-53",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayerToken30 variable, making it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before lastPlayerToken30 is updated, draining the contract's jackpot.",
        "fixedCode": "function buyTicketToken30() public { require(!(lastPlayerToken30.send(jackpotToken30))); lastPlayerToken30 = msg.sender; jackpotToken30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "59-64",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the balancesToken8 variable, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before balancesToken8 is reset, draining the contract's funds.",
        "fixedCode": "function withdrawBalancesToken8() public { uint256 balance = balancesToken8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) balancesToken8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "70-76",
        "vulnerabilityReason": "The function transfers funds before resetting the redeemableEther39 variable, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before redeemableEther39 is reset, draining the contract's funds.",
        "fixedCode": "function claimReward39() public { require(redeemableEther39[msg.sender] > 0); uint transferValue39 = redeemableEther39[msg.sender]; redeemableEther39[msg.sender] = 0; msg.sender.transfer(transferValue39); }"
    },
    {
        "vulnerableLines": "82-86",
        "vulnerabilityReason": "The function transfers funds using send before resetting the balancesToken36 variable, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before balancesToken36 is reset, draining the contract's funds.",
        "fixedCode": "function withdrawBalancesToken36() public { uint256 balance = balancesToken36[msg.sender]; if (msg.sender.send(balance)) { balancesToken36[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "94-101",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, allowing for potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is updated, draining the contract of ether.",
        "fixedCode": "function callMe35() public { require(counter35 <= 5); counter35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    }
]