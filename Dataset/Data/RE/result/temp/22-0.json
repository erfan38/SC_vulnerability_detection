[
    {
        "vulnerableLines": "6-8",
        "vulnerabilityReason": "Funds are sent to the user before the balance is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdraw_balances_15() public { uint balance = balances_15[msg.sender]; balances_15[msg.sender] = 0; if (!msg.sender.send(balance)) { balances_15[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "15-21",
        "vulnerabilityReason": "Funds are sent to the user before the state variable is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the state variable is updated, draining the contract's funds.",
        "fixedCode": "function updates_41() public { require(var_balance_41); var_balance_41 = false; if (!msg.sender.send(1 ether)) { var_balance_41 = true; revert(); } }"
    },
    {
        "vulnerableLines": "32-38",
        "vulnerabilityReason": "Funds are sent to the user before the counter is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the counter is updated, draining the contract's funds.",
        "fixedCode": "function checking_42() public { require(counter_42 <= 5); counter_42 += 1; if (!msg.sender.send(10 ether)) { counter_42 -= 1; revert(); } }"
    },
    {
        "vulnerableLines": "54-55",
        "vulnerabilityReason": "Funds are sent to the user before the balance is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdraw_balances_36() public { uint balance = balances_36[msg.sender]; balances_36[msg.sender] = 0; if (!msg.sender.send(balance)) { balances_36[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "66-68",
        "vulnerabilityReason": "Funds are sent to the previous player before updating the last player's address, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function, receiving the jackpot funds multiple times.",
        "fixedCode": "function buyTicket_2() public { require(lastPlayer_2.send(jackpot_2)); lastPlayer_2 = msg.sender; jackpot_2 = address(this).balance; }"
    },
    {
        "vulnerableLines": "77-81",
        "vulnerabilityReason": "Funds are sent to the user before the balance is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] = 0; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); balances_17[msg.sender] = balances_17[msg.sender] - _weiToWithdraw; }"
    },
    {
        "vulnerableLines": "90-92",
        "vulnerabilityReason": "Funds are sent to the previous player before updating the last player's address, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function, receiving the jackpot funds multiple times.",
        "fixedCode": "function buyTicket_37() public { require(lastPlayer_37.send(jackpot_37)); lastPlayer_37 = msg.sender; jackpot_37 = address(this).balance; }"
    },
    {
        "vulnerableLines": "98-102",
        "vulnerabilityReason": "The function sends funds to the user before updating their balance which allows a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could execute multiple calls to this function before the balance is updated, draining the funds.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] = 0; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); balances_3[msg.sender] = balances_3[msg.sender] - _weiToWithdraw; }"
    },
    {
        "vulnerableLines": "107-110",
        "vulnerabilityReason": "Funds are sent to the previous player before updating the last player's address, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function, receiving the jackpot funds multiple times.",
        "fixedCode": "function buyTicket_9() public { require(lastPlayer_9.call.value(jackpot_9)('')); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "116-120",
        "vulnerabilityReason": "The function sends funds to the user before updating their balance which allows a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could execute multiple calls to this function before the balance is updated, draining the funds.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    }
]