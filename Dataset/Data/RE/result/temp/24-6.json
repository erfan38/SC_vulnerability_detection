[
    {
        "vulnerableLines": "21-28",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_35, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter call limit is updated, potentially draining funds from the contract.",
        "fixedCode": "function checking_35() public { require(counter_35 <= 5); counter_35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "50-57",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could call this function again during the fund transfer, allowing them to withdraw funds continuously before their balance is reset.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; userBalance_40[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "109-116",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw funds before their balance is updated, draining the contract.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; userBalance_33[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    }
]