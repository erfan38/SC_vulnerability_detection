[
    {
        "vulnerableLines": "19-25",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the callcount_41 variable, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the callcount_41 flag is updated, potentially draining funds from the contract.",
        "fixedCode": "function userbalances_41() public { require(callcount_41); callcount_41 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "29-33",
        "vulnerabilityReason": "Funds are sent to the user before the balance is deducted, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "42-48",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_7, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function callcheck_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "56-61",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_23. This allows a reentrant call to execute again before state changes.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain funds associated with the jackpot as the lastPlayer_23 is not updated before sending ether.",
        "fixedCode": "function buyTicket_23() public { require(!(lastPlayer_23.send(jackpot_23))); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }"
    },
    {
        "vulnerableLines": "70-76",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_42, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function callcheck_42() public { require(counter_42 <= 5); counter_42 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "94-100",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_14, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function callcheck_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "107-112",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_30. This allows a reentrant call to execute again before state changes.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain funds associated with the jackpot as the lastPlayer_30 is not updated before sending ether.",
        "fixedCode": "function buyTicket_30() public { require(!(lastPlayer_30.send(jackpot_30))); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    }
]