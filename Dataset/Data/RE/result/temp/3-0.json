[
    {
        "vulnerableLines": "3-11",
        "vulnerabilityReason": "The function exampleFunction27 sends ether before updating the isFunctionNotCalled27 flag, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call exampleFunction27, withdrawing more ether than intended.",
        "fixedCode": "function exampleFunction27() public { require(isFunctionNotCalled27); isFunctionNotCalled27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "13-18",
        "vulnerabilityReason": "The function withdrawFunds31 sends funds before updating the user balance, making it vulnerable to a reentrant attack.",
        "potentialSecurityRisk": "An attacker could exploit this reentrancy vulnerability to withdraw more ether than their balance allows.",
        "fixedCode": "function withdrawFunds31(uint256 _weiToWithdraw) public { require(balances31[msg.sender] >= _weiToWithdraw); balances31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "20-28",
        "vulnerabilityReason": "The function exampleFunction13 uses call.value to send ether before updating the isFunctionNotCalled13 flag, leading to reentrancy risks.",
        "potentialSecurityRisk": "Attackers can exploit this to call the function repeatedly, obtaining more ether than intended.",
        "fixedCode": "function exampleFunction13() public { require(isFunctionNotCalled13); isFunctionNotCalled13 = false; (bool success,) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "31-39",
        "vulnerabilityReason": "The function buyTicket9 sends ether before updating the lastPlayer address, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract can repeatedly call this function, draining the contract's balance.",
        "fixedCode": "function buyTicket9() public { (bool success,) = lastPlayer9.call.value(jackpot9)(''); if (!success) { revert(); } lastPlayer9 = msg.sender; jackpot9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "41-47",
        "vulnerabilityReason": "The function claimReward25 transfers funds before resetting the user balance, which can be exploited through reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly call this function to siphon more funds than intended.",
        "fixedCode": "function claimReward25() public { require(redeemableEther25[msg.sender] > 0); uint transferValue25 = redeemableEther25[msg.sender]; redeemableEther25[msg.sender] = 0; msg.sender.transfer(transferValue25); }"
    },
    {
        "vulnerableLines": "49-55",
        "vulnerabilityReason": "The function withdrawBalance19 sends ether before resetting the user balance, enabling potential reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract might exploit this vulnerability to withdraw more funds than its balance.",
        "fixedCode": "function withdrawBalance19() public { uint256 balance = userBalance19[msg.sender]; if (!(msg.sender.send(balance))) { revert(); } userBalance19[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "57-64",
        "vulnerabilityReason": "The function withdrawBalance26 uses call.value before updating the user balance, leading to reentrancy risks.",
        "potentialSecurityRisk": "Attackers can exploit this reentrancy vulnerability to continuously withdraw funds, draining the contract.",
        "fixedCode": "function withdrawBalance26() public { uint256 balance = userBalance26[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (!success) { revert(); } userBalance26[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "66-73",
        "vulnerabilityReason": "The function exampleFunction20 sends ether before updating the isFunctionNotCalled20 flag, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could reenter this function multiple times, withdrawing excessive ether.",
        "fixedCode": "function exampleFunction20() public { require(isFunctionNotCalled20); isFunctionNotCalled20 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "76-82",
        "vulnerabilityReason": "The function claimReward32 transfers funds before resetting the user's redeemable balance, permitting reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call this contract to drain ether from the contract by exploiting the reentrancy vulnerability.",
        "fixedCode": "function claimReward32() public { require(redeemableEther32[msg.sender] > 0); uint transferValue32 = redeemableEther32[msg.sender]; redeemableEther32[msg.sender] = 0; msg.sender.transfer(transferValue32); }"
    },
    {
        "vulnerableLines": "84-89",
        "vulnerabilityReason": "The function withdrawFunds38 sends ether before updating the user balance, allowing for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could reenter this function multiple times to withdraw more ether than their balance.",
        "fixedCode": "function withdrawFunds38(uint256 _weiToWithdraw) public { require(balances38[msg.sender] >= _weiToWithdraw); balances38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "92-98",
        "vulnerabilityReason": "The function claimReward4 transfers funds before resetting the user's redeemable balance, leading to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Attackers can exploit this reentrancy to deplete the contract's ether by calling the function repeatedly.",
        "fixedCode": "function claimReward4() public { require(redeemableEther4[msg.sender] > 0); uint transferValue4 = redeemableEther4[msg.sender]; redeemableEther4[msg.sender] = 0; msg.sender.transfer(transferValue4); }"
    }
]