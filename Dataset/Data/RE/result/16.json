[
    {
        "vulnerableLines": "30-35",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_21, allowing for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is updated, potentially draining funds from the contract.",
        "fixedCode": "function update_21() public { require(counter_21 <= 5); counter_21 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "39-42",
        "vulnerabilityReason": "Funds are sent to the user before their balance is decremented, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function before their balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawFunds_10(uint256 _weiToWithdraw) public { require(balances_10[msg.sender] >= _weiToWithdraw); balances_10[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "46-50",
        "vulnerabilityReason": "The function sends ether before resetting the user balance, which exposes it to reentrancy.",
        "potentialSecurityRisk": "An attacker could perform multiple withdrawals using reentrancy before their balance is reset.",
        "fixedCode": "function withdraw_balances_21() public { uint256 balance = balances_21[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balances_21[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "53-57",
        "vulnerabilityReason": "Ether is sent before the balance is reset, which allows for reentrancy.",
        "potentialSecurityRisk": "Attackers could call this function multiple times within the same transaction, depleting the contract's funds.",
        "fixedCode": "function withdrawBalance_12() public { uint256 balance = userBalance_12[msg.sender]; if (!(msg.sender.send(balance))) { revert(); } userBalance_12[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "61-65",
        "vulnerabilityReason": "Transfer of funds happens before resetting the redeemableEther balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "This could be exploited to drain more funds than allowed by claiming rewards before balances are updated.",
        "fixedCode": "function claimReward_11() public { require(redeemableEther_11[msg.sender] > 0); uint transferValue_11 = redeemableEther_11[msg.sender]; redeemableEther_11[msg.sender] = 0; msg.sender.transfer(transferValue_11); }"
    },
    {
        "vulnerableLines": "70-73",
        "vulnerabilityReason": "The function calls send before zeroing out the user\u2019s balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers can exploit this by repeatedly calling the function in a reentrant manner, draining the contract.",
        "fixedCode": "function withdraw_balances_1() public { uint256 balance = balances_1[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balances_1[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "76-81",
        "vulnerabilityReason": "The function sends ether without updating the counter first, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly, draining the contract's funds.",
        "fixedCode": "function update_35() public { require(counter_35 <= 5); counter_35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "86-90",
        "vulnerabilityReason": "The function calls send before resetting the user's balance, exposing it to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Malicious actors can call this function in a reentrant manner, depleting the user's balance beyond limits.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalance_40[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "95-103",
        "vulnerabilityReason": "The function sends funds before resting the user's redeemable rewards, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "This vulnerability could be exploited to repeatedly claim rewards, draining the contract's funds.",
        "fixedCode": "function claimReward_18() public { require(redeemableEther_18[msg.sender] > 0); uint transferValue_18 = redeemableEther_18[msg.sender]; redeemableEther_18[msg.sender] = 0; msg.sender.transfer(transferValue_18); }"
    },
    {
        "vulnerableLines": "107-111",
        "vulnerabilityReason": "The function calls send before updating the user's balance, enabling reentrancy attacks.",
        "potentialSecurityRisk": "Attackers could call this function repeatedly, draining more funds than they should be allowed.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalance_33[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "119-124",
        "vulnerabilityReason": "Transfer of ether takes place before setting the state variable, creating a vulnerability to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function to drain ether, as the state variable remains unchanged during the transaction.",
        "fixedCode": "function withdraw_41() public { require(variable_41); variable_41 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "137-143",
        "vulnerabilityReason": "This function sends ether before updating the counter, allowing it to be vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious user could exploit this reentrancy to invoke the function multiple times, draining the contract.",
        "fixedCode": "function update_42() public { require(counter_42 <= 5); counter_42 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "153-156",
        "vulnerabilityReason": "The function sends ether before resetting the user's balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "The contract's balance could be drained by an attacker calling this function repeatedly before the balance update.",
        "fixedCode": "function withdraw_balances_29() public { uint256 balance = balances_29[msg.sender]; if (msg.sender.send(balance)) { balances_29[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "160-164",
        "vulnerabilityReason": "The function calls send before updating the variable, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function, resulting in one ether being drained multiple times.",
        "fixedCode": "function withdraw_6() public { require(variable_6); variable_6 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "170-174",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_16 address, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "A reentrant call could be used to claim multiple jackport payouts, draining the contract's funds.",
        "fixedCode": "function buyTicket_16() public { require(!(lastPlayer_16.send(jackpot_16))); lastPlayer_16 = msg.sender; jackpot_16 = address(this).balance; }"
    },
    {
        "vulnerableLines": "179-181",
        "vulnerabilityReason": "The ether transfer happens before user balance is updated, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit the reentrancy to drain funds continuously without updating their balance.",
        "fixedCode": "function withdrawFunds_24(uint256 _weiToWithdraw) public { require(balances_24[msg.sender] >= _weiToWithdraw); balances_24[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "186-189",
        "vulnerabilityReason": "Ether is sent to the user before their balance is updated, allowing for reentrancy attacks.",
        "potentialSecurityRisk": "A malicious user could call this function multiple times in a reentrant manner, siphoning more funds than allowed.",
        "fixedCode": "function withdrawBalance_5() public { uint256 balance = userBalance_5[msg.sender]; if (!(msg.sender.send(balance))) { revert(); } userBalance_5[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "194-196",
        "vulnerabilityReason": "Ether transfer takes place before updating the user's balance, leading to reentrancy risks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly to drain more funds than allowed, compromising the contract.",
        "fixedCode": "function withdraw_balances_15() public { uint256 balance = balances_15[msg.sender]; if (msg.sender.send(balance)) { balances_15[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "201-205",
        "vulnerabilityReason": "The function sends ether before updating the counter, creating potential for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this reentrancy to invoke the function multiple times, draining the contract.",
        "fixedCode": "function update_28() public { require(counter_28 <= 5); counter_28 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "243-246",
        "vulnerabilityReason": "Ether transfer happens before the user's balance is updated, exposing a reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly calling the function before the balance is decremented.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "266-270",
        "vulnerabilityReason": "The function calls msg.sender.call.value before decrementing the user's balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could perform multiple withdrawals using reentrancy before their balance is updated.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "281-288",
        "vulnerabilityReason": "Jackpot is sent before the lastPlayer_9 is updated, allowing for reentrancy attacks.",
        "potentialSecurityRisk": "This could allow multiple jackpot claims via reentrancy, draining the contract's balance.",
        "fixedCode": "function buyTicket_9() public { require(!(lastPlayer_9.call.value(jackpot_9)(\"\");)); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "312-315",
        "vulnerabilityReason": "Ether transfer is made before the balance is updated, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker could use reentrancy to repeatedly call this function, withdrawing more funds than their balance allows.",
        "fixedCode": "function withdrawBalance_19() public { uint256 balance = userBalance_19[msg.sender]; if (!(msg.sender.send(balance))) { revert(); } userBalance_19[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "324-328",
        "vulnerabilityReason": "The function sends ether before resetting the user balance, enabling reentrancy attacks.",
        "potentialSecurityRisk": "A malicious user could exploit this by calling the function multiple times in a loop, draining the funds.",
        "fixedCode": "function withdrawBalance_26() public { uint256 balance = userBalance_26[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalance_26[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "363-365",
        "vulnerabilityReason": "Send operation occurs before balance update, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this by calling the function reentrantly to drain the contract's balance.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "401-403",
        "vulnerabilityReason": "Jackpot is sent before the lastPlayer_23 is updated, allowing for potential reentrancy attacks.",
        "potentialSecurityRisk": "This vulnerability could allow an attacker to claim the jackpot multiple times, exhausting the contract's funds.",
        "fixedCode": "function buyTicket_23() public { if (!(lastPlayer_23.send(jackpot_23))) { revert(); } lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }"
    },
    {
        "vulnerableLines": "428-431",
        "vulnerabilityReason": "Funds are sent to lastPlayer_30 before updating the jackpot_30, enabling reentrancy.",
        "potentialSecurityRisk": "An attacker could drain the contract by reentrantly claiming the jackpot multiple times.",
        "fixedCode": "function buyTicket_30() public { if (!(lastPlayer_30.send(jackpot_30))) { revert(); } lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "443-446",
        "vulnerabilityReason": "The function calls send before resetting the user\u2019s balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "This vulnerability could be exploited by an attacker to invoke multiple withdrawals, draining more funds than intended.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balances_8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "456-459",
        "vulnerabilityReason": "Ether transfer occurs before the redeemableEther balance is reset, leading to reentrancy risks.",
        "potentialSecurityRisk": "An attacker could continuously claim rewards in a reentrant manner, draining the contract's funds.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "469-471",
        "vulnerabilityReason": "Send operation before resetting the user\u2019s balance enables reentrancy attacks.",
        "potentialSecurityRisk": "Malicious actors could exploit this by invoking multiple withdrawals, siphoning more funds than available.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; if (msg.sender.send(balance)) { balances_36[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "475-479",
        "vulnerabilityReason": "The function uses send before updating the state variable, exposing it to potential reentrancy.",
        "potentialSecurityRisk": "An exploiter could call this function repeatedly, infinitesimally draining one ether on each call without updating the state.",
        "fixedCode": "function withdraw_27() public { require(variable_27); variable_27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "484-486",
        "vulnerabilityReason": "The function sends ether before decrementing the balance, leading to reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, taking advantage of reentrancy to drain more funds than allowed.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "492-496",
        "vulnerabilityReason": "Send is invoked before updating the state variable, leading to reentrancy issues.",
        "potentialSecurityRisk": "An attacker might call this function multiple times, exploiting the non-updated state to drain ether from the contract.",
        "fixedCode": "function withdraw_13() public { require(variable_13); variable_13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    }
]