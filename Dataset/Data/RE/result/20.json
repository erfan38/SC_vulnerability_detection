[
    {
        "vulnerableLines": "8-11",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, which is vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly call the withdraw_balancesUpdated21 function to drain funds before the balance is updated.",
        "fixedCode": "function withdraw_balancesUpdated21() public { uint256 balance = balancesUpdated21[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balancesUpdated21[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "16-21",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, making it susceptible to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to call withdrawBalanceUpdated40 multiple times, withdrawing more funds than allowed.",
        "fixedCode": "function withdrawBalanceUpdated40() public { uint256 balance = userBalanceUpdated40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } userBalanceUpdated40[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "29-33",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user balance, making it prone to a reentrant attack.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability to call withdrawFundsUpdated17 multiple times and drain more funds than their balance allows.",
        "fixedCode": "function withdrawFundsUpdated17(uint256 _weiToWithdraw) public { require(balancesUpdated17[msg.sender] >= _weiToWithdraw); balancesUpdated17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "45-51",
        "vulnerabilityReason": "The function sends funds using send before updating the lastPlayerUpdated37, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly buy tickets while the contract still believes them to have more funds.",
        "fixedCode": "function buyTicketUpdated37() public { if (!(lastPlayerUpdated37.send(jackpotUpdated37))) revert(); lastPlayerUpdated37 = msg.sender; jackpotUpdated37 = address(this).balance; }"
    },
    {
        "vulnerableLines": "59-64",
        "vulnerabilityReason": "The function uses send to transfer funds before resetting the user balance, which allows reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call withdrawBalanceUpdated12 to withdraw more funds than they are entitled to.",
        "fixedCode": "function withdrawBalanceUpdated12() public { uint256 balance = userBalanceUpdated12[msg.sender]; if (!msg.sender.send(balance)) { revert(); } userBalanceUpdated12[msg.sender] = 0;}"
    },
    {
        "vulnerableLines": "69-74",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could reenter withdrawBalanceUpdated33, calling it multiple times to extract more funds than they own.",
        "fixedCode": "function withdrawBalanceUpdated33() public { uint256 balance = userBalanceUpdated33[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } userBalanceUpdated33[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "89-93",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the balance, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the withdrawFundsUpdated3 function, allowing repeated withdrawals beyond their balance.",
        "fixedCode": "function withdrawFundsUpdated3(uint256 _weiToWithdraw) public { require(balancesUpdated3[msg.sender] >= _weiToWithdraw); balancesUpdated3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success);}"
    },
    {
        "vulnerableLines": "122-126",
        "vulnerabilityReason": "The function sends ether using call.value before updating the lastPlayerUpdated9 and jackpotUpdated9, making it prone to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call buyTicketUpdated9 to extract more ether from the contract than they are entitled to.",
        "fixedCode": "function buyTicketUpdated9() public { (bool success,) = lastPlayerUpdated9.call.value(jackpotUpdated9)(\"\"); if (!success) { revert(); } lastPlayerUpdated9 = msg.sender; jackpotUpdated9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "138-142",
        "vulnerabilityReason": "The function transfers ether using transfer before the user reward balance is updated, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw their rewards by calling claimRewardUpdated25 multiple times before the balance is reset.",
        "fixedCode": "function claimRewardUpdated25() public { require(redeemableEtherUpdated25[msg.sender] > 0); uint256 transferValueUpdated25 = redeemableEtherUpdated25[msg.sender]; redeemableEtherUpdated25[msg.sender] = 0; msg.sender.transfer(transferValueUpdated25); }"
    },
    {
        "vulnerableLines": "153-157",
        "vulnerabilityReason": "The function transfers ether using transfer before updating the reward balance, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can exploit this by calling claimRewardUpdated11 multiple times to withdraw more ether than they are entitled to.",
        "fixedCode": "function claimRewardUpdated11() public { require(redeemableEtherUpdated11[msg.sender] > 0); uint256 transferValueUpdated11 = redeemableEtherUpdated11[msg.sender]; redeemableEtherUpdated11[msg.sender] = 0; msg.sender.transfer(transferValueUpdated11); }"
    },
    {
        "vulnerableLines": "161-164",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the user balance, allowing a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call withdraw_balancesUpdated1 and extract more funds than permitted.",
        "fixedCode": "function withdraw_balancesUpdated1() public { uint256 balance = balancesUpdated1[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balancesUpdated1[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "169-173",
        "vulnerabilityReason": "The function sends ether using send before setting not_calledActive41 to false, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could use reentrancy to call checkActive41 multiple times, extracting more ether than allowed by the contract.",
        "fixedCode": "function checkActive41() public { require(not_calledActive41); not_calledActive41 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "178-182",
        "vulnerabilityReason": "The function sends ether using send before the counterUpdated42 variable is incremented, causing a reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could use reentrancy to repeatedly call the callmeUpdated42 function, allowing more ether to be withdrawn than intended.",
        "fixedCode": "function callmeUpdated42() public { require(counterUpdated42 <= 5); counterUpdated42 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "187-192",
        "vulnerabilityReason": "Ether is sent using send before setting not_calledActive27 to false, making this function prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this by reentering checkActive27 multiple times, withdrawing more ether than they should be able to.",
        "fixedCode": "function checkActive27() public { require(not_calledActive27); not_calledActive27 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "197-199",
        "vulnerabilityReason": "Funds are transferred before the balance deduction, creating an opportunity for a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could exploit this to reenter withdrawFundsUpdated31, withdrawing more ether than their balance allows.",
        "fixedCode": "function withdrawFundsUpdated31(uint256 _weiToWithdraw) public { require(balancesUpdated31[msg.sender] >= _weiToWithdraw); balancesUpdated31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "203-209",
        "vulnerabilityReason": "Ether is sent using call.value before marking not_calledActive13 false, enabling a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could reenter the checkActive13 function multiple times before the state is updated, allowing unauthorized ether withdrawal.",
        "fixedCode": "function checkActive13() public { require(not_calledActive13); not_calledActive13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "231-235",
        "vulnerabilityReason": "Funds are sent using send before updating the user balance, making this function susceptible to a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could use reentrancy to call withdrawBalanceUpdated19 multiple times, withdrawing more ether than they own.",
        "fixedCode": "function withdrawBalanceUpdated19() public { uint256 balance = userBalanceUpdated19[msg.sender]; if (!msg.sender.send(balance)) { revert(); } userBalanceUpdated19[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "241-245",
        "vulnerabilityReason": "Ether is sent using call.value before updating the user balance, making this function prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling withdrawBalanceUpdated26 to withdraw more ether than they are entitled to.",
        "fixedCode": "function withdrawBalanceUpdated26() public { uint256 balance = userBalanceUpdated26[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } userBalanceUpdated26[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "263-267",
        "vulnerabilityReason": "The function transfers ether using transfer() before updating the redeemableEther balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw more ether from the contract than balance allows by reentering claimRewardUpdated32.",
        "fixedCode": "function claimRewardUpdated32() public { require(redeemableEtherUpdated32[msg.sender] > 0); uint256 transferValueUpdated32 = redeemableEtherUpdated32[msg.sender]; redeemableEtherUpdated32[msg.sender] = 0; msg.sender.transfer(transferValueUpdated32); }"
    },
    {
        "vulnerableLines": "281-282",
        "vulnerabilityReason": "The function sends ether before updating the balance, allowing a potential reentrancy attack.",
        "potentialSecurityRisk": "An attacker could use reentrancy to repeatedly call withdrawFundsUpdated38, withdrawing more ether than allowed.",
        "fixedCode": "function withdrawFundsUpdated38(uint256 _weiToWithdraw) public { require(balancesUpdated38[msg.sender] >= _weiToWithdraw); balancesUpdated38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "317-323",
        "vulnerabilityReason": "The function sends ether using send before incrementing the counter, creating vulnerability to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call callmeUpdated7 to extract more ether than intended before the counter is incremented.",
        "fixedCode": "function callmeUpdated7() public { require(counterUpdated7 <= 5); counterUpdated7 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "340-346",
        "vulnerabilityReason": "The function sends funds using send before updating the lastPlayer address, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call buyTicketUpdated23, extracting more ether from the contract than they should by reentering.",
        "fixedCode": "function buyTicketUpdated23() public { if (!lastPlayerUpdated23.send(jackpotUpdated23)) { revert(); } lastPlayerUpdated23 = msg.sender; jackpotUpdated23 = address(this).balance; }"
    },
    {
        "vulnerableLines": "352-358",
        "vulnerabilityReason": "Ether is sent using send before incrementing the counter, exposing the function to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability to repeatedly call callmeUpdated14, withdrawing more ether before the counter is incremented.",
        "fixedCode": "function callmeUpdated14() public { require(counterUpdated14 <= 5); counterUpdated14 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "391-396",
        "vulnerabilityReason": "The function sends ether using send before updating the lastPlayerUpdated2 address, making it prone to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call buyTicketUpdated2 to withdraw more ether from the contract than they should.",
        "fixedCode": "function buyTicketUpdated2() public { if (!lastPlayerUpdated2.send(jackpotUpdated2)) { revert(); } lastPlayerUpdated2 = msg.sender; jackpotUpdated2 = address(this).balance; }"
    },
    {
        "vulnerableLines": "413-417",
        "vulnerabilityReason": "The function sends ether using send before updating the lastPlayerUpdated30 address, leading to a reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could exploit this to call buyTicketUpdated30 multiple times, withdrawing more ether than allowed.",
        "fixedCode": "function buyTicketUpdated30() public { if (!lastPlayerUpdated30.send(jackpotUpdated30)) { revert(); } lastPlayerUpdated30 = msg.sender; jackpotUpdated30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "425-427",
        "vulnerabilityReason": "The function uses call.value to transfer ether before resetting the user balance, creating a reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could repeatedly call withdraw_balancesUpdated8 and extract more funds than they are entitled to.",
        "fixedCode": "function withdraw_balancesUpdated8() public { uint256 balance = balancesUpdated8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balancesUpdated8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "438-442",
        "vulnerabilityReason": "The function transfers ether using transfer() before resetting the user's redeemable ether balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call claimRewardUpdated39 to withdraw more ether than they should by exploiting reentrancy.",
        "fixedCode": "function claimRewardUpdated39() public { require(redeemableEtherUpdated39[msg.sender] > 0); uint256 transferValueUpdated39 = redeemableEtherUpdated39[msg.sender]; redeemableEtherUpdated39 = 0; msg.sender.transfer(transferValueUpdated39); }"
    },
    {
        "vulnerableLines": "453-455",
        "vulnerabilityReason": "Ether is sent using send before resetting the user balance, exposing the function to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call the withdraw_balances function, withdrawing more ether than their balance allows.",
        "fixedCode": "function withdraw_balances() public { uint256 balance = balances[msg.sender]; if (msg.sender.send(balance)) { balances[msg.sender] = 0; } }"
    }
]