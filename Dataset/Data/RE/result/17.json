[
    {
        "vulnerableLines": "45-51",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the user balance, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the balance is reset, potentially draining funds from the contract.",
        "fixedCode": "function withdrawBalance() public { uint amount = userBalance[msg.sender]; userBalance[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalance[msg.sender] = amount; revert(); } }"
    },
    {
        "vulnerableLines": "57-64",
        "vulnerabilityReason": "The function uses send to transfer ether and updates the state variable notCalled only after the transfer, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to receive ether before the state variable is updated, draining funds.",
        "fixedCode": "function firstCall() public { require(notCalled); notCalled = false; if (!msg.sender.send(1 ether)) { notCalled = true; revert(); } }"
    },
    {
        "vulnerableLines": "74-80",
        "vulnerabilityReason": "Funds are transferred to the user before resetting the redeemable balance, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this to claim rewards multiple times before the balance is reset, draining the contract's funds.",
        "fixedCode": "function claimReward() public { require(redeemableEther[msg.sender] > 0); uint transferValue = redeemableEther[msg.sender]; redeemableEther[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "90-96",
        "vulnerabilityReason": "The function transfers ether using the transfer method before resetting the balance, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain funds before the balance is updated.",
        "fixedCode": "function claimRewardToken() public { require(redeemableEtherClaim[msg.sender] > 0); uint transferValueToken = redeemableEtherClaim[msg.sender]; redeemableEtherClaim[msg.sender] = 0; msg.sender.transfer(transferValueToken); }"
    },
    {
        "vulnerableLines": "98-103",
        "vulnerabilityReason": "The function uses call.value to transfer ether before resetting the balance, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly calling this function before the balance is updated.",
        "fixedCode": "function withdrawBalanceTokens() public { uint amount = balances[msg.sender]; balances[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { balances[msg.sender] = amount; revert(); } }"
    },
    {
        "vulnerableLines": "105-112",
        "vulnerabilityReason": "The function transfers ether to the caller before setting the notCalledSecond variable, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function multiple times, draining the contract's ether balance.",
        "fixedCode": "function secondCall() public { require(notCalledSecond); notCalledSecond = false; if (!msg.sender.send(1 ether)) { notCalledSecond = true; revert(); } }"
    },
    {
        "vulnerableLines": "114-121",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter call limit, potentially allowing reentrancy.",
        "potentialSecurityRisk": "An attacker could use this reentrancy to repeatedly call the function and withdraw more than the intended limit of ether.",
        "fixedCode": "function firstCounterCall() public { require(counterCallFirst <= 5); counterCallFirst += 1; if (!msg.sender.send(10 ether)) { counterCallFirst -= 1; revert(); } }"
    },
    {
        "vulnerableLines": "126-130",
        "vulnerabilityReason": "The function sends ether using send before updating the lastPlayer and jackpot variables, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit the reentrancy gap to repeatedly withdraw jackpot funds, leading to draining of contract funds.",
        "fixedCode": "function buyTicket() public { lastPlayer = msg.sender; jackpot = address(this).balance; if (!(lastPlayer.send(jackpot))) revert(); }"
    },
    {
        "vulnerableLines": "133-139",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user balance, allowing reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could invoke this function reentrantly, draining funds repeatedly from the contract.",
        "fixedCode": "function withdrawFundsAfter(uint256 _weiToWithdraw) public { require(balancesAfter[msg.sender] >= _weiToWithdraw); balancesAfter[msg.sender] -= _weiToWithdraw; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "142-149",
        "vulnerabilityReason": "The function sends ether using send before updating the notCalledThird flag, exposing it to reentrancy.",
        "potentialSecurityRisk": "Attackers could exploit this gap to call the function multiple times, receiving more ether than intended.",
        "fixedCode": "function thirdCall() public { require(notCalledThird); notCalledThird = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "152-157",
        "vulnerabilityReason": "The function sends ether to the user before updating the balance, which is susceptible to reentrancy.",
        "potentialSecurityRisk": "With reentrancy, an attacker could continuously invoke this function, siphoning out more ether than their balance allows.",
        "fixedCode": "function withdrawFundsFourth(uint256 _weiToWithdraw) public { require(balancesFourth[msg.sender] >= _weiToWithdraw); balancesFourth[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "160-168",
        "vulnerabilityReason": "The function transfers ether using call.value before updating the notCalledFifth flag, allowing reentrancy attacks.",
        "potentialSecurityRisk": "This can be exploited by an attacker to continuously invoke this function and withdraw more ether than intended.",
        "fixedCode": "function fifthCall() public { require(notCalledFifth); notCalledFifth = false; (bool success, ) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "177-182",
        "vulnerabilityReason": "Sending ether before updating the user's balance leads to potential reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker can invoke this function recursively, withdrawing more funds than their account balance should allow.",
        "fixedCode": "function withdrawFundsSixth(uint256 _weiToWithdraw) public { require(balancesSixth[msg.sender] >= _weiToWithdraw); balancesSixth[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "190-196",
        "vulnerabilityReason": "The function transfers ether using transfer before updating the user's balance, enabling reentrancy attacks.",
        "potentialSecurityRisk": "This may allow an attacker to claim rewards repeatedly, draining the contract's balance.",
        "fixedCode": "function claimRewardClaimed() public { require(redeemableEtherClaimed[msg.sender] > 0); uint transferValueClaimed = redeemableEtherClaimed[msg.sender]; redeemableEtherClaimed[msg.sender] = 0; msg.sender.transfer(transferValueClaimed); }"
    },
    {
        "vulnerableLines": "202-209",
        "vulnerabilityReason": "Using send to transfer ether before updating the counter allows for reentrancy exploitation.",
        "potentialSecurityRisk": "An attacker could repeatedly invoke this function, withdrawing more than the intended ether limit and draining the balance.",
        "fixedCode": "function sixthCall() public { require(counter <= 5); counter += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "217-224",
        "vulnerabilityReason": "Ether is transferred via send before updating the lastPlayerTwo and jackpotTwo variables, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker could use reentrancy to repeatedly withdraw the jackpot, depleting the contract's balance.",
        "fixedCode": "function buyTicketTwo() public { lastPlayerTwo = msg.sender; jackpotTwo = address(this).balance; if (!lastPlayerTwo.send(jackpotTwo)) { revert(); } }"
    },
    {
        "vulnerableLines": "232-239",
        "vulnerabilityReason": "The transfer of ether using send before updating the counter makes the function reentrancy-prone.",
        "potentialSecurityRisk": "This allows attackers to invoke the function repeatedly, exceeding the counter limit and depleting contract funds.",
        "fixedCode": "function fifthFunction() public { require(counterFive <= 5); counterFive += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "249-255",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayerThree variable, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the lastPlayerThree is updated, potentially draining funds from the contract.",
        "fixedCode": "function buyTicketThree() public { require(!(lastPlayerThree.send(jackpotThree))); lastPlayerThree = msg.sender; jackpotThree = address(this).balance; }"
    },
    {
        "vulnerableLines": "274-279",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could call this function again during the fund transfer, allowing them to withdraw funds continuously before their balance is reset.",
        "fixedCode": "function withdrawBalancesEight() public { uint256 balance = balancesEight[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balancesEight[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "288-294",
        "vulnerabilityReason": "The function transfers funds before updating the redeemableEtherClaimed balance, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly claim rewards before their balance is reset, draining the contract's funds.",
        "fixedCode": "function claimRewardClaimed() public { require(redeemableEtherClaimed[msg.sender] > 0); uint transferValueClaimed = redeemableEtherClaimed[msg.sender]; redeemableEtherClaimed[msg.sender] = 0; msg.sender.transfer(transferValueClaimed); }"
    },
    {
        "vulnerableLines": "305-309",
        "vulnerabilityReason": "Funds are sent to the user before the balance is deducted, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "An attacker could drain the contract\u2019s funds by exploiting this reentrancy, receiving more ether than their allowed balance.",
        "fixedCode": "function withdrawBalancesThirtySix() public { uint256 balance = balancesThirtySix[msg.sender]; if (msg.sender.send(balance)) { balancesThirtySix[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "318-325",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function thirtyFiveCall() public { require(counterThirtyFive <= 5); counterThirtyFive += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "334-341",
        "vulnerabilityReason": "Use of call.value to send funds before validating the user\u2019s balance, which is prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could invoke this contract reentrantly, siphoning more funds than they have deposited.",
        "fixedCode": "function withdrawBalance() public { uint256 balance = userBalance[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalance[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "346-355",
        "vulnerabilityReason": "The function sends funds to the user before updating their balance, leading to a potential reentrancy attack.",
        "potentialSecurityRisk": "This can allow attackers to make repeated calls, withdrawing more than their balance allows, draining the contract.",
        "fixedCode": "function withdrawBalanceThirtyThree() public { uint256 balance = userBalanceThirtyThree[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalanceThirtyThree[msg.sender] = 0; }"
    }
]