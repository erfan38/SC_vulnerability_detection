[
    {
        "vulnerableLines": "66-71",
        "vulnerabilityReason": "The function `withdrawFunds` sends ether to the caller before deducting the balance of the user, potentially allowing reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function through reentrancy and deplete the contract's funds before the balance is updated.",
        "fixedCode": "function withdrawFunds(uint256 _weiToWithdraw) public { require(balances[msg.sender] >= _weiToWithdraw); balances[msg.sender] -= _weiToWithdraw; (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "76-80",
        "vulnerabilityReason": "The function `buyTicket` sends ether to the last player before updating the `lastPlayer` and `jackpot` variables, leaving a gap for reentrancy.",
        "potentialSecurityRisk": "A malicious contract could execute this function repeatedly, draining the contract's balance before it updates the state.",
        "fixedCode": "function buyTicket() public { if (!lastPlayer.send(jackpot)) revert(); lastPlayer = msg.sender; jackpot = address(this).balance; }"
    },
    {
        "vulnerableLines": "85-90",
        "vulnerabilityReason": "The function `withdrawFundsAlternative` sends ether to the caller before updating the `alternativeBalances`, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could deplete the contract's funds by calling the function recursively before the balance is reduced.",
        "fixedCode": "function withdrawFundsAlternative(uint256 _weiToWithdraw) public { require(alternativeBalances[msg.sender] >= _weiToWithdraw); alternativeBalances[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }"
    },
    {
        "vulnerableLines": "96-103",
        "vulnerabilityReason": "The function `withdrawUserBalance` sends ether before resetting the user balance, which allows for reentrant execution.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function via reentrancy, causing the contract to send more funds than the attacker's actual balance.",
        "fixedCode": "function withdrawUserBalance() public { uint256 balance = userBalance[msg.sender]; userBalance[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "108-115",
        "vulnerabilityReason": "The function `activateFunctionCall` sends ether to the caller before updating the `isFunctionCalled` state, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to call the function recursively, extracting more ether than intended from the contract.",
        "fixedCode": "function activateFunctionCall() public { require(isFunctionCalled); isFunctionCalled = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "122-126",
        "vulnerabilityReason": "The function transfers ether to the caller before updating the redeemable balance, allowing a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the balance is updated, draining the contract's funds.",
        "fixedCode": "function claimReward() public { require(redeemableBalances[msg.sender] > 0); uint transferValue = redeemableBalances[msg.sender]; redeemableBalances[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "133-136",
        "vulnerabilityReason": "The function sends ether to the user before updating the balance, thus allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this vulnerability by calling this function multiple times before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawAlternativeFunds(uint256 _weiToWithdraw) public { require(alternativeBalances2[msg.sender] >= _weiToWithdraw); alternativeBalances2[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "144-148",
        "vulnerabilityReason": "The function transfers ether to the caller before updating the redeemable balance, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can call this function multiple times before the balance is updated, thus draining the contract's funds.",
        "fixedCode": "function claimRewardAlternative() public { require(redeemableBalances2[msg.sender] > 0); uint transferValue2 = redeemableBalances2[msg.sender]; redeemableBalances2[msg.sender] = 0; msg.sender.transfer(transferValue2); }"
    },
    {
        "vulnerableLines": "157-162",
        "vulnerabilityReason": "The function sends ether to the user before updating the call counter, thus allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can call this function multiple times before the counter is updated, thus circumventing the intended call limit.",
        "fixedCode": "function incrementCallCounter() public { require(callCounter <= 5); callCounter += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "171-175",
        "vulnerabilityReason": "The function sends ether to the user before updating the last player address and jackpot amount, allowing for a reentry attack.",
        "potentialSecurityRisk": "An attacker can call this function repeatedly before the state is updated, thus draining the contract's funds.",
        "fixedCode": "function buyTicket2() public { require(!(lastPlayer2.send(jackpot2))); lastPlayer2 = msg.sender; jackpot2 = address(this).balance; }"
    },
    {
        "vulnerableLines": "183-188",
        "vulnerabilityReason": "The function sends ether to the user before updating the call counter, thus allowing reentrancy.",
        "potentialSecurityRisk": "Repeated calls before counter update can bypass the call limit, draining contract funds.",
        "fixedCode": "function incrementCallCounter2() public { require(callCounter2 <= 5); callCounter2 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "201-206",
        "vulnerabilityReason": "The function transfers ether before updating the last player address and jackpot amount, allowing a reentrancy attack.",
        "potentialSecurityRisk": "Reentering the contract before state updates can drain the jackpot funds repeatedly.",
        "fixedCode": "function buyTicket3() public { require(!(lastPlayer3.send(jackpot3))); lastPlayer3 = msg.sender; jackpot3 = address(this).balance; }"
    },
    {
        "vulnerableLines": "216-220",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can exploit the reentrancy issue to withdraw repeatedly before the balance is reset.",
        "fixedCode": "function withdrawAlternativeFunds3() public { uint256 balance = alternativeBalances3[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) alternativeBalances3[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "230-234",
        "vulnerabilityReason": "This function transfers ether to the caller before setting their redeemable balance to 0, allowing a reentrancy attack.",
        "potentialSecurityRisk": "The reentrancy attack allows an attacker to call this function repeatedly, draining the contract's funds.",
        "fixedCode": "function claimReward3() public { require(redeemableBalances3[msg.sender] > 0); uint transferValue3 = redeemableBalances3[msg.sender]; redeemableBalances3[msg.sender] = 0; msg.sender.transfer(transferValue3); }"
    },
    {
        "vulnerableLines": "245-248",
        "vulnerabilityReason": "The function uses send to transfer ether before resetting the alternativeBalances4, allowing for a reentrancy attack.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function before the balance is reset, leading to unauthorized withdrawals of funds over the allowed balance.",
        "fixedCode": "function withdrawAlternativeFunds4() public { uint256 balance = alternativeBalances4[msg.sender]; alternativeBalances4[msg.sender] = 0; if (msg.sender.send(balance)) { return; } else { alternativeBalances4[msg.sender] = balance; revert(); } }"
    },
    {
        "vulnerableLines": "254-261",
        "vulnerabilityReason": "The function sends ether before updating the callCounter3, making it possible for an attacker to reenter and bypass the limit.",
        "potentialSecurityRisk": "An attacker could repeatedly invoke the function to withdraw more ether than allowed, bypassing the safety check.",
        "fixedCode": "function incrementCallCounter3() public { require(callCounter3 <= 5); callCounter3 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "265-273",
        "vulnerabilityReason": "The function calls send on an external address before updating the lastPlayer4 and jackpot4, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker may repeatedly invoke the function due to the reentrancy, draining the jackpot4 balance.",
        "fixedCode": "function buyTicket4() public { (bool success,) = lastPlayer4.call.value(jackpot4)(\"\"); if (!success) revert(); lastPlayer4 = msg.sender; jackpot4 = address(this).balance; }"
    },
    {
        "vulnerableLines": "275-281",
        "vulnerabilityReason": "Funds are sent to the user before the redeemableBalances4 is reset, making the function susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly in a reentrant fashion to drain available ether from the contract.",
        "fixedCode": "function claimReward4() public { require(redeemableBalances4[msg.sender] > 0); uint transferValue4 = redeemableBalances4[msg.sender]; redeemableBalances4[msg.sender] = 0; msg.sender.transfer(transferValue4); }"
    },
    {
        "vulnerableLines": "283-289",
        "vulnerabilityReason": "The function calls send before resetting the user balance making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker can call this function reentrantly, withdrawing more ether than their balance permits.",
        "fixedCode": "function withdrawUserBalance2() public { uint256 balance = userBalance2[msg.sender]; userBalance2[msg.sender] = 0; if (!msg.sender.send(balance)) { userBalance2[msg.sender] = balance; revert(); } }"
    },
    {
        "vulnerableLines": "297-304",
        "vulnerabilityReason": "The function calls call.value before resetting the user balance, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could drain the contract's funds by calling this function reentrantly before the balance is updated.",
        "fixedCode": "function withdrawUserBalance3() public { uint256 balance = userBalance3[msg.sender]; userBalance3[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { userBalance3[msg.sender] = balance; revert(); } }"
    },
    {
        "vulnerableLines": "309-316",
        "vulnerabilityReason": "The function sends ether through a call value before resetting the user balance, which is prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could invoke the function multiple times in a single transaction, pulling out more ether than allowed from the contract.",
        "fixedCode": "function withdrawUserBalance4() public { uint256 balance = userBalance4[msg.sender]; userBalance4[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { userBalance4[msg.sender] = balance; revert(); } }"
    },
    {
        "vulnerableLines": "321-328",
        "vulnerabilityReason": "The function sends ether before updating the isFunctionActive state variable, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function to extract ether multiple times before the state variable is updated.",
        "fixedCode": "function activateFunction() public { require(isFunctionActive); isFunctionActive = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "333-338",
        "vulnerabilityReason": "The function sends ether before updating the user balance, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could continuously call the function, withdrawing more ether than their allowed balance.",
        "fixedCode": "function withdrawFunds2(uint256 _weiToWithdraw) public { require(balances2[msg.sender] >= _weiToWithdraw); balances2[msg.sender] = balances2[msg.sender].sub(_weiToWithdraw); require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "345-353",
        "vulnerabilityReason": "The function sends ether before updating the bool isFunctionActive2 state variable, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can reenter the function, extracting more ether multiple times before the state update.",
        "fixedCode": "function activateFunction2() public { require(isFunctionActive2); isFunctionActive2 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { isFunctionActive2 = true; revert(); } }"
    }
]