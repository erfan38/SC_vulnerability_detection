[
    {
        "vulnerableLines": "9-15",
        "vulnerabilityReason": "The function sends ether before updating the isNotCalled flag, allowing reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call the function, transferring more ether than intended.",
        "fixedCode": "function executeOnce() public { require(isNotCalled); isNotCalled = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "18-23",
        "vulnerabilityReason": "The transfer operation occurs before setting redeemableEther to zero, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call the function to drain the contract by exploiting reentrancy.",
        "fixedCode": "function claimReward() public { require(redeemableEther[msg.sender] > 0); uint transferValue = redeemableEther[msg.sender]; redeemableEther[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "26-30",
        "vulnerabilityReason": "Funds are sent before updating the balance, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this behavior to withdraw more funds than they own, depleting the contract's balance.",
        "fixedCode": "function withdrawFunds(uint256 _weiToWithdraw) public { require(balances[msg.sender] >= _weiToWithdraw); balances[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "33-38",
        "vulnerabilityReason": "Transferring funds before updating redeemableEtherAnother leads to reentrancy risks.",
        "potentialSecurityRisk": "Attackers can repeatedly withdraw funds by exploiting this vulnerability, depleting the contract's balance.",
        "fixedCode": "function claimRewardAnother() public { require(redeemableEtherAnother[msg.sender] > 0); uint transferValue = redeemableEtherAnother[msg.sender]; redeemableEtherAnother[msg.sender] = 0; msg.sender.transfer(transferValue); }"
    },
    {
        "vulnerableLines": "42-48",
        "vulnerabilityReason": "Sending ether before updating executionCounter allows for reentrant calls.",
        "potentialSecurityRisk": "An attacker could invoke this function repeatedly to drain more ether than intended.",
        "fixedCode": "function executeWithLimit() public { require(executionCounter <= 5); executionCounter += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "52-57",
        "vulnerabilityReason": "The function sends funds before updating lastPlayer and jackpot, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call the function to siphon off the jackpot balance, draining the contract's funds.",
        "fixedCode": "function buyTicket() public { require(lastPlayer.send(jackpot)); lastPlayer = msg.sender; jackpot = address(this).balance; }"
    },
    {
        "vulnerableLines": "61-67",
        "vulnerabilityReason": "The function sends ether before updating the anotherNotCalled flag, exposing it to reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly call this function, exploiting the vulnerability to transfer more ether than allowed.",
        "fixedCode": "function executeAnotherOnce() public { require(anotherNotCalled); anotherNotCalled = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "71-75",
        "vulnerabilityReason": "Funds are sent to the user before updating balancesAnother, allowing potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could invoke this function repeatedly, withdrawing more funds than entitled, draining the contract.",
        "fixedCode": "function withdrawFundsAnother(uint256 _weiToWithdraw) public { require(balancesAnother[msg.sender] >= _weiToWithdraw); balancesAnother[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "79-86",
        "vulnerabilityReason": "The function sends ether before updating the specialNotCalled flag, leading to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can exploit this function to repeatedly withdraw more ether than intended, draining contract balance.",
        "fixedCode": "function executeSpecialOnce() public { require(specialNotCalled); specialNotCalled = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "99-106",
        "vulnerabilityReason": "The function sends ether before updating anotherCounter, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function to drain more ether than intended from the contract.",
        "fixedCode": "function executeAnotherWithLimit() public { require(anotherCounter <= 5); anotherCounter += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "120-125",
        "vulnerabilityReason": "The function sends the jackpot amount before updating the state variables lastPlayerAnother and jackpotAnother, leading to potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw the jackpot repeatedly, depleting the contract.",
        "fixedCode": "function buyTicketAnother() public { if (!(lastPlayerAnother.send(jackpotAnother))) revert(); lastPlayerAnother = msg.sender; jackpotAnother = address(this).balance; }"
    },
    {
        "vulnerableLines": "132-136",
        "vulnerabilityReason": "The function sends ether before updating the balancesSpecial mapping, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly withdraw more ether than they have in their balance, exploiting the contract.",
        "fixedCode": "function withdrawBalancesSpecial() public { uint256 balance = balancesSpecial[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { balancesSpecial[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "144-150",
        "vulnerabilityReason": "The function transfers funds before setting redeemableEther to zero, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function before the state update, draining the contract's funds.",
        "fixedCode": "function claimRewardRedeemable() public { require(redeemableEther[msg.sender] > 0); uint transferValueRedeemable = redeemableEther[msg.sender]; redeemableEther[msg.sender] = 0; msg.sender.transfer(transferValueRedeemable); }"
    },
    {
        "vulnerableLines": "158-162",
        "vulnerabilityReason": "The function sends ether to the user before updating balancesExtra, leading to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can exploit this functionality to withdraw more ether than they are entitled to, depleting the balance.",
        "fixedCode": "function withdrawExtraBalances() public { uint256 balance = balancesExtra[msg.sender]; if (msg.sender.send(balance)) { balancesExtra[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "173-180",
        "vulnerabilityReason": "Sending ether before updating the specialCounter makes it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function, draining more ether than intended from the contract.",
        "fixedCode": "function executeSpecialCounter() public { require(specialCounter <= 5); specialCounter += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "190-196",
        "vulnerabilityReason": "Sending ether via call.value before updating userBalances leaves the function open to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers can exploit this to withdraw more funds than they have, eventually draining the contract.",
        "fixedCode": "function withdrawUserBalance() public { uint256 balance = userBalances[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } userBalances[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "208-214",
        "vulnerabilityReason": "The function sends ether before updating userAdditionalBalances, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could withdraw more funds than they have in their balance by repeatedly calling this function.",
        "fixedCode": "function withdrawUserAdditionalBalance() public { uint256 balance = userAdditionalBalances[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } userAdditionalBalances[msg.sender] = 0; }"
    }
]