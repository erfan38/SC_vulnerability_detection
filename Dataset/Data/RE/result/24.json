[
    {
        "vulnerableLines": "107-111",
        "vulnerabilityReason": "The function uses transfer to send funds to the caller before updating the user's reward balance, leading to a potential reentrancy attack.",
        "potentialSecurityRisk": "An attacker could call this function multiple times before their reward balance is updated, thus draining more funds than they are entitled to.",
        "fixedCode": "function claimReward_18() public { require(redeemableEther_18[msg.sender] > 0); uint transferValue_18 = redeemableEther_18[msg.sender]; redeemableEther_18[msg.sender] = 0; msg.sender.transfer(transferValue_18); }"
    },
    {
        "vulnerableLines": "115-117",
        "vulnerabilityReason": "The function sends ethers to the caller before resetting the balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this function by repeatedly calling it before their balance is updated to withdraw more funds than they possess.",
        "fixedCode": "function withdraw_balances_29() public { uint balance = balances_29[msg.sender]; if (msg.sender.send(balance)) { balances_29[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "121-127",
        "vulnerabilityReason": "The function sends ether before updating the state variable balances_6, leading to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain ether before the variable balances_6 is updated.",
        "fixedCode": "function updates6() public { require(balances_6); balances_6 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "131-135",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating lastPlayer_16, allowing reentrancy.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain funds associated with the jackpot.",
        "fixedCode": "function buyTicket_16() public { require(lastPlayer_16.send(jackpot_16)); lastPlayer_16 = msg.sender; jackpot_16 = address(this).balance; }"
    },
    {
        "vulnerableLines": "139-142",
        "vulnerabilityReason": "Funds are sent to the user before the balance is deducted, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond their allowed balance.",
        "fixedCode": "function withdrawFunds_24 (uint256 _weiToWithdraw) public { require(balances_24[msg.sender] >= _weiToWithdraw); balances_24[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "146-151",
        "vulnerabilityReason": "This function uses send before resetting userBalance_5, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain funds before the user balance is reset.",
        "fixedCode": "function withdrawBalance_5() public { uint256 balance = userBalance_5[msg.sender]; if (!msg.sender.send(balance)) { revert(); } userBalance_5[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "154-157",
        "vulnerabilityReason": "The function sends ether before resetting the user balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "Reentrancy can lead to multiple withdrawals, draining user funds.",
        "fixedCode": "function withdraw_balances_15() public { uint256 balance = balances_15[msg.sender]; if (msg.sender.send(balance)) { balances_15[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "160-165",
        "vulnerabilityReason": "The function sends ether before updating the counter counter_28, leading to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain ether before the counter is updated.",
        "fixedCode": "function checking_28() public { require(counter_28 <= 5); counter_28 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "169-175",
        "vulnerabilityReason": "The function sends ether without updating balances_34 first, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain ether before balances_34 is updated.",
        "fixedCode": "function updates34() public { require(balances_34); balances_34 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "178-183",
        "vulnerabilityReason": "The function sends ether before updating the counter counter_21, leading to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain ether before the counter is updated.",
        "fixedCode": "function checking_21() public { require(counter_21 <= 5); counter_21 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "188-191",
        "vulnerabilityReason": "Funds are sent to the user before the balance is deducted, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond their allowed balance.",
        "fixedCode": "function withdrawFunds_10(uint256 _weiToWithdraw) public { require(balances_10[msg.sender] >= _weiToWithdraw); balances_10[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "195-198",
        "vulnerabilityReason": "This function calls send before resetting the user balance, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain funds before the user balance is reset.",
        "fixedCode": "function withdraw_balances_21() public { uint256 balance = balances_21[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { balances_21[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "202-207",
        "vulnerabilityReason": "The function sends ether before resetting the user balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "Reentrancy can lead to multiple withdrawals, draining user funds.",
        "fixedCode": "function withdrawBalance_12() public { uint256 balance = userBalance_12[msg.sender]; if (!msg.sender.send(balance)) { revert(); } userBalance_12[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "210-214",
        "vulnerabilityReason": "The function transfers ether to the sender before resetting the redeemable balance, leading to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain funds before the redeemable balance is reset.",
        "fixedCode": "function claimReward_11() public { require(redeemableEther_11[msg.sender] > 0); uint transferValue_11 = redeemableEther_11[msg.sender]; redeemableEther_11[msg.sender] = 0; msg.sender.transfer(transferValue_11); }"
    },
    {
        "vulnerableLines": "218-221",
        "vulnerabilityReason": "The function sends ether before resetting the user balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "Reentrancy can lead to multiple withdrawals, draining user funds.",
        "fixedCode": "function withdraw_balances_1() public { uint256 balance = balances_1[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (success) { balances_1[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "233-239",
        "vulnerabilityReason": "The function sends ether without updating balances_41 first, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain ether before balances_41 is updated.",
        "fixedCode": "function updates41() public { require(balances_41); balances_41 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "246-252",
        "vulnerabilityReason": "The function uses send to transfer ether before updating counter_42, making it susceptible to reentrant calls.",
        "potentialSecurityRisk": "An attacker can repeatedly withdraw funds before the counter is updated, potentially exceeding the limit and draining the contract's ether.",
        "fixedCode": "function checking_42() public { require(counter_42 <= 5); counter_42 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "269-276",
        "vulnerabilityReason": "This function uses send to transfer the jackpot before updating lastPlayer_2, exposing it to reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function, collecting jackpots continuously before their address or the balance are updated.",
        "fixedCode": "function buyTicket_2() public { uint256 currentJackpot = jackpot_2; jackpot_2 = address(this).balance; lastPlayer_2 = msg.sender; if (!lastPlayer_2.send(currentJackpot)) { revert(); } }"
    },
    {
        "vulnerableLines": "287-293",
        "vulnerabilityReason": "Transferring funds using call.value before deducting from balances_17 exposes the contract to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could reentrantly call the function, extracting multiple times before the balance deduction occurs.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "298-305",
        "vulnerabilityReason": "Usage of send to transfer the jackpot before updating state variables exposes it to reentrancy.",
        "potentialSecurityRisk": "An attacker could reentrantly call this function and drain the jackpot multiple times before the updates take place.",
        "fixedCode": "function buyTicket_37() public { uint256 currentJackpot = jackpot_37; jackpot_37 = address(this).balance; lastPlayer_37 = msg.sender; if (!lastPlayer_37.send(currentJackpot)) { revert(); } }"
    },
    {
        "vulnerableLines": "319-325",
        "vulnerabilityReason": "Funds are sent using call.value before updating balances_3, leading to potential reentry attacks.",
        "potentialSecurityRisk": "An attacker could reenter the function's call, extracting ether multiple times before their balance is updated.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }"
    },
    {
        "vulnerableLines": "354-362",
        "vulnerabilityReason": "Using call.value to transfer the jackpot before updating state exposes a potential reentrancy.",
        "potentialSecurityRisk": "Attackers could exploit this function to drain funds repetitively before the state variables are updated.",
        "fixedCode": "function buyTicket_9() public { uint256 currentJackpot = jackpot_9; jackpot_9 = address(this).balance; lastPlayer_9 = msg.sender; (bool success,) = lastPlayer_9.call.value(currentJackpot)(''); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "395-400",
        "vulnerabilityReason": "The function transfers ether before setting the user's redeemable balance to 0, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain the contract's funds by taking advantage of the reentrancy.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    },
    {
        "vulnerableLines": "416-421",
        "vulnerabilityReason": "Funds are transferred to the user using send before the balance is set to 0, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could drain the contract's ether by instantaneously calling the function before the balance update.",
        "fixedCode": "function withdrawBalance_19() public { uint256 balance = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }"
    },
    {
        "vulnerableLines": "432-438",
        "vulnerabilityReason": "The function uses call.value to send funds before nullifying the user balance, leading to potential reentrant vulnerabilities.",
        "potentialSecurityRisk": "Attackers may exploit this to withdraw more funds than they have a balance for by repeatedly calling the function.",
        "fixedCode": "function withdrawBalance_26() public { uint256 balance = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "449-455",
        "vulnerabilityReason": "Ether is sent to the user before updating the state variable balances_20, exposing the contract to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could drain the contract's ether by calling this function repeatedly before the balances_20 is updated.",
        "fixedCode": "function updates20() public { require(balances_20); balances_20 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "466-471",
        "vulnerabilityReason": "Reentrancy vulnerability due to transferring funds before setting the user's redeemable balance to 0.",
        "potentialSecurityRisk": "Attackers can exploit this to repeatedly call the function and drain funds from the contract.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }"
    },
    {
        "vulnerableLines": "533-536",
        "vulnerabilityReason": "The function withdrawFunds_38 sends ether to the user before updating the balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can exploit this reentrancy to repeatedly withdraw more funds than they are entitled to, draining the contract balance.",
        "fixedCode": "function withdrawFunds_38 (uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "539-557",
        "vulnerabilityReason": "The userWithdraw function sends ether to the user before updating the user's currentInvestAmount and other related state variables, inviting reentrancy attacks.",
        "potentialSecurityRisk": "Exploiting this reentrancy, an attacker could repeatedly withdraw funds, depleting the contract's balance.",
        "fixedCode": "function userWithdraw() external { User storage user = userMapping[msg.sender]; if (user.currentInvestAmount > 0) { uint256 avaliableIA = user.currentInvestAmount; if (!isInvestExpired(user)) { avaliableIA = getAbortInvestAmount(user); } uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user); user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA); user.currentInvestTime = 0; user.currentInvestAmount = 0; user.currentInvestCycle = 0; user.currentlevel = 0; user.currentStaticCommissionRatio = 0; user.currentStaticCommissionWithdrawAmount = 0; user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA); totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA); msg.sender.transfer(avaliableIA); } }"
    },
    {
        "vulnerableLines": "559-564",
        "vulnerabilityReason": "The claimReward_4 function sends ether to the user before updating the state, which can lead to reentrancy issues.",
        "potentialSecurityRisk": "An attacker can exploit this and repeatedly call the function to withdraw more funds than they are allowed, draining the contract.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }"
    },
    {
        "vulnerableLines": "567-587",
        "vulnerabilityReason": "The userWithdrawCommission function allows for ether transfers before updating the user's commission balances, which introduces reentrancy risks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call the function, draining the contract balance by withdrawing more than allowed.",
        "fixedCode": "function userWithdrawCommission() external { User storage user = userMapping[msg.sender]; uint256 avaliableDCB = user.dynamicCommissionBalance; uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user); uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA); uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB); if (avaliableWithdrawAmount >= ONE_ETH.div(10)) { user.staticCommissionBalance = 0; user.dynamicCommissionBalance = 0; user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA); user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB); user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB); user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount); totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB); totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB); totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount); if (avaliableSCB > 0) { addStaticCommissionRecord(msg.sender, now, avaliableSCB); } msg.sender.transfer(avaliableWithdrawAmount); } }"
    },
    {
        "vulnerableLines": "590-596",
        "vulnerabilityReason": "Using send to transfer ether before updating the counter_7, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter_7 is updated, potentially draining funds from the contract.",
        "fixedCode": "function checking_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "606-612",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_23, allowing for reentrant calls.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain the contract's jackpot funds.",
        "fixedCode": "function buyTicket_23() public { if (!(lastPlayer_23.send(jackpot_23))) revert(); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }"
    },
    {
        "vulnerableLines": "623-630",
        "vulnerabilityReason": "Using send to transfer ether before updating the counter_14, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter_14 is updated, potentially draining funds from the contract.",
        "fixedCode": "function checking_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "641-648",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_30, allowing for reentrant calls.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain the contract's jackpot funds.",
        "fixedCode": "function buyTicket_30() public { if (!(lastPlayer_30.send(jackpot_30))) revert(); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "667-672",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw funds repeatedly before their balance is reset.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balances_8[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "678-684",
        "vulnerabilityReason": "The call to transfer funds occurs before the user's reward balance is reset, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly claim rewards, depleting the contract's funds.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "706-710",
        "vulnerabilityReason": "The function transfers funds to the user before updating their balance, leading to a potential reentrancy attack.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to withdraw more than their entitled balance, exhausting the contract's funds.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; if (msg.sender.send(balance)) balances_36[msg.sender] = 0; }"
    },
    {
        "vulnerableLines": "732-739",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_35, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter call limit is updated, potentially draining funds from the contract.",
        "fixedCode": "function checking_35() public { require(counter_35 <= 5); counter_35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "761-768",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could call this function again during the fund transfer, allowing them to withdraw funds continuously before their balance is reset.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; userBalance_40[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "820-827",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw funds before their balance is updated, draining the contract.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; userBalance_33[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "835-842",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the balances_27 flag, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the flag is updated, potentially draining funds from the contract.",
        "fixedCode": "function updates27() public { require(balances_27); balances_27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "880-885",
        "vulnerabilityReason": "Funds are sent to the user before the balance is deducted, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "897-905",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the balances_13 flag, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the flag is updated, potentially draining funds from the contract.",
        "fixedCode": "function updates13() public { require(balances_13); balances_13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    }
]