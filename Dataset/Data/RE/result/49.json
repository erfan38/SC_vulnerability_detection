[
    {
        "vulnerableLines": "5-11",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_14, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is updated, potentially draining funds from the contract.",
        "fixedCode": "function callme_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "16-21",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_30. This allows a reentrant call to execute again before state changes.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain funds associated with the jackpot as the lastPlayer_30 is not updated before sending ether.",
        "fixedCode": "function buyTicket_30() public { require(!(lastPlayer_30.send(jackpot_30))); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "24-27",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function again during the fund transfer, allowing them to withdraw funds continuously before their balance is reset.",
        "fixedCode": "function withdraw_balances_8() public { uint balance = balances_8[msg.sender]; balances_8[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { balances_8[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "31-35",
        "vulnerabilityReason": "The call to transfer funds occurs before the user's reward balance is reset, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly claim rewards, depleting the contract's balance.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }"
    },
    {
        "vulnerableLines": "41-45",
        "vulnerabilityReason": "Funds are sent to the user before the balance is deducted, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "An attacker could drain the contract's funds by exploiting this reentrancy, receiving more ether than their allowed balance.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "53-59",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter_35, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function callme_35() public { require(counter_35 <= 5); counter_35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "70-75",
        "vulnerabilityReason": "Use of call.value to send funds before updating the user balance, which is prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could invoke this contract reentrantly, siphoning more funds than they have deposited.",
        "fixedCode": "function withdrawBalance_40() public { uint balance = userBalance_40[msg.sender]; userBalance_40[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { userBalance_40[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "79-84",
        "vulnerabilityReason": "The function sends ether before updating the checking_13 flag, making it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "Attackers can exploit this to call this function multiple times, receiving more ether than intended.",
        "fixedCode": "function userbalances_13() public { require(checking_13); checking_13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { checking_13 = true; revert(); } }"
    },
    {
        "vulnerableLines": "89-92",
        "vulnerabilityReason": "The function transfers funds using send before resetting the balance, opening up for reentrancy.",
        "potentialSecurityRisk": "An attacker could take advantage of this to extract more funds by reentering the function before balance is updated.",
        "fixedCode": "function withdraw_balances_36() public { uint balance = balances_36[msg.sender]; balances_36[msg.sender] = 0; if (!msg.sender.send(balance)) { balances_36[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "105-110",
        "vulnerabilityReason": "Using call.value to send ether before updating the balance makes it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call this function, withdrawing more than their balance limits.",
        "fixedCode": "function withdrawBalance_33() public { uint balance = userBalance_33[msg.sender]; userBalance_33[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { userBalance_33[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "126-131",
        "vulnerabilityReason": "The function transfers ether using send before updating the checking_27 state variable, which makes it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "This allows an attacker to reenter the function multiple times before the state variable checking_27 is set to false, enabling them to drain more funds than intended.",
        "fixedCode": "function userbalances_27() public { require(checking_27); checking_27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }"
    }
]