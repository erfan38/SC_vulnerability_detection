[
    {
        "vulnerableLines": "6-8",
        "vulnerabilityReason": "Funds are sent to the user before the balance is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdraw_balances_15() public { uint balance = balances_15[msg.sender]; balances_15[msg.sender] = 0; if (!msg.sender.send(balance)) { balances_15[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "15-21",
        "vulnerabilityReason": "Funds are sent to the user before the state variable is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the state variable is updated, draining the contract's funds.",
        "fixedCode": "function updates_41() public { require(var_balance_41); var_balance_41 = false; if (!msg.sender.send(1 ether)) { var_balance_41 = true; revert(); } }"
    },
    {
        "vulnerableLines": "32-38",
        "vulnerabilityReason": "Funds are sent to the user before the counter is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the counter is updated, draining the contract's funds.",
        "fixedCode": "function checking_42() public { require(counter_42 <= 5); counter_42 += 1; if (!msg.sender.send(10 ether)) { counter_42 -= 1; revert(); } }"
    },
    {
        "vulnerableLines": "54-55",
        "vulnerabilityReason": "Funds are sent to the user before the balance is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdraw_balances_36() public { uint balance = balances_36[msg.sender]; balances_36[msg.sender] = 0; if (!msg.sender.send(balance)) { balances_36[msg.sender] = balance; } }"
    },
    {
        "vulnerableLines": "66-68",
        "vulnerabilityReason": "Funds are sent to the previous player before updating the last player's address, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function, receiving the jackpot funds multiple times.",
        "fixedCode": "function buyTicket_2() public { require(lastPlayer_2.send(jackpot_2)); lastPlayer_2 = msg.sender; jackpot_2 = address(this).balance; }"
    },
    {
        "vulnerableLines": "77-81",
        "vulnerabilityReason": "Funds are sent to the user before the balance is updated, exposing it to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] = 0; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); balances_17[msg.sender] = balances_17[msg.sender] - _weiToWithdraw; }"
    },
    {
        "vulnerableLines": "90-92",
        "vulnerabilityReason": "Funds are sent to the previous player before updating the last player's address, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function, receiving the jackpot funds multiple times.",
        "fixedCode": "function buyTicket_37() public { require(lastPlayer_37.send(jackpot_37)); lastPlayer_37 = msg.sender; jackpot_37 = address(this).balance; }"
    },
    {
        "vulnerableLines": "98-102",
        "vulnerabilityReason": "The function sends funds to the user before updating their balance which allows a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could execute multiple calls to this function before the balance is updated, draining the funds.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] = 0; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); balances_3[msg.sender] = balances_3[msg.sender] - _weiToWithdraw; }"
    },
    {
        "vulnerableLines": "107-110",
        "vulnerabilityReason": "Funds are sent to the previous player before updating the last player's address, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function, receiving the jackpot funds multiple times.",
        "fixedCode": "function buyTicket_9() public { require(lastPlayer_9.call.value(jackpot_9)('')); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }"
    },
    {
        "vulnerableLines": "116-120",
        "vulnerabilityReason": "The function sends funds to the user before updating their balance which allows a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could execute multiple calls to this function before the balance is updated, draining the funds.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }"
    },
    {
        "vulnerableLines": "123-129",
        "vulnerabilityReason": "The function sends the user's balance before resetting it, allowing for potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to withdraw more funds by taking advantage of the reentrancy vulnerability.",
        "fixedCode": "function withdrawBalance_19() public { uint balance = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }"
    },
    {
        "vulnerableLines": "131-138",
        "vulnerabilityReason": "This function uses call.value to send ether before resetting the user's balance, which can be exploited for reentrancy.",
        "potentialSecurityRisk": "Malicious actors could exploit this to repeatedly call the function and drain the contract of funds.",
        "fixedCode": "function withdrawBalance_26() public { uint balance = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "140-147",
        "vulnerabilityReason": "The function sends ether before updating the state variable var_balance_20, allowing for reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly trigger this function, exceeding intended ether transfers and depleting contract funds.",
        "fixedCode": "function updates_20() public { require(var_balance_20); var_balance_20 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "194-201",
        "vulnerabilityReason": "This function sends ether before updating the counter, exposing it to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Reentrancy could allow an attacker to invoke this function repeatedly, draining the contract's ether balance.",
        "fixedCode": "function checking_28() public { require(counter_28 <= 5); counter_28 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "203-210",
        "vulnerabilityReason": "The function sends ether before updating the state variable var_balance_34, allowing for reentrancy.",
        "potentialSecurityRisk": "Malicious actors may exploit this function to make multiple calls and withdraw more ether than intended.",
        "fixedCode": "function updates_34() public { require(var_balance_34); var_balance_34 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "212-219",
        "vulnerabilityReason": "This function sends ether before updating the counter, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker may invoke this function multiple times, bypassing the counter limit and draining ether.",
        "fixedCode": "function checking_21() public { require(counter_21 <= 5); counter_21 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "221-226",
        "vulnerabilityReason": "Funds are transferred to the user before reducing their balance, enabling reentrant attacks.",
        "potentialSecurityRisk": "An attacker could call this function recursively, withdrawing more ether than their balance allows.",
        "fixedCode": "function withdrawFunds_10(uint256 _weiToWithdraw) public { require(balances_10[msg.sender] >= _weiToWithdraw); balances_10[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "228-233",
        "vulnerabilityReason": "The function transfers ether before resetting the balance, allowing reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker could exploit this function to make recursive calls and deplete the contract's ether.",
        "fixedCode": "function withdraw_balances_21() public { uint balance = balances_21[msg.sender]; balances_21[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "235-241",
        "vulnerabilityReason": "The function sends ether to the user before resetting their balance, making it prone to reentrancy attacks.",
        "potentialSecurityRisk": "This could allow an attacker to repeatedly call the function and drain the contract's ether beyond their balance.",
        "fixedCode": "function withdrawBalance_12() public { uint balance = userBalance_12[msg.sender]; userBalance_12[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }"
    },
    {
        "vulnerableLines": "244-248",
        "vulnerabilityReason": "The function sends funds using transfer before resetting the redeemable balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability by making multiple calls to claim rewards before the balance is reset, draining the contract's ether.",
        "fixedCode": "function claimReward_11() public { require(redeemableEther_11[msg.sender] > 0); uint transferValue_11 = redeemableEther_11[msg.sender]; redeemableEther_11[msg.sender] = 0; msg.sender.transfer(transferValue_11); }"
    },
    {
        "vulnerableLines": "253-256",
        "vulnerabilityReason": "The function uses call.value to send funds before updating the user's balance, making it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function to withdraw more funds than they are entitled to, depleting the contract's ether balance.",
        "fixedCode": "function withdraw_balances_1() public { uint256 balance = balances_1[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { balances_1[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "260-266",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the counter, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could call the function multiple times, bypassing the counter increment and withdrawing more funds than allowed.",
        "fixedCode": "function checking_35() public { require(counter_35 <= 5); counter_35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "270-276",
        "vulnerabilityReason": "The function uses call.value to send funds before resetting the user's balance, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this by making multiple calls to withdraw more funds than they are entitled to receive.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { userBalance_40[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "279-285",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user's balance, which is prone to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function to withdraw more funds than allowed, depleting the contract's balance.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { userBalance_33[msg.sender] = 0; } }"
    },
    {
        "vulnerableLines": "288-293",
        "vulnerabilityReason": "The function sends ether before updating the variable, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could call the function multiple times to withdraw more funds than intended.",
        "fixedCode": "function updates_27() public { require(var_balance_27); var_balance_27 = false; if (!msg.sender.send(1 ether)) { revert(); } }"
    },
    {
        "vulnerableLines": "297-300",
        "vulnerabilityReason": "The function uses send to transfer funds before updating the user's balance, making it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could make multiple calls to withdraw more funds than they are entitled to, draining the contract's balance.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "305-310",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the state variable, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could make multiple calls to withdraw more ether than intended.",
        "fixedCode": "function updates_13() public { require(var_balance_13); var_balance_13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }"
    },
    {
        "vulnerableLines": "346-351",
        "vulnerabilityReason": "The function sends funds using transfer before resetting the redeemable balance, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call the function to drain the contract's balance.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }"
    },
    {
        "vulnerableLines": "362-365",
        "vulnerabilityReason": "The function send ether to the user before deducting the balance, making it vulnerable to reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawFunds_38 (uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }"
    },
    {
        "vulnerableLines": "381-386",
        "vulnerabilityReason": "Funds are transferred to the user before updating the redeemable balance, allowing for reentrant execution.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly claim rewards before their balance is updated, depleting the contract's funds.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }"
    },
    {
        "vulnerableLines": "415-421",
        "vulnerabilityReason": "The function sends ether before updating counter, which can lead to a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could invoke this function repetitively, exploiting the unupdated counter to drain the contract.",
        "fixedCode": "function checking_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "437-443",
        "vulnerabilityReason": "The function sends funds before updating lastPlayer_23, allowing for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could maliciously invoke this function multiple times, getting more jackpot funds than they are entitled to.",
        "fixedCode": "function buyTicket_23() public { require(lastPlayer_23.send(jackpot_23)); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }"
    },
    {
        "vulnerableLines": "463-469",
        "vulnerabilityReason": "Sends ether without updating the state variable counter_14 before the transaction is complete.",
        "potentialSecurityRisk": "Could lead to repeated exploitation of the contract, causing it to lose a significant amount of ether.",
        "fixedCode": "function checking_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }"
    },
    {
        "vulnerableLines": "490-497",
        "vulnerabilityReason": "The function buyTicket_30 uses send to transfer the jackpot amount before updating the lastPlayer_30, leading to reentrancy risks.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain the contract's ether, as the state is not updated before transferring funds.",
        "fixedCode": "function buyTicket_30() public{ msg.sender.transfer(jackpot_30); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }"
    },
    {
        "vulnerableLines": "499-539",
        "vulnerabilityReason": "The function executeProposal uses call.value to transfer funds contained within a proposal before changing the state, which is vulnerable to reentrancy.",
        "potentialSecurityRisk": "A malicious contract could exploit this function to reenter and drain funds from the contract.",
        "fixedCode": "function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public { Proposal storage p = proposals[proposalNumber]; require(initialized); require(now > p.minExecutionDate && !p.executed && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))); uint quorum = 0; uint yea = 0; uint nay = 0; for (uint i = 0; i < p.votes.length; ++i) { Vote storage v = p.votes[i]; uint voteWeight = tokenAddress.actualBalanceOf(v.voter); quorum += voteWeight; if (v.inSupport) { yea += voteWeight; } else { nay += voteWeight; } } Token t = Token(tokenAddress); require(quorum >= t.totalSupply().mul(minimumQuorum).div(100)); if (yea > nay) { p.executed = true; (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode); require(success); p.proposalPassed = true; } else { p.proposalPassed = false; } emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed); }"
    },
    {
        "vulnerableLines": "540-545",
        "vulnerabilityReason": "The withdraw_balances_8 function sends ether using call.value before modifying the balances mapping, allowing for reentrancy risk.",
        "potentialSecurityRisk": "During the reentrancy, an attacker could repeatedly call this function to drain the contract of its funds.",
        "fixedCode": "function withdraw_balances_8() public { uint256 amount = balances_8[msg.sender]; balances_8[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(''); if (!success) { balances_8[msg.sender] = amount; } }"
    }
]