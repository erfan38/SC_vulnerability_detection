[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "The variable 'counter' is initialized to 0 and then decremented by 10 without any checks, leading to an underflow.",
        "potentialSecurityRisk": "This can cause 'counter' to wrap around to a large positive number, potentially manipulating subsequent logic.",
        "fixedCode": "function logFunctionTen() public { uint8 counter = 0; require(counter >= 10); counter = counter - 10; }"
    },
    {
        "vulnerableLines": "10-12",
        "vulnerabilityReason": "'counter' is incremented without any checks, which can cause overflow if 'p' is large.",
        "potentialSecurityRisk": "This can cause 'counter' to exceed its maximum value, potentially manipulating subsequent logic.",
        "fixedCode": "function logFunctionEleven(uint8 p) public { uint8 counter = 0; require(counter + p >= counter); counter = counter + p; }"
    },
    {
        "vulnerableLines": "24-26",
        "vulnerabilityReason": "As with logFunctionTen, 'counter' is initialized to 0 and decremented by 10, leading to an underflow.",
        "potentialSecurityRisk": "This can cause 'counter' to wrap around to a large positive number, potentially manipulating subsequent logic.",
        "fixedCode": "function logFunctionTwelve() public { uint8 counter = 0; require(counter >= 10); counter = counter - 10; }"
    },
    {
        "vulnerableLines": "47-49",
        "vulnerabilityReason": "Same issue as logFunctionEleven, 'counter' is incremented without any checks, leading to potential overflow.",
        "potentialSecurityRisk": "This can cause 'counter' to exceed its maximum value, potentially manipulating subsequent logic.",
        "fixedCode": "function logFunctionThirteen(uint8 p) public { uint8 counter = 0; require(counter + p >= counter); counter = counter + p; }"
    },
    {
        "vulnerableLines": "71-73",
        "vulnerabilityReason": "The variable 'lockTimeFinalExtra' is incremented without any validation, which can cause overflow if '_secondsToIncrease' is large.",
        "potentialSecurityRisk": "This can result in unintended contract behavior, making the contract state unpredictable.",
        "fixedCode": "function increaseLockTimeFinalExtra(uint _secondsToIncrease) public { require(lockTimeFinalExtra[msg.sender] + _secondsToIncrease >= lockTimeFinalExtra[msg.sender]); lockTimeFinalExtra[msg.sender] += _secondsToIncrease; }"
    },
    {
        "vulnerableLines": "74-77",
        "vulnerabilityReason": "'transferValueFinalExtra' assumes a constant value of 10 without checks if 'lockTimeFinalExtra' is sufficient.",
        "potentialSecurityRisk": "This can lead to balance attacks if the contract has insufficient balance to cover the transfer.",
        "fixedCode": "function withdrawLockTimeFinalExtra() public { require(now > lockTimeFinalExtra[msg.sender]); uint transferValueFinalExtra = 10; require(address(this).balance >= transferValueFinalExtra, 'Insufficient contract balance'); msg.sender.transfer(transferValueFinalExtra); }"
    },
    {
        "vulnerableLines": "84-86",
        "vulnerabilityReason": "As with logFunctionTen and logFunctionTwelve, 'counter' is decremented by 10 without checks, causing an underflow.",
        "potentialSecurityRisk": "This can cause 'counter' to wrap around to a large positive number, potentially manipulating subsequent logic.",
        "fixedCode": "function logFunctionFourteen() public { uint8 counter = 0; require(counter >= 10); counter = counter - 10; }"
    }
]