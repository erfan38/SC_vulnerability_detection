[
    {
        "vulnerableLines": "1-5",
        "vulnerabilityReason": "There is no check to ensure the contract has enough balance to transfer the 'transferValue_1'.",
        "potentialSecurityRisk": "If the contract does not have sufficient funds, this operation may fail, leading to unexpected behavior or denial of service.",
        "fixedCode": "function withdraw_1() public { require(now > lockTime_1[msg.sender]); uint transferValue_1 = 10; require(address(this).balance >= transferValue_1, 'Insufficient contract balance'); msg.sender.transfer(transferValue_1); }"
    },
    {
        "vulnerableLines": "24-29",
        "vulnerabilityReason": "Subtraction from 'balances_2[msg.sender]' can result in an underflow if '_value' is larger than 'balances_2[msg.sender]', leading to a false positive in the subsequent balance check.",
        "potentialSecurityRisk": "Potentially allows an attacker to withdraw more funds than they have, leading to wrongful balance manipulations and fund losses.",
        "fixedCode": "function transfer_2(address _to, uint _value) public returns (bool) { require(balances_2[msg.sender] >= _value); balances_2[msg.sender] -= _value; balances_2[_to] += _value; return true; }"
    },
    {
        "vulnerableLines": "42-49",
        "vulnerabilityReason": "As with 'withdraw_1', the transfer operation lacks a check for the contract's balance sufficiency before proceeding.",
        "potentialSecurityRisk": "Could result in transfer failures if the contract does not hold the necessary 'transferValue_17', leading to denial of service.",
        "fixedCode": "function withdraw_17() public { require(now > lockTime_17[msg.sender]); uint transferValue_17 = 10; require(address(this).balance >= transferValue_17, 'Insufficient contract balance'); msg.sender.transfer(transferValue_17); }"
    },
    {
        "vulnerableLines": "66-76",
        "vulnerabilityReason": "The 'sub' operation on 'amount' does not explicitly check for underflows, despite using user-provided values.",
        "potentialSecurityRisk": "Underflow can allow manipulated fund amounts, resulting in financial discrepancies and potential attacks.",
        "fixedCode": "function getAbortInvestAmount(User memory user) private view returns (uint256 amount) { uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY); require(commissionDays >= 3, 'Invest time must >= 3 days'); uint256 lossRatio = 15; if (commissionDays >= 60) { lossRatio = 5; } else if (commissionDays >= 30) { lossRatio = 10; } amount = user.currentInvestAmount; amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100)); require(amount <= user.currentInvestAmount, 'Underflow protection'); }"
    },
    {
        "vulnerableLines": "77-79",
        "vulnerabilityReason": "The subtraction operation on 'variables' starting from zero will result in an underflow.",
        "potentialSecurityRisk": "This underflow can lead to unexpected large values, potentially being misused in subsequent logic operations.",
        "fixedCode": "function checks_3() public { uint8 variables = 0; require(variables >= 10); variables = variables - 10; }"
    },
    {
        "vulnerableLines": "56-63",
        "vulnerabilityReason": "Analogous to 'withdraw_1' and 'withdraw_17', 'withdraw_37' lacks a balance check for the transfer amount before proceeding.",
        "potentialSecurityRisk": "Fails if the contract does not have enough funds, leading to potential denial of service situations.",
        "fixedCode": "function withdraw_37() public { require(now > lockTime_37[msg.sender]); uint transferValue_37 = 10; require(address(this).balance >= transferValue_37, 'Insufficient contract balance'); msg.sender.transfer(transferValue_37); }"
    },
    {
        "vulnerableLines": "109-117",
        "vulnerabilityReason": "Similar issue as in other 'withdraw' functions: transfer is attempted without validating the contract has enough balance.",
        "potentialSecurityRisk": "Insufficient funds in the contract can lead to failures in withdrawals, causing user trust issues and service disruptions.",
        "fixedCode": "function withdraw_9() public { require(now > lockTime_9[msg.sender]); uint transferValue_9 = 10; require(address(this).balance >= transferValue_9, 'Insufficient contract balance'); msg.sender.transfer(transferValue_9); }"
    }
]