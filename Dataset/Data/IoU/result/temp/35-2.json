[
    {
        "vulnerableLines": "1-10",
        "vulnerabilityReason": "Several arithmetic operations are performed without using SafeMath or other protections against overflow/underflow.",
        "potentialSecurityRisk": "Unprotected arithmetic operations can lead to unexpected values, potential fund theft, or contract malfunction due to overflow or underflow.",
        "fixedCode": "function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {\n uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n}"
    },
    {
        "vulnerableLines": "11-18",
        "vulnerabilityReason": "Arithmetic operations on balances without SafeMath or other protections against overflow/underflow.",
        "potentialSecurityRisk": "Unprotected arithmetic operations can lead to unexpected values, potential fund theft, or contract malfunction due to overflow or underflow.",
        "fixedCode": "function transfer_30(address _to, uint _value) public returns (bool) {\n require(balances_30[msg.sender] >= _value, 'Insufficient balance');\n balances_30[msg.sender] = balances_30[msg.sender].sub(_value);\n balances_30[_to] = balances_30[_to].add(_value);\n return true;\n }"
    },
    {
        "vulnerableLines": "20-27",
        "vulnerabilityReason": "Arithmetic operations on balances without SafeMath or other protections against overflow/underflow.",
        "potentialSecurityRisk": "Unprotected arithmetic operations can lead to unexpected values, potential fund theft, or contract malfunction due to overflow or underflow.",
        "fixedCode": "function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n if (!(tokens[tokenGet][sender] >= amount && availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount)) return false;\n return true;\n}"
    },
    {
        "vulnerableLines": "28-31",
        "vulnerabilityReason": "Arithmetic operations without SafeMath or other protections against overflow/underflow.",
        "potentialSecurityRisk": "Unprotected arithmetic operations can lead to unexpected values, potential fund theft, or contract malfunction due to overflow or underflow.",
        "fixedCode": "function balances_8(uint8 p_8) public {\n uint8 vars1 = 0;\n require(vars1 + p_8 >= vars1, 'Addition overflow');\n vars1 = vars1 + p_8;\n}"
    },
    {
        "vulnerableLines": "33-45",
        "vulnerabilityReason": "Arithmetic operations without SafeMath or other protections against overflow/underflow.",
        "potentialSecurityRisk": "Unprotected arithmetic operations can lead to unexpected values, potential fund theft, or contract malfunction due to overflow or underflow.",
        "fixedCode": "function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n uint available1;\n if (!((orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s) == user) && block.number <= expires)) return 0;\n available1 = tokens[tokenGive][user].mul(amountGet).div(amountGive);\n if (amountGet.sub(orderFills[user][hash]) < available1) return amountGet.sub(orderFills[user][hash]);\n return available1;\n}"
    },
    {
        "vulnerableLines": "51-54",
        "vulnerabilityReason": "Arithmetic operations without SafeMath or other protections against overflow/underflow.",
        "potentialSecurityRisk": "Unprotected arithmetic operations can lead to unexpected values, potential fund theft, or contract malfunction due to overflow or underflow.",
        "fixedCode": "function balances_39() public {\n uint8 vars = 0;\n require(vars >= 10, 'Subtraction underflow');\n vars = vars - 10;\n}"
    },
    {
        "vulnerableLines": "56-62",
        "vulnerabilityReason": "Arithmetic operations without SafeMath or other protections against overflow/underflow.",
        "potentialSecurityRisk": "Unprotected arithmetic operations can lead to unexpected values, potential fund theft, or contract malfunction due to overflow or underflow.",
        "fixedCode": "function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n require(!safeGuard, 'System Paused by Admin');\n bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s) == msg.sender), 'Invalid order');\n orderFills[msg.sender][hash] = amountGet;\n emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n }"
    }
]