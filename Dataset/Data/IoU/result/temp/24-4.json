[
    {
        "vulnerableLines": "21-22",
        "vulnerabilityReason": "The operation 'user.totalInvestCount.add(1)' and 'user.totalInvestAmount.add(investAmount)' are not constrained by any conditional statements or safe math library.",
        "potentialSecurityRisk": "An attacker could cause an overflow, leading to unpredictable behavior and potentially inflating their investments.",
        "fixedCode": "user.totalInvestCount = user.totalInvestCount.add(1); require(user.totalInvestCount > 0, 'Overflow error'); user.totalInvestAmount = user.totalInvestAmount.add(investAmount); require(user.totalInvestAmount >= investAmount, 'Overflow error');"
    },
    {
        "vulnerableLines": "31-32",
        "vulnerabilityReason": "The addition of 'sponsor.totalDownlineInvestAmount.add(investAmount)' is not validated.",
        "potentialSecurityRisk": "This could result in an overflow, leading to incorrect tracking of downline investments and potentially causing unexpected states.",
        "fixedCode": "sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount); require(sponsor.totalDownlineInvestAmount >= investAmount, 'Overflow error'); addressWalker = sponsor.sponsorAddress;"
    },
    {
        "vulnerableLines": "44-48",
        "vulnerabilityReason": "The additions 'sponsor.downlineCount.add(1)', 'sponsor.nodeCount.add(1)', and 'sponsor.totalDownlineInvestAmount.add(investAmount)' are not validated.",
        "potentialSecurityRisk": "Similar to previous cases, these could overflow, causing incorrect state transitions and potential logic errors.",
        "fixedCode": "sponsor.downlineCount = sponsor.downlineCount.add(1); require(sponsor.downlineCount > 0, 'Overflow error'); if (addressWalker == sponsorAddress) { sponsor.nodeCount = sponsor.nodeCount.add(1); require(sponsor.nodeCount > 0, 'Overflow error'); } sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount); require(sponsor.totalDownlineInvestAmount >= investAmount, 'Overflow error'); addressWalker = sponsor.sponsorAddress;"
    },
    {
        "vulnerableLines": "53-58",
        "vulnerabilityReason": "Several additions such as 'totalInvestCount.add(1)', 'totalInvestAmount.add(investAmount)', 'engineerFunds.add(investAmount.div(50))', and 'operatorFunds.add(investAmount.mul(3).div(100))' are not validated.",
        "potentialSecurityRisk": "An attacker could manipulate these values to overflow, causing incorrect fund distribution and tracking.",
        "fixedCode": "totalInvestCount = totalInvestCount.add(1); require(totalInvestCount > 0, 'Overflow error'); totalInvestAmount = totalInvestAmount.add(investAmount); require(totalInvestAmount >= investAmount, 'Overflow error'); engineerFunds = engineerFunds.add(investAmount.div(50)); require(engineerFunds >= investAmount.div(50), 'Overflow error'); operatorFunds = operatorFunds.add(investAmount.mul(3).div(100)); require(operatorFunds >= investAmount.mul(3).div(100), 'Overflow error');"
    },
    {
        "vulnerableLines": "62-64",
        "vulnerabilityReason": "The subtraction 'balances_38[msg.sender] - _value' and the subsequent assignments are not sufficiently checked.",
        "potentialSecurityRisk": "This could lead to an underflow, allowing an attacker to transfer more funds than available.",
        "fixedCode": "require(balances_38[msg.sender] >= _value, 'Underflow error'); balances_38[msg.sender] = balances_38[msg.sender].sub(_value); balances_38[_to] = balances_38[_to].add(_value);"
    },
    {
        "vulnerableLines": "75-84",
        "vulnerabilityReason": "The additions 'user.staticCommissionBalance.add(avaliableSCA)', 'user.totalWithdrawAmount.add(avaliableIA)', and 'totalWithdrawAmount.add(avaliableIA)' are not validated.",
        "potentialSecurityRisk": "These could overflow, allowing manipulation of commission balances and withdrawals.",
        "fixedCode": "user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA); require(user.staticCommissionBalance >= avaliableSCA, 'Overflow error'); user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA); require(user.totalWithdrawAmount >= avaliableIA, 'Overflow error'); totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA); require(totalWithdrawAmount >= avaliableIA, 'Overflow error');"
    },
    {
        "vulnerableLines": "97-108",
        "vulnerabilityReason": "Several additions involving 'user.dynamicCommissionBalance', 'user.staticCommissionBalance', and 'totalWithdrawAmount' are unchecked.",
        "potentialSecurityRisk": "This introduces overflow risks, leading to incorrect commission handling and potential fund mismanagement.",
        "fixedCode": "user.staticCommissionBalance = 0; user.dynamicCommissionBalance = 0; user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA); require(user.currentStaticCommissionWithdrawAmount >= avaliableSCA, 'Overflow error'); user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB); require(user.totalStaticCommissionWithdrawAmount >= avaliableSCB, 'Overflow error'); user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB); require(user.totalDynamicCommissionWithdrawAmount >= avaliableDCB, 'Overflow error'); user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount); require(user.totalWithdrawAmount >= avaliableWithdrawAmount, 'Overflow error'); totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB); require(totalStaticCommissionWithdrawAmount >= avaliableSCB, 'Overflow error'); totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB); require(totalDynamicCommissionWithdrawAmount >= avaliableDCB, 'Overflow error'); totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount); require(totalWithdrawAmount >= avaliableWithdrawAmount, 'Overflow error'); if (avaliableSCB > 0) { addStaticCommissionRecord(msg.sender, now, avaliableSCB); }"
    },
    {
        "vulnerableLines": "90-90",
        "vulnerabilityReason": "The addition 'variables1 + p_4' without conditionals or safe math checks can overflow.",
        "potentialSecurityRisk": "Overflow risks can manipulate the variable's value, leading to logic errors.",
        "fixedCode": "uint8 variables1 = 0; require(variables1 + p_4 >= variables1, 'Overflow error'); variables1 = variables1 + p_4;"
    },
    {
        "vulnerableLines": "117-117",
        "vulnerabilityReason": "The subtraction 'variables - 10' without conditionals or safe math checks can underflow.",
        "potentialSecurityRisk": "Underflow risks can manipulate the variable leading to unintended values.",
        "fixedCode": "uint8 variables = 0; require(variables >= 10, 'Underflow error'); variables = variables - 10;"
    }
]