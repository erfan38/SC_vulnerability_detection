[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "The variable 'tempVar' is initialized to 0 and then decremented by 10 without any checks, leading to an underflow.",
        "potentialSecurityRisk": "This allows 'tempVar' to wrap around to a large positive number, which could be exploited to manipulate subsequent logic, potentially leading to unexpected contract behavior.",
        "fixedCode": "function debugNine(uint8 param) public { uint8 tempVar = 0; require(tempVar >= 10); tempVar = tempVar - 10; }"
    },
    {
        "vulnerableLines": "12-14",
        "vulnerabilityReason": "The variable 'tempVar' is incremented by 'param' without checking for overflow.",
        "potentialSecurityRisk": "This can cause 'tempVar' to overflow if 'param' is sufficiently large, leading to unexpected behavior.",
        "fixedCode": "function debugTen(uint8 param) public { uint8 tempVar = 0; require(tempVar + param >= tempVar); tempVar = tempVar + param; }"
    },
    {
        "vulnerableLines": "26-28",
        "vulnerabilityReason": "The variable 'tempVar' is initialized to 0 and then decremented by 10 without any checks, leading to an underflow.",
        "potentialSecurityRisk": "This allows 'tempVar' to wrap around to a large positive number, which could be exploited to manipulate subsequent logic, potentially leading to unexpected contract behavior.",
        "fixedCode": "function debugEleven(uint8 param) public { uint8 tempVar = 0; require(tempVar >= 10); tempVar = tempVar - 10; }"
    },
    {
        "vulnerableLines": "38-40",
        "vulnerabilityReason": "The variable 'tempVar' is incremented by 'param' without checking for overflow.",
        "potentialSecurityRisk": "This can cause 'tempVar' to overflow if 'param' is sufficiently large, leading to unexpected behavior.",
        "fixedCode": "function debugTwelve(uint8 param) public { uint8 tempVar = 0; require(tempVar + param >= tempVar); tempVar = tempVar + param; }"
    },
    {
        "vulnerableLines": "52-56",
        "vulnerabilityReason": "There is no check to prevent overflow when increasing the lock time.",
        "potentialSecurityRisk": "An attacker could cause the lock time to overflow, resulting in the lock time being set to a smaller value than intended, allowing premature withdrawals.",
        "fixedCode": "function increaseLockTimeExample2(uint _secondsToIncrease) public { require(lockTimeExample2[msg.sender] + _secondsToIncrease >= lockTimeExample2[msg.sender]); lockTimeExample2[msg.sender] += _secondsToIncrease; }"
    },
    {
        "vulnerableLines": "57-60",
        "vulnerabilityReason": "The withdrawal value 'transferValueExample2' is hardcoded and could potentially cause issues if the contract balance is insufficient.",
        "potentialSecurityRisk": "This could lead to failed transactions or potential reentrancy attacks if not handled properly.",
        "fixedCode": "function withdrawExample2() public { require(now > lockTimeExample2[msg.sender]); uint transferValueExample2 = 10; require(address(this).balance >= transferValueExample2); msg.sender.transfer(transferValueExample2); }"
    }
]