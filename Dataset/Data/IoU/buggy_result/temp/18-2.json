[
    {
        "vulnerableLines": "2-4",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balances becoming erroneously high.",
        "fixedCode": "function transfer_intou18(address _to, uint _value) public returns (bool) {\n    require(balances_intou18[msg.sender] >= _value, 'Insufficient balance'); \n    balances_intou18[msg.sender] -= _value;\n    balances_intou18[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "11",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou29(uint _secondsToIncrease) public {\n    require(lockTime_intou29[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou29[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "22-24",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balances becoming erroneously high.",
        "fixedCode": "function transfer_intou62(address _to, uint _value) public returns (bool) {\n    require(balances_intou6[msg.sender] >= _value, 'Insufficient balance'); \n    balances_intou6[msg.sender] -= _value;\n    balances_intou6[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "30-31",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou16(uint8 p_intou16) public{\n    uint8 vundflw1=0;\n    require(vundflw1 <= type(uint8).max - p_intou16, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou16;\n}"
    },
    {
        "vulnerableLines": "42",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou5(uint _secondsToIncrease) public {\n    require(lockTime_intou5[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou5[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "52",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou15() public{\n    uint8 vundflw=0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "59",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou13(uint _secondsToIncrease) public {\n    require(lockTime_intou13[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou13[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "96",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou37(uint _secondsToIncrease) public {\n    require(lockTime_intou37[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou37[msg.sender] += _secondsToIncrease;\n}"
    }
]