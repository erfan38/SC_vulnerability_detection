[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou35() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "9-11",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    require(vundflw1 <= type(uint8).max - p_intou40, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou40;\n}"
    },
    {
        "vulnerableLines": "17-25",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou33(uint _secondsToIncrease) public {\n    require(lockTime_intou33[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou33[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou33() public {\n    require(now > lockTime_intou33[msg.sender]);\n    uint transferValue_intou33 = 10;\n    msg.sender.transfer(transferValue_intou33);\n}"
    },
    {
        "vulnerableLines": "32-33",
        "vulnerabilityReason": "Although the require statement in line 32 prevents underflow, the check in line 33 is redundant and does not contribute to safety against overflows.",
        "potentialSecurityRisk": "Unnecessary checks can cause confusion and increase the gas costs slightly.",
        "fixedCode": "function transfer(address to, uint256 value) public returns (bool success) {\n    require(msg.sender != to);\n    require(value > 0);\n    require(balances[msg.sender] >= value);\n    \n    if(msg.sender == team) {\n        require(now >= 1589036400);     // 800M lock to 2020-05-10\n        if(balances[msg.sender] - value < toWei(600000000))\n            require(now >= 1620572400);     // 10M lock to 2021-05-10\n        if(balances[msg.sender] - value < toWei(400000000))\n            require(now >= 1652108400);     // 10M lock to 2022-05-10\n        if(balances[msg.sender] - value < toWei(200000000))\n            require(now >= 1683644400);     // 10M lock to 2023-05-10\n    }\n    \n    balances[msg.sender] -= value;\n    balances[to] += value;\n    \n    emit Transfer(msg.sender, to, value);\n    return true;\n}"
    },
    {
        "vulnerableLines": "51-53",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou27() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "77-85",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou13(uint _secondsToIncrease) public {\n    require(lockTime_intou13[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou13[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou13() public {\n    require(now > lockTime_intou13[msg.sender]);\n    uint transferValue_intou13 = 10;\n    msg.sender.transfer(transferValue_intou13);\n}"
    }
]