[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value, leading to denial of service or incorrect lock times.",
        "fixedCode": "function increaseLockTime_intou37(uint _secondsToIncrease) public {\n    require(lockTime_intou37[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou37[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "19-22",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou3() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "43-44",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function _transfer(address sender, address recipient, uint256 amount) internal {\n    require(sender != address(0), 'ERC20: transfer from the zero address');\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\n\n    uint256 senderTimeElasped = now - (_balances[sender].time);\n    uint256 recipientTimeElasped = now - (_balances[recipient].time);\n\n    if(senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){\n        uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n        mint(sender , bonus);\n    }\n\n    if(recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender != recipient){\n         uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n         mint(recipient , bonus);\n    }\n\n    require(_balances[sender].amount >= amount, 'ERC20: transfer amount exceeds balance');\n    _balances[sender].amount = _balances[sender].amount.sub(amount);\n    _balances[recipient].amount = _balances[recipient].amount.add(amount);\n\n    _balances[sender].time = now;\n    _balances[recipient].time = now;\n\n    emit Transfer(sender, recipient, amount);\n}"
    },
    {
        "vulnerableLines": "53-57",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value, leading to denial of service or incorrect lock times.",
        "fixedCode": "function increaseLockTime_intou9(uint _secondsToIncrease) public {\n    require(lockTime_intou9[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou9[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "71-75",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value, leading to denial of service or incorrect lock times.",
        "fixedCode": "function increaseLockTime_intou25(uint _secondsToIncrease) public {\n    require(lockTime_intou25[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou25[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "89-92",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou19() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "109-115",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou26[msg.sender] -= _value;\n    balances_intou26[_to] += _value;\n    return true;\n}"
    }
]