[
    {
        "vulnerableLines": "98-105",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "mapping(address => uint) balances_intou10;\n\nfunction transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou10[msg.sender] -= _value;\n    balances_intou10[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "107-114",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "mapping(address => uint) balances_intou22;\n\nfunction transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou22[msg.sender] -= _value;\n    balances_intou22[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "116-119",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1= 0;\n    require(vundflw1 <= type(uint8).max - p_intou12, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou12;\n}"
    }
]