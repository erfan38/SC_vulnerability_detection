[
    {
        "vulnerableLines": "11-12",
        "vulnerabilityReason": "Subtraction and addition operations on balances without using safe math library or checks.",
        "potentialSecurityRisk": "Can cause integer overflow or underflow, leading to tokens being incorrectly transferred.",
        "fixedCode": "function transfer(address _to, uint256 _value) public returns (bool success) {\n    assert(_to != address(this) && !isTransPaused && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    if(msg.sender == owner){\n        emit Transfer(address(this), _to, _value);\n    } else {\n        emit Transfer(msg.sender, _to, _value);\n    }\n    return true;\n}"
    },
    {
        "vulnerableLines": "20-27",
        "vulnerabilityReason": "Subtraction and addition operations on balances without using safe math library or checks.",
        "potentialSecurityRisk": "Can cause integer overflow or underflow, leading to tokens being incorrectly transferred.",
        "fixedCode": "function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] >= _value);\n    balances_intou14[msg.sender] = balances_intou14[msg.sender].sub(_value);\n    balances_intou14[_to] = balances_intou14[_to].add(_value);\n    return true;\n}"
    },
    {
        "vulnerableLines": "33-44",
        "vulnerabilityReason": "Subtraction and addition operations on balances without using safe math library or checks.",
        "potentialSecurityRisk": "Can cause integer overflow or underflow, leading to tokens being incorrectly transferred.",
        "fixedCode": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    assert(_to != address(this) && !isTransPaused && balances[_from] >= _value && balances[_to] + _value > balances[_to] && allowed[_from][msg.sender] >= _value);\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    if(_from == owner){\n        emit Transfer(address(this), _to, _value);\n    } else {\n        emit Transfer(_from, _to, _value);\n    }\n    return true;\n}"
    },
    {
        "vulnerableLines": "52-59",
        "vulnerabilityReason": "Subtraction and addition operations on balances without using safe math library or checks.",
        "potentialSecurityRisk": "Can cause integer overflow or underflow, leading to tokens being incorrectly transferred.",
        "fixedCode": "function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] >= _value);\n    balances_intou30[msg.sender] = balances_intou30[msg.sender].sub(_value);\n    balances_intou30[_to] = balances_intou30[_to].add(_value);\n    return true;\n}"
    },
    {
        "vulnerableLines": "68-71",
        "vulnerabilityReason": "Addition operation on uint8 without boundary checks, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou8, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou8;\n}"
    },
    {
        "vulnerableLines": "80-81",
        "vulnerabilityReason": "Subtraction operation without boundary checks, causing potential underflow.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou39() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "93-95",
        "vulnerabilityReason": "Addition operation on uint8 without boundary checks, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou36, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou36;\n}"
    },
    {
        "vulnerableLines": "103-105",
        "vulnerabilityReason": "Subtraction operation without boundary checks, causing potential underflow.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou35() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "114-116",
        "vulnerabilityReason": "Addition operation on uint8 without boundary checks, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou40, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou40;\n}"
    }
]