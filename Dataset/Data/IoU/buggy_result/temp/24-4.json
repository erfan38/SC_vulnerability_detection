[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, which can cause overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or incorrect lock periods.",
        "fixedCode": "function increaseLockTime_intou9(uint _secondsToIncrease) public {\n    require(lockTime_intou9[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou9[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "41-45",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, which can cause overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or incorrect lock periods.",
        "fixedCode": "function increaseLockTime_intou25(uint _secondsToIncrease) public {\n    require(lockTime_intou25[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou25[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "56-63",
        "vulnerabilityReason": "Multiple arithmetic operations without bounds checking.",
        "potentialSecurityRisk": "Can cause integer overflow, leading to incorrect commission calculations.",
        "fixedCode": "function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n    if (user.currentInvestAmount == 0) {\n        amount = 0;\n    } else {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        if (commissionDays > user.currentInvestCycle) {\n            commissionDays = user.currentInvestCycle;\n        }\n        amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n        amount = amount.div(1000);\n        amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n    }\n}"
    },
    {
        "vulnerableLines": "65-68",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou19() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "78-84",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou26[msg.sender] -= _value;\n    balances_intou26[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "95-98",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou20, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou20;\n}"
    },
    {
        "vulnerableLines": "108-111",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou32, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou32;\n}"
    }
]