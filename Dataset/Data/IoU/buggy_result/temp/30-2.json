[
    {
        "vulnerableLines": "8-112",
        "vulnerabilityReason": "The `_balances` mapping subtraction and addition operations in functions `transfer`, `_move`, `_send`, etc. are not constrained by any form of overflow/underflow checks.",
        "potentialSecurityRisk": "Can cause an integer overflow or underflow, leading to unpredictable balance values and potential theft or denial of service.",
        "fixedCode": "contract ERC777 is IERC777, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    mapping(address => uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    address[] private _defaultOperatorsArray;\n\n    mapping(address => bool) private _defaultOperators;\n\n    mapping(address => mapping(address => bool)) private _operators;\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address[] memory defaultOperators\n    ) public {\n        _name = name;\n        _symbol = symbol;\n\n        _defaultOperatorsArray = defaultOperators;\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\n        }\n\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function granularity() public view returns (uint256) {\n        return 1;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address tokenHolder) public view returns (uint256) {\n        return _balances[tokenHolder];\n    }\n\n    function send(address recipient, uint256 amount, bytes calldata data) external {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n\n    function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n        address from = msg.sender;\n\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n\n        _move(from, from, recipient, amount, \"\", \"\");\n\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    function burn(uint256 amount, bytes calldata data) external {\n        _burn(msg.sender, msg.sender, amount, data, \"\");\n    }\n\n    function _move(address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData) internal {\n        require(_balances[from] >= amount, \"ERC777: transfer amount exceeds balance\");\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Transfer(from, to, amount);\n    }\n\n    function _send(address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck) internal {\n        _move(operator, from, to, amount, userData, operatorData);\n    }\n\n    function _burn(address operator, address from, uint256 amount, bytes memory userData, bytes memory operatorData) internal {\n        require(_balances[from] >= amount, \"ERC777: burn amount exceeds balance\");\n        _balances[from] = _balances[from].sub(amount);\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(from, address(0), amount);\n    }\n}"
    }
]