[
    {
        "vulnerableLines": "16-18",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou11() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "39-41",
        "vulnerabilityReason": "Arithmetic addition operation without proper bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint, leading to integer overflow.",
        "fixedCode": "function increaseLockTime_intou1(uint _secondsToIncrease) public {\n    require(lockTime_intou1[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou1[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "56-61",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou18(address _to, uint _value) public returns (bool) {\n    require(balances_intou18[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou18[msg.sender] -= _value;\n    balances_intou18[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "67-69",
        "vulnerabilityReason": "Arithmetic addition operation without proper bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint, leading to integer overflow.",
        "fixedCode": "function increaseLockTime_intou29(uint _secondsToIncrease) public {\n    require(lockTime_intou29[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou29[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "78-82",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou62(address _to, uint _value) public returns (bool) {\n    require(balances_intou6[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou6[msg.sender] -= _value;\n    balances_intou6[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "85-88",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to integer overflow.",
        "fixedCode": "function bug_intou16(uint8 p_intou16) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou16, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou16;\n}"
    },
    {
        "vulnerableLines": "90-93",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to integer overflow.",
        "fixedCode": "function bug_intou24(uint8 p_intou24) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou24, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou24;\n}"
    },
    {
        "vulnerableLines": "96-105",
        "vulnerabilityReason": "Arithmetic addition operation without proper bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint, leading to integer overflow.",
        "fixedCode": "function increaseLockTime_intou5(uint _secondsToIncrease) public {\n    require(lockTime_intou5[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou5[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou5() public {\n    require(now > lockTime_intou5[msg.sender], 'Lock time not reached');\n    uint transferValue_intou5 = 10;\n    msg.sender.transfer(transferValue_intou5);\n}"
    },
    {
        "vulnerableLines": "109-111",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou15() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    }
]