[
    {
        "vulnerableLines": "1-4",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou23() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "33-37",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou14[msg.sender] -= _value;\n    balances_intou14[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "66-72",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou30[msg.sender] -= _value;\n    balances_intou30[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "97-100",
        "vulnerabilityReason": "The loop assumes tokenAddress.actualBalanceOf(v.voter) will not cause an overflow when added to quorum. There is no bounds check.",
        "potentialSecurityRisk": "Can cause an integer overflow in the quorum variable, leading to incorrect vote tallying and potential manipulation of the quorum check.",
        "fixedCode": "for (uint i = 0; i <  p.votes.length; ++i) {\n    Vote storage v = p.votes[i];\n    uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n    require(quorum <= type(uint).max - voteWeight, 'Overflow risk');\n    quorum += voteWeight;\n    if (v.inSupport) {\n        yea += voteWeight;\n    } else {\n        nay += voteWeight;\n    }\n}"
    }
]