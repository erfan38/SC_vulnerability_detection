[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou35() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "26-28",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou40, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou40;\n}"
    },
    {
        "vulnerableLines": "81-85",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou33(uint _secondsToIncrease) public {\n    require(lockTime_intou33[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou33[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "98-100",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou27() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "40-41",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking or the use of safe math library.",
        "potentialSecurityRisk": "Can cause integer overflow if `now` is manipulated, leading to incorrect values for `commissionDays`.",
        "fixedCode": "uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\nrequire(commissionDays >= 0, 'Invalid commissionDays');"
    },
    {
        "vulnerableLines": "62-63",
        "vulnerabilityReason": "Arithmetic addition operation without the use of safe math library.",
        "potentialSecurityRisk": "Can cause arithmetic overflow, leading to incorrect and potentially harmful balance values.",
        "fixedCode": "using SafeMath for uint256;\nsponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);"
    },
    {
        "vulnerableLines": "66-67",
        "vulnerabilityReason": "Arithmetic addition operation without the use of safe math library.",
        "potentialSecurityRisk": "Can cause arithmetic overflow, leading to incorrect and potentially harmful balance values.",
        "fixedCode": "depth = depth.add(1);"
    },
    {
        "vulnerableLines": "76-77",
        "vulnerabilityReason": "Arithmetic addition operation without the use of safe math library.",
        "potentialSecurityRisk": "Can cause arithmetic overflow, leading to incorrect and potentially harmful balance values.",
        "fixedCode": "user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);"
    }
]