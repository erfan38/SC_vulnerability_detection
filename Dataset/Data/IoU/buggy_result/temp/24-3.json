[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou1(uint _secondsToIncrease) public {\n    require(lockTime_intou1[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou1[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "33-39",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou2[msg.sender] -= _value;\n    balances_intou2[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "51-60",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou17(uint _secondsToIncrease) public {\n    require(lockTime_intou17[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou17[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou17() public {\n    require(now > lockTime_intou17[msg.sender]);\n    uint transferValue_intou17 = 10;\n    msg.sender.transfer(transferValue_intou17);\n}"
    },
    {
        "vulnerableLines": "65-74",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou37(uint _secondsToIncrease) public {\n    require(lockTime_intou37[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou37[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou37() public {\n    require(now > lockTime_intou37[msg.sender]);\n    uint transferValue_intou37 = 10;\n    msg.sender.transfer(transferValue_intou37);\n}"
    },
    {
        "vulnerableLines": "76-87",
        "vulnerabilityReason": "Arithmetic operations on potentially unvalidated parameters, leading to possible integer overflow or underflow.",
        "potentialSecurityRisk": "The investment amount or loss ratio calculations may exceed the max permissible amount leading to unexpected behavior.",
        "fixedCode": "function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n    uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n    require(commissionDays >= 3, 'Invest time must >= 3days');\n    uint256 lossRatio = 15;\n    if (commissionDays >= 60) {\n        lossRatio = 5;\n    } else if (commissionDays >= 30) {\n        lossRatio = 10;\n    }\n    amount = user.currentInvestAmount;\n    require(user.currentInvestAmount.mul(lossRatio).div(100) <= amount, 'Underflow risk');\n    amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n}"
    },
    {
        "vulnerableLines": "88-91",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou3() public {\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    }
]