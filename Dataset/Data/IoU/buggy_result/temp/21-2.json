[
    {
        "vulnerableLines": "1-5",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou14[msg.sender] -= _value;\n    balances_intou14[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "16-20",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou30[msg.sender] -= _value;\n    balances_intou30[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "33-35",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1= 0;\n    require(vundflw1 <= type(uint8).max - p_intou8, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou8;\n}"
    },
    {
        "vulnerableLines": "38-55",
        "vulnerabilityReason": "Arithmetic subtraction and addition operations without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow or overflow, leading to balance values being erroneously high or low.",
        "fixedCode": "function withdraw(uint8 type_, address tokenaddr, uint256 amount) dexstatuscheck public returns (bool) {\n    require(type_ == 0 || type_ == 1);\n    if (type_ == 0) { // withdraw ether\n        require(tokenaddr == address(0));\n        require(amount > 0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)] < amount);\n        require(amount <= address(this).balance);\n        msg.sender.transfer(amount.sub(withdrawfee[address(0)]));\n        userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n        feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n    } else { // withdraw token\n        require(tokenaddr != address(0) && tokendetails[tokenaddr].status == true);\n        require(amount > 0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr] < amount);\n        Token(tokenaddr).transfer(msg.sender, amount.sub(withdrawfee[tokenaddr]));\n        userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n        feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n    }\n    emit DepositandWithdraw(msg.sender, tokenaddr, amount, 1);\n    return true;\n}"
    },
    {
        "vulnerableLines": "59-61",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou39() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "81-84",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1= 0;\n    require(vundflw1 <= type(uint8).max - p_intou36, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou36;\n}"
    },
    {
        "vulnerableLines": "89-95",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for withdrawfee, leading to balance or fee manipulation.",
        "fixedCode": "function setwithdrawfee(address[] memory addr, uint256[] memory feeamount) public returns (bool) {\n    require(msg.sender == admin);\n    require(addr.length < 10 && feeamount.length < 10 && addr.length == feeamount.length);\n    for (uint8 i = 0; i < addr.length; i++) {\n        require(withdrawfee[addr[i]] <= type(uint).max - feeamount[i], 'Overflow risk');\n        withdrawfee[addr[i]] = feeamount[i];\n    }\n    return true;\n}"
    },
    {
        "vulnerableLines": "97-99",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou35() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    }
]