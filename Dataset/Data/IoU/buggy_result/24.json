[
    {
        "vulnerableLines": "48-48",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to incorrect balances or other unexpected behavior.",
        "fixedCode": "function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n}"
    },
    {
        "vulnerableLines": "57-57",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to incorrect balances or other unexpected behavior.",
        "fixedCode": "function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n    return c;\n}"
    },
    {
        "vulnerableLines": "233-235",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou18(address _to, uint _value) public returns (bool) {\n    require(balances_intou18[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou18[msg.sender] -= _value;\n    balances_intou18[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "241-243",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou29(uint _secondsToIncrease) public {\n    require(lockTime_intou29[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou29[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "252-256",
        "vulnerabilityReason": "Arithmetic subtraction operation `balances_intou6[msg.sender] - _value` without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou62(address _to, uint _value) public returns (bool) {\n    require(balances_intou6[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou6[msg.sender] -= _value;\n    balances_intou6[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "259-262",
        "vulnerabilityReason": "Arithmetic addition operation `vundflw1 = vundflw1 + p_intou16` without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou16(uint8 p_intou16) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou16, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou16;\n}"
    },
    {
        "vulnerableLines": "264-267",
        "vulnerabilityReason": "Arithmetic addition operation `vundflw1 = vundflw1 + p_intou24` without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou24(uint8 p_intou24) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou24, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou24;\n}"
    },
    {
        "vulnerableLines": "271-273",
        "vulnerabilityReason": "Arithmetic addition operation `lockTime_intou5[msg.sender] += _secondsToIncrease` without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou5(uint _secondsToIncrease) public {\n    require(lockTime_intou5[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou5[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "280-282",
        "vulnerabilityReason": "Arithmetic subtraction operation `vundflw = vundflw -10` without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou15() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "286-288",
        "vulnerabilityReason": "Arithmetic addition operation `vundflw1 = vundflw1 + p_intou28` without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou28(uint8 p_intou28) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou28, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou28;\n}"
    },
    {
        "vulnerableLines": "293-297",
        "vulnerabilityReason": "Arithmetic subtraction operation `balances_intou34[msg.sender] - _value` without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou34(address _to, uint _value) public returns (bool) {\n    require(balances_intou34[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou34[msg.sender] -= _value;\n    balances_intou34[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "302-304",
        "vulnerabilityReason": "Arithmetic addition operation `lockTime_intou21[msg.sender] += _secondsToIncrease` without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou21(uint _secondsToIncrease) public {\n    require(lockTime_intou21[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou21[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "313-317",
        "vulnerabilityReason": "Arithmetic subtraction operation `balances_intou10[msg.sender] - _value` without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou10[msg.sender] -= _value;\n    balances_intou10[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "322-326",
        "vulnerabilityReason": "Arithmetic subtraction operation `balances_intou22[msg.sender] - _value` without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou22[msg.sender] -= _value;\n    balances_intou22[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "329-332",
        "vulnerabilityReason": "Arithmetic addition operation `vundflw1 = vundflw1 + p_intou12` without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou12, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou12;\n}"
    },
    {
        "vulnerableLines": "352-354",
        "vulnerabilityReason": "Arithmetic subtraction operation `vundflw = vundflw -10` without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou11() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "368-370",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou1(uint _secondsToIncrease) public {\n    require(lockTime_intou1[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou1[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "400-406",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou2[msg.sender] -= _value;\n    balances_intou2[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "418-427",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou17(uint _secondsToIncrease) public {\n    require(lockTime_intou17[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou17[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou17() public {\n    require(now > lockTime_intou17[msg.sender]);\n    uint transferValue_intou17 = 10;\n    msg.sender.transfer(transferValue_intou17);\n}"
    },
    {
        "vulnerableLines": "432-441",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou37(uint _secondsToIncrease) public {\n    require(lockTime_intou37[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou37[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou37() public {\n    require(now > lockTime_intou37[msg.sender]);\n    uint transferValue_intou37 = 10;\n    msg.sender.transfer(transferValue_intou37);\n}"
    },
    {
        "vulnerableLines": "443-454",
        "vulnerabilityReason": "Arithmetic operations on potentially unvalidated parameters, leading to possible integer overflow or underflow.",
        "potentialSecurityRisk": "The investment amount or loss ratio calculations may exceed the max permissible amount leading to unexpected behavior.",
        "fixedCode": "function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n    uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n    require(commissionDays >= 3, 'Invest time must >= 3days');\n    uint256 lossRatio = 15;\n    if (commissionDays >= 60) {\n        lossRatio = 5;\n    } else if (commissionDays >= 30) {\n        lossRatio = 10;\n    }\n    amount = user.currentInvestAmount;\n    require(user.currentInvestAmount.mul(lossRatio).div(100) <= amount, 'Underflow risk');\n    amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n}"
    },
    {
        "vulnerableLines": "455-458",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou3() public {\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "489-491",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, which can cause overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or incorrect lock periods.",
        "fixedCode": "function increaseLockTime_intou9(uint _secondsToIncrease) public {\n    require(lockTime_intou9[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou9[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "529-533",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, which can cause overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or incorrect lock periods.",
        "fixedCode": "function increaseLockTime_intou25(uint _secondsToIncrease) public {\n    require(lockTime_intou25[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou25[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "544-551",
        "vulnerabilityReason": "Multiple arithmetic operations without bounds checking.",
        "potentialSecurityRisk": "Can cause integer overflow, leading to incorrect commission calculations.",
        "fixedCode": "function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n    if (user.currentInvestAmount == 0) {\n        amount = 0;\n    } else {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        if (commissionDays > user.currentInvestCycle) {\n            commissionDays = user.currentInvestCycle;\n        }\n        amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n        amount = amount.div(1000);\n        amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n    }\n}"
    },
    {
        "vulnerableLines": "553-556",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou19() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "566-572",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou26[msg.sender] -= _value;\n    balances_intou26[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "583-586",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou20, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou20;\n}"
    },
    {
        "vulnerableLines": "596-599",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou32, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou32;\n}"
    },
    {
        "vulnerableLines": "662-664",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking and proper error messages.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou38[msg.sender] -= _value;\n    balances_intou38[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "689-691",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou4, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou4;\n}"
    },
    {
        "vulnerableLines": "716-718",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou7() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "728-731",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou23() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "741-748",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou14[msg.sender] -= _value;\n    balances_intou14[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "759-766",
        "vulnerabilityReason": "Arithmetic subtraction operation without proper bounds checking before modification.",
        "potentialSecurityRisk": "Can cause integer underflow, leading to balance values being erroneously high.",
        "fixedCode": "function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] >= _value, 'Insufficient balance');\n    balances_intou30[msg.sender] -= _value;\n    balances_intou30[_to] += _value;\n    return true;\n}"
    },
    {
        "vulnerableLines": "785-788",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou8, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou8;\n}"
    },
    {
        "vulnerableLines": "794-797",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou39() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "819-822",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou36, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou36;\n}"
    },
    {
        "vulnerableLines": "844-846",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou35() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "869-871",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint8, leading to erroneous balance values.",
        "fixedCode": "function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1 = 0;\n    require(vundflw1 <= type(uint8).max - p_intou40, 'Overflow risk');\n    vundflw1 = vundflw1 + p_intou40;\n}"
    },
    {
        "vulnerableLines": "924-928",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou33(uint _secondsToIncrease) public {\n    require(lockTime_intou33[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou33[msg.sender] += _secondsToIncrease;\n}"
    },
    {
        "vulnerableLines": "941-943",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou27() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "883-884",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking or the use of safe math library.",
        "potentialSecurityRisk": "Can cause integer overflow if `now` is manipulated, leading to incorrect values for `commissionDays`.",
        "fixedCode": "uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\nrequire(commissionDays >= 0, 'Invalid commissionDays');"
    },
    {
        "vulnerableLines": "905-906",
        "vulnerabilityReason": "Arithmetic addition operation without the use of safe math library.",
        "potentialSecurityRisk": "Can cause arithmetic overflow, leading to incorrect and potentially harmful balance values.",
        "fixedCode": "using SafeMath for uint256;\nsponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);"
    },
    {
        "vulnerableLines": "909-910",
        "vulnerabilityReason": "Arithmetic addition operation without the use of safe math library.",
        "potentialSecurityRisk": "Can cause arithmetic overflow, leading to incorrect and potentially harmful balance values.",
        "fixedCode": "depth = depth.add(1);"
    },
    {
        "vulnerableLines": "919-920",
        "vulnerabilityReason": "Arithmetic addition operation without the use of safe math library.",
        "potentialSecurityRisk": "Can cause arithmetic overflow, leading to incorrect and potentially harmful balance values.",
        "fixedCode": "user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);"
    },
    {
        "vulnerableLines": "946-981",
        "vulnerabilityReason": "Multiple arithmetic operations (addition, subtraction, multiplication, and division) are used without bounds checking or safe math libraries to prevent overflows/underflows.",
        "potentialSecurityRisk": "Integer overflow/underflow vulnerabilities can result in incorrect commission calculations, leading to potential loss or misallocation of funds.",
        "fixedCode": "function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n    for (uint256 i = index; i < (index + length); ++i) {\n        User memory user = userMapping[addressMapping[i]];\n        if (user.currentInvestAmount > 0) {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                uint256 depth = 1;\n                address addressWalker = user.sponsorAddress;\n                while (addressWalker != GENESIS_USER_ADDRESS) {\n                    User storage sponsor = userMapping[addressWalker];\n                    if (sponsor.currentInvestAmount > 0) {\n                        uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                        if (dynamicCommissionRatio > 0) {\n                            uint256 dynamicCA = sponsor.currentInvestAmount;\n                            if (dynamicCA > user.currentInvestAmount) {\n                                dynamicCA = user.currentInvestAmount;\n                            }\n                            dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                            dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                            if (sponsor.currentlevel == 1) {\n                                dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                            } else if (sponsor.currentlevel == 2) {\n                                dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                            } else {\n                                dynamicCA = dynamicCA.div(1000 * 100);\n                            }\n                            sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                        }\n                    }\n                    addressWalker = sponsor.sponsorAddress;\n                    depth = depth.add(1);\n                }\n            }\n        }\n    }\n}"
    },
    {
        "vulnerableLines": "982-985",
        "vulnerabilityReason": "Arithmetic subtraction operation without bounds checking.",
        "potentialSecurityRisk": "Can cause an integer underflow, leading to unexpected and potentially harmful behavior in subsequent operations.",
        "fixedCode": "function bug_intou31() public{\n    uint8 vundflw = 0;\n    require(vundflw >= 10, 'Underflow risk');\n    vundflw = vundflw - 10;\n}"
    },
    {
        "vulnerableLines": "987-995",
        "vulnerabilityReason": "Arithmetic addition operation without safe math libraries or bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for uint256, leading to erroneous balance values.",
        "fixedCode": "function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n    for (uint256 i = index; i < (index + length); ++i) {\n        address userAddress = addressMapping[i];\n        User storage user = userMapping[userAddress];\n        if (user.calcDynamicCommissionAmount > 0) {\n            user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n            addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n        }\n    }\n}"
    },
    {
        "vulnerableLines": "997-1006",
        "vulnerabilityReason": "Arithmetic addition operation without bounds checking, causing potential overflow.",
        "potentialSecurityRisk": "Can exceed the maximum value for lockTime, leading to denial of service or unlocking assets later than intended.",
        "fixedCode": "function increaseLockTime_intou13(uint _secondsToIncrease) public {\n    require(lockTime_intou13[msg.sender] <= type(uint).max - _secondsToIncrease, 'Overflow risk');\n    lockTime_intou13[msg.sender] += _secondsToIncrease;\n}\nfunction withdraw_intou13() public {\n    require(now > lockTime_intou13[msg.sender]);\n    uint transferValue_intou13 = 10;\n    msg.sender.transfer(transferValue_intou13);\n}"
    }
]