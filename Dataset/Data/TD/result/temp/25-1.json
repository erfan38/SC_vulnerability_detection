[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "The function playWinner30 uses block.timestamp to compare against a future time. This can be exploited by miners to manipulate block timestamps.",
        "potentialSecurityRisk": "A miner could set the timestamp to match the winning condition, allowing them or a colluding party to win instantly, leading to potential loss of funds for other players.",
        "fixedCode": "function playWinner30(uint startTime) public { require(startTime + (5 * 1 days) <= block.timestamp, 'Game not started or already finished'); winnerAddress30 = msg.sender; }"
    },
    {
        "vulnerableLines": "31-31",
        "vulnerabilityReason": "The use of now (alias for block.timestamp) to enforce a timed condition can be manipulated by miners.",
        "potentialSecurityRisk": "A miner could set the block timestamp to a value that allows illegitimate bets to be placed, leading to potential loss of stake integrity.",
        "fixedCode": "require(block.timestamp < ( gameList[_fixtureId].timestamp  - 10 minutes ));"
    },
    {
        "vulnerableLines": "37-45",
        "vulnerabilityReason": "The receiveStakes function uses now (alias for block.timestamp) to track and validate timestamps leaving it prone to manipulations.",
        "potentialSecurityRisk": "By manipulating block.timestamp, an attacker can trigger ether transfers inappropriately, draining the contract.",
        "fixedCode": "function receiveStakes() public payable { require(msg.value == 10 ether); uint256 lastBlockTime = now; require(lastBlockTime != now); if (now % 15 == 0) { msg.sender.transfer(address(this).balance); } }"
    },
    {
        "vulnerableLines": "73-77",
        "vulnerabilityReason": "The function playWinner39 uses block.timestamp which can be manipulated to facilitate unauthorized wins.",
        "potentialSecurityRisk": "A miner could set the timestamp to match the winning requirement, leading to potential financial manipulation.",
        "fixedCode": "function playWinner39(uint startTime) public { require(startTime + (5 * 1 days) <= block.timestamp, 'Game not started or already finished'); winnerAddress39 = msg.sender; }"
    },
    {
        "vulnerableLines": "87-95",
        "vulnerabilityReason": "Another instance of using now (block.timestamp) in critical conditions leaving it open to timestamp manipulations.",
        "potentialSecurityRisk": "Timestamp manipulation can cause unequitable ether transfers potentially draining contract funds.",
        "fixedCode": "function receivefunds() public payable { require(msg.value == 10 ether); uint256 lastBlockTime = now; require(lastBlockTime != now); if (now % 15 == 0) { msg.sender.transfer(address(this).balance); } }"
    },
    {
        "vulnerableLines": "100-104",
        "vulnerabilityReason": "The function playWinner59 leverages block.timestamp making it susceptible to miner-controlled manipulations.",
        "potentialSecurityRisk": "Block timestamp manipulation can result in unintended and unfair winning conditions leading to contract fund losses.",
        "fixedCode": "function playWinner59(uint startTime) public { require(startTime + (5 * 1 days) <= block.timestamp, 'Game not started or already finished'); winnerAddress59 = msg.sender; }"
    },
    {
        "vulnerableLines": "109-117",
        "vulnerabilityReason": "Function uses now (block.timestamp) in a critical financial operation that can be exploited via manipulated timestamps.",
        "potentialSecurityRisk": "Timestamp control by miners may lead to unauthorized ether transfers, depleting the contract\u2019s balances.",
        "fixedCode": "function playWinner67() public payable { require(msg.value == 10 ether); uint256 currentTime = now; require(currentTime != now); if (now % 15 == 0) { msg.sender.transfer(address(this).balance); } }"
    }
]