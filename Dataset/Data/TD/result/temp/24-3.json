[
    {
        "vulnerableLines": "5-7",
        "vulnerabilityReason": "The function getAvaliableStaticCommissionAmount uses now (alias of block.timestamp) to calculate commissionDays, which can be influenced by miners.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to influence the commission calculation, potentially resulting in incorrect commission payout.",
        "fixedCode": "function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) { if (user.currentInvestAmount == 0) { amount = 0; } else { uint256 currentTime = block.timestamp; uint256 commissionDays = currentTime.sub(user.currentInvestTime).div(ONE_DAY); if (commissionDays > user.currentInvestCycle) { commissionDays = user.currentInvestCycle; } amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays); amount = amount.div(1000); amount = amount.sub(user.currentStaticCommissionWithdrawAmount); } }"
    },
    {
        "vulnerableLines": "14-21",
        "vulnerabilityReason": "The function balances_32 uses now (alias of block.timestamp) in a conditional statement to determine whether to transfer funds.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to trigger fund transfers inappropriately, leading to potential financial drain on the contract.",
        "fixedCode": "function balances_32 () public payable { uint pastBlockTime_32; require(msg.value == 10 ether); require(now != pastBlockTime_32); pastBlockTime_32 = block.timestamp; if (block.timestamp % 15 == 0) { msg.sender.transfer(address(this).balance); } }"
    },
    {
        "vulnerableLines": "32-35",
        "vulnerabilityReason": "The function play_38 uses block.timestamp directly in a conditional statement that could be manipulated by miners.",
        "potentialSecurityRisk": "Miners can set the block timestamp to fulfill the winning condition, allowing them to claim the prize unfairly.",
        "fixedCode": "function play_38(uint startTime) public { require(startTime + (5 * 1 days) <= block.timestamp, 'Game not started or already finished'); winner_38 = msg.sender; }"
    },
    {
        "vulnerableLines": "45-52",
        "vulnerabilityReason": "The function balances_4 uses now (alias of block.timestamp) in a conditional statement to determine whether to transfer funds.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to trigger fund transfers inappropriately, leading to potential financial drain on the contract.",
        "fixedCode": "function balances_4() public payable { uint pastBlockTime_4; require(msg.value == 10 ether); require(now != pastBlockTime_4); pastBlockTime_4 = block.timestamp; if (block.timestamp % 15 == 0) { msg.sender.transfer(address(this).balance); } }"
    },
    {
        "vulnerableLines": "64-67",
        "vulnerabilityReason": "The function play_7 uses block.timestamp directly in a conditional statement that could be manipulated by miners.",
        "potentialSecurityRisk": "Miners can set the block timestamp to fulfill the winning condition, allowing them to claim the prize unfairly.",
        "fixedCode": "function play_7(uint startTime) public { require(startTime + (5 * 1 days) <= block.timestamp, 'Game not started or already finished'); winner_7 = msg.sender; }"
    },
    {
        "vulnerableLines": "90-92",
        "vulnerabilityReason": "The invest function uses now (alias of block.timestamp) for setting user's current investment time.",
        "potentialSecurityRisk": "Miners could manipulate the investment timestamp to influence subsequent operations based on this timestamp.",
        "fixedCode": "user.currentInvestTime = block.timestamp;"
    },
    {
        "vulnerableLines": "104-106",
        "vulnerabilityReason": "The invest function uses now (alias of block.timestamp) for initializing new users' current investment time.",
        "potentialSecurityRisk": "Miners could manipulate the investment timestamp to influence subsequent operations based on this timestamp.",
        "fixedCode": "userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount, block.timestamp, investAmount, investCycle, level, getStaticCommissionRatio(level, investCycle), 0, 0, 0, 0, sponsorAddress);"
    },
    {
        "vulnerableLines": "121-121",
        "vulnerabilityReason": "The addInvestRecord call within the invest function uses now (alias of block.timestamp).",
        "potentialSecurityRisk": "Miners can manipulate the timestamp passed to addInvestRecord, indirectly affecting the stored record's time data.",
        "fixedCode": "addInvestRecord(msg.sender, block.timestamp, investAmount, investCycle);"
    }
]