[
    {
        "vulnerableLines": "4-6",
        "vulnerabilityReason": "The function isTimestampValidEnd relies on block.timestamp for validation.",
        "potentialSecurityRisk": "Miners can influence the block timestamp to manipulate the return value, potentially causing incorrect state assumptions.",
        "fixedCode": "function isTimestampValidEnd() view public returns (bool) { return now >= 1546300800; }"
    },
    {
        "vulnerableLines": "10-10",
        "vulnerabilityReason": "The function burn relies on getCurrentState which may depend on block.timestamp indirectly.",
        "potentialSecurityRisk": "If getCurrentState uses block.timestamp, a miner could potentially alter the state timing and exploit the burn function.",
        "fixedCode": "function burn() public returns(bool){ ieoState = getCurrentState(); require(ieoState == State.afterEnd); balances[founder] = 0; }"
    },
    {
        "vulnerableLines": "16-16",
        "vulnerabilityReason": "The assignment of block.timestamp to validUntilTime5 exposes the timestamp in a manner that can be incorrect.",
        "potentialSecurityRisk": "Timestamp dependence might cause users to get misled about contract state, due to manipulated block timestamps.",
        "fixedCode": "uint256 validUntilTime5 = now;"
    },
    {
        "vulnerableLines": "19-21",
        "vulnerabilityReason": "The function transfer uses block.timestamp as a condition to allow transfers.",
        "potentialSecurityRisk": "Miners manipulating block timestamps could allow premature or delayed transfers, causing financial discrepancies.",
        "fixedCode": "function transfer(address to, uint value) public returns(bool){ require(now > coinTradeStart); super.transfer(to, value); }"
    },
    {
        "vulnerableLines": "23-23",
        "vulnerabilityReason": "The assignment of block.timestamp to validUntilTime1 exposes the timestamp unnecessarily.",
        "potentialSecurityRisk": "This practice may misrepresent the contract state to users, potentially resulting in incorrect assumptions and exploitations.",
        "fixedCode": "uint256 validUntilTime1 = now;"
    },
    {
        "vulnerableLines": "25-27",
        "vulnerabilityReason": "The function transferFrom uses block.timestamp as a precondition.",
        "potentialSecurityRisk": "Manipulation of block timestamps could lead to unauthorized transfers or hinder legitimate transfers.",
        "fixedCode": "function transferFrom(address _from, address _to, uint _value) public returns(bool){ require(now > coinTradeStart); super.transferFrom(_from, _to, _value); }"
    },
    {
        "vulnerableLines": "29-29",
        "vulnerabilityReason": "Assigning block.timestamp to validUntilTime2 introduces unnecessary exposure to timestamp manipulation.",
        "potentialSecurityRisk": "This could mislead users about the validity period due to manipulated timestamps, altering contract behavior in unintended ways.",
        "fixedCode": "uint256 validUntilTime2 = now;"
    }
]