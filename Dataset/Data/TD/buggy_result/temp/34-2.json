[
    {
        "vulnerableLines": "5-6",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to determine the elapsed time since the last transaction.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to affect the logic that depends on the time elapsed, potentially influencing the bonus calculation and minting of tokens.",
        "fixedCode": "uint256 senderTimeElasped = block.timestamp - (_balances[sender].time);\nuint256 recipientTimeElasped = block.timestamp - (_balances[recipient].time);"
    },
    {
        "vulnerableLines": "22-23",
        "vulnerabilityReason": "Updates the sender and recipient timestamps with now (alias for block.timestamp).",
        "potentialSecurityRisk": "A miner can manipulate this timestamp which could affect future transactions and bonuses related to token age.",
        "fixedCode": "_balances[sender].time = block.timestamp;\n_balances[recipient].time = block.timestamp;"
    },
    {
        "vulnerableLines": "29-32",
        "vulnerabilityReason": "Uses block.timestamp to determine the winner of a game.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n\twinner_tmstmp26 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "41-48",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp20 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp20 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "58-66",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp32 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp32, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp32 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "83-86",
        "vulnerabilityReason": "Uses block.timestamp to determine the winner of a game.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n\twinner_tmstmp38 = msg.sender;\n}"
    }
]