[
    {
        "vulnerableLines": "7-10",
        "vulnerabilityReason": "Uses block.timestamp directly in a function return value.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting the logic dependent on this value.",
        "fixedCode": "function bug_tmstmp9() view public returns (bool) {\n    // Ensure this value is used in non-critical logic only\n    return true;\n}"
    },
    {
        "vulnerableLines": "12-14",
        "vulnerabilityReason": "Uses block.timestamp directly in a function return value.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting the logic dependent on this value.",
        "fixedCode": "function bug_tmstmp25() view public returns (bool) {\n    // Ensure this value is used in non-critical logic only\n    return true;\n}"
    },
    {
        "vulnerableLines": "17-17",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp2; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "23-27",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp23(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp23 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "33-33",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp1; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "38-41",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp14(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp14 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "79-82",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp30 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "84-91",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp8 () public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n    require(block.timestamp != pastBlockTime_tmstmp8, \"Only 1 transaction per block\"); // only 1 transaction per block\n    pastBlockTime_tmstmp8 = block.timestamp;\n    if(block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "94-98",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp39 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "102-106",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp19(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp19 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "108-111",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp26 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "113-121",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp20 () public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n    require(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\"); // only 1 transaction per block\n    pastBlockTime_tmstmp20 = block.timestamp;\n    if(block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    }
]