[
    {
        "vulnerableLines": "3-3",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in the emit statement.",
        "potentialSecurityRisk": "Timestamp manipulation by miners can affect the logging of transaction events.",
        "fixedCode": "function deposit() public payable {\n\ttokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n\temit Deposit(block.timestamp, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n}"
    },
    {
        "vulnerableLines": "5-8",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp14(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp14 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "15-15",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in the emit statement.",
        "potentialSecurityRisk": "Timestamp manipulation by miners can affect the logging of transaction events.",
        "fixedCode": "function withdraw(uint amount) public {\n\trequire(!safeGuard,\"System Paused by Admin\");\n\trequire(tokens[address(0)][msg.sender] >= amount);\n\ttokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n\tmsg.sender.transfer(amount);\n\temit Withdraw(block.timestamp, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n}"
    },
    {
        "vulnerableLines": "18-20",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp30 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "27-27",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in the emit statement.",
        "potentialSecurityRisk": "Timestamp manipulation by miners can affect the logging of transaction events.",
        "fixedCode": "function depositToken(address token, uint amount) public {\n\t//remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n\trequire(token!=address(0));\n\trequire(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n\ttokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n\temit Deposit(block.timestamp, token, msg.sender, amount, tokens[token][msg.sender]);\n}"
    },
    {
        "vulnerableLines": "29-36",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp8 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp8, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp8 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "49-51",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp39 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "56-63",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp36 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "69-69",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in the emit statement.",
        "potentialSecurityRisk": "Timestamp manipulation by miners can affect the logging of transaction events.",
        "fixedCode": "function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n\tbytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n\torders[msg.sender][hash] = true;\n\temit Order(block.timestamp, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n}"
    },
    {
        "vulnerableLines": "73-75",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp35 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "88-88",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in the emit statement.",
        "potentialSecurityRisk": "Timestamp manipulation by miners can affect the logging of transaction events.",
        "fixedCode": "function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n\trequire(!safeGuard,\"System Paused by Admin\");\n\t//amount is in amountGet terms\n\tbytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n\trequire((\n\t\t(orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == user) &&\n\t\tblock.number <= expires &&\n\t\torderFills[user][hash].add(amount) <= amountGet\n\t));\n\ttradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n\torderFills[user][hash] = orderFills[user][hash].add(amount);\n\temit Trade(block.timestamp, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n}"
    },
    {
        "vulnerableLines": "102-107",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp40 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    }
]