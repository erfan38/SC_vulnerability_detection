[
    {
        "vulnerableLines": "10-14",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp31(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp31 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "25-25",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) directly in the variable assignment.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp to unfairly register hash at a specific timestamp.",
        "fixedCode": "function registerHash(bytes32 hash) external payable {\n\t\trequire(contractactive == true);\n\t\trequire(getHashOwnersCount(hash) == 0);\n\t\trequire(msg.value == hashfee);\n\t\t\n\t\tHashRegistration memory thisregistration;\n\t\tthisregistration.owner = msg.sender;\n\t\tthisregistration.registrationtime = block.timestamp;\n\t\t\n\t\tHashList[hash].push(thisregistration);\n\t\t\n\t\tHashListLength++;\n\t\t\n\t\temit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);\n\t}"
    },
    {
        "vulnerableLines": "34-36",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp13() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "49-49",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) directly in the variable assignment.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp to unfairly change hash ownership at a specific timestamp.",
        "fixedCode": "function changeHashOwnership(bytes32 hash, address newowner) external payable {\n\t\trequire(contractactive == true);\n\t\tuint owncount = getHashOwnersCount(hash);\n\t\trequire(owncount > 0);\n\t\trequire(msg.sender == HashList[hash][owncount - 1].owner);\n\t\trequire(msg.value == changehashownerfee);\n\t\t\n\t\tHashRegistration memory thisregistration;\n\t\tthisregistration.owner = newowner;\n\t\tthisregistration.registrationtime = block.timestamp;\n\t\t\n\t\tHashList[hash].push(thisregistration);\n\t\t\n\t\temit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);\n\t}"
    },
    {
        "vulnerableLines": "55-55",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp5 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "61-61",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp1 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    }
]