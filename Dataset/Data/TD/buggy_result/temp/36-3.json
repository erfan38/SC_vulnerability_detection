[
    {
        "vulnerableLines": "1-24",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to set the minimum execution date of a proposal.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp to adjust or influence when a proposal can be minimally executed.",
        "fixedCode": "function newProposal(\n        address destination,\n        uint weiAmount,\n        string memory transactionDescription,\n        bytes memory transactionBytecode\n    )\n        onlyTokenholders public\n        returns (uint proposalID)\n    {\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = destination;\n        p.signedByChairman = false;\n        p.amount = weiAmount;\n        p.description = transactionDescription;\n        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n        p.minExecutionDate = block.timestamp + debatingPeriodInMinutes * 1 minutes;\n        p.executed = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n        numProposals = proposalID+1;\n\n        return proposalID;\n    }\n"
    },
    {
        "vulnerableLines": "26-30",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner in the play_tmstmp39 function.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n        require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n        winner_tmstmp39 = msg.sender;\n    }\n"
    },
    {
        "vulnerableLines": "53-61",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n        require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n        require(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\"); // only 1 transaction per block\n        pastBlockTime_tmstmp36 = block.timestamp;\n        if(block.timestamp % 15 == 0) { // winner\n            msg.sender.transfer(address(this).balance);\n        }\n    }\n"
    },
    {
        "vulnerableLines": "88-92",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner in the play_tmstmp35 function.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n        require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n        winner_tmstmp35 = msg.sender;\n    }\n"
    }
]