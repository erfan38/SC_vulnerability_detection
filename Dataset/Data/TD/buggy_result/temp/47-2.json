[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp1() view public returns (bool) {\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "6-9",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp2(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp2 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "12-14",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp17() view public returns (bool) {\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "15-17",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to set sale start and end times.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp, potentially impacting sale logic and starting/ending the sale improperly.",
        "fixedCode": "uint public saleStart;\nuint public saleEnd;\nuint public coinTradeStart;\n\nconstructor() public {\n\tsaleStart = block.timestamp;\n\tsaleEnd = saleStart + 14515200; // 24 weeks\n\tcoinTradeStart = saleEnd + 1512000; // transferable 1 week after sale end\n}"
    },
    {
        "vulnerableLines": "23-27",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp3(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp3 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "41-41",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp3 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "43-43",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp4 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "53-60",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36() public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\");\n\trequire(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\");\n\tpastBlockTime_tmstmp36 = block.timestamp;\n\tif(block.timestamp % 15 == 0) {\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "67-71",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp35 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "77-84",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp40() public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\");\n\trequire(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\");\n\tpastBlockTime_tmstmp40 = block.timestamp;\n\tif(block.timestamp % 15 == 0) {\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "93-95",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "102-108",
        "vulnerabilityReason": "Uses block.timestamp to determine the state's conditions, making it susceptible to miner manipulation.",
        "potentialSecurityRisk": "Miners can game the system to transition the state to their advantage, potentially causing early start or end to activities.",
        "fixedCode": "function getCurrentState() public view returns(State) {\n\tif(ieoState == State.halted) {\n\t\treturn State.halted;\n\t} else if(block.timestamp < saleStart) {\n\t\treturn State.beforeStart;\n\t} else if(block.timestamp >= saleStart && block.timestamp <= saleEnd) {\n\t\treturn State.running;\n\t} else {\n\t\treturn State.afterEnd;\n\t}\n}"
    },
    {
        "vulnerableLines": "110-114",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp27 = msg.sender;\n}"
    }
]