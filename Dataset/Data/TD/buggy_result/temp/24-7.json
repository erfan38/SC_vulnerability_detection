[
    {
        "vulnerableLines": "21-25",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp27 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "47-51",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp31(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp31 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "59-63",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in if statements.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to influence the commission calculation.",
        "fixedCode": "function calcDynamicCommission() external onlyOwner {\n    for (uint256 i = 0; i < totalUserCount; ++i) {\n        User storage user = userMapping[addressMapping[i]];\n        user.calcDynamicCommissionAmount = 0;\n    }\n\n    for (uint256 i = 0; i < totalUserCount; ++i) {\n        User memory user = userMapping[addressMapping[i]];\n        if (user.currentInvestAmount > 0) {\n            uint256 commissionDays = block.timestamp.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                uint256 depth = 1;\n                address addressWalker = user.sponsorAddress;\n                while (addressWalker != GENESIS_USER_ADDRESS) {\n                    User storage sponsor = userMapping[addressWalker];\n                    if (sponsor.currentInvestAmount > 0) {\n                        uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                        if (dynamicCommissionRatio > 0) {\n                            uint256 dynamicCA = sponsor.currentInvestAmount;\n                            if (dynamicCA > user.currentInvestAmount) {\n                                dynamicCA = user.currentInvestAmount;\n                            }\n                            dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                            dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                            if (sponsor.currentlevel == 1) {\n                                dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                            } else if (sponsor.currentlevel == 2) {\n                                dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                            } else {\n                                dynamicCA = dynamicCA.div(1000 * 100);\n                            }\n                            sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                        }\n                    }\n                    addressWalker = sponsor.sponsorAddress;\n                    depth = depth.add(1);\n                }\n            }\n        }\n    }\n\n    for (uint256 i = 0; i < totalUserCount; ++i) {\n        address userAddress = addressMapping[i];\n        User storage user = userMapping[userAddress];\n        if (user.calcDynamicCommissionAmount > 0) {\n            user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n            addDynamicCommissionRecord(userAddress, block.timestamp, user.calcDynamicCommissionAmount);\n        }\n    }\n}"
    },
    {
        "vulnerableLines": "103-105",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp13() view public returns (bool) {\n    // Some operations\n    return block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "113-113",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp5 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    }
]