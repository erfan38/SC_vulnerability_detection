[
    {
        "vulnerableLines": "1-8",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Allows a miner to manipulate the block timestamp, enabling them to unfairly win or affect game logic.",
        "fixedCode": "function bug_tmstmp28 () public payable {\n\trequire(msg.value == 10 ether); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp28); // only 1 transaction per block\n\tpastBlockTime_tmstmp28 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "12-14",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the condition and win the game.",
        "fixedCode": "function play_tmstmp34(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp34 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "16-17",
        "vulnerabilityReason": "Uses block.timestamp for a direct comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp21() view public returns (bool) {\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "21-23",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the condition and win the game.",
        "fixedCode": "function play_tmstmp10(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp10 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "26-26",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting any logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp4 = block.timestamp; // used fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "54-58",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the condition and win the game.",
        "fixedCode": "function play_tmstmp19(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp19 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "84-87",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the condition and win the game.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp26 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "109-115",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Allows a miner to manipulate the block timestamp, enabling them to unfairly win or affect game logic.",
        "fixedCode": "function bug_tmstmp20 () public payable {\n\trequire(msg.value == 10 ether); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp20); // only 1 transaction per block\n\tpastBlockTime_tmstmp20 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    }
]