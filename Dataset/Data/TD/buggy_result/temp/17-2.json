[
    {
        "vulnerableLines": "1-9",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions and transfer operations, leading to timestamp dependence vulnerability.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp to unfairly participate in the game or influence block validation.",
        "fixedCode": "function bug_tmstmp4 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp4 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "22-23",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to set the frozenTime for a wallet.",
        "potentialSecurityRisk": "Timestamp manipulation by miners could affect the freezing mechanism, allowing earlier access to funds.",
        "fixedCode": "frozenTime: block.timestamp + 1 * 1 hours"
    },
    {
        "vulnerableLines": "30-38",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions and transfer operations, leading to timestamp dependence vulnerability.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp to unfairly participate in the game or influence block validation.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp40 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "47-49",
        "vulnerabilityReason": "Uses block.timestamp directly in a conditional check, making it susceptible to miner manipulation.",
        "potentialSecurityRisk": "Miners can adjust the timestamp to meet specific conditions in the contract, leading to unintended behavior.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "51-57",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in condition checks for determining whether a wallet is frozen.",
        "potentialSecurityRisk": "Miners could influence the timestamp, potentially unfreezing funds earlier than intended.",
        "fixedCode": "function checkFrozenWallet(address _from, uint _value) public view returns (bool) {\n\t\treturn (\n\t\t\t_from==owner || \n\t\t\t(!tokenFrozen && \n\t\t\t(!frozenWallets[_from].isFrozen || \n\t\t\t block.timestamp >= frozenWallets[_from].frozenTime || \n\t\t\t balanceOf[_from].sub(_value) >= frozenWallets[_from].frozenAmount))\n\t\t);\n\t}"
    },
    {
        "vulnerableLines": "60-64",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp27 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "73-77",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp31(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp31 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "86-88",
        "vulnerabilityReason": "Uses block.timestamp directly in a conditional check, making it susceptible to miner manipulation.",
        "potentialSecurityRisk": "Miners can adjust the timestamp to meet specific conditions in the contract, leading to unintended behavior.",
        "fixedCode": "function bug_tmstmp13() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "93-93",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment, potentially leading to time-related issues.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp5 = block.timestamp; // Use for non-critical logic only"
    }
]