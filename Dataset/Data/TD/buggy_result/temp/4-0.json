[
    {
        "vulnerableLines": "29-37",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp4 () public payable {\n\t    uint pastBlockTime_tmstmp4; // Forces one bet per block\n\t    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t    require(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t    pastBlockTime_tmstmp4 = block.timestamp;\n\t    if(block.timestamp % 15 == 0) { // winner\n\t        msg.sender.transfer(address(this).balance);\n\t    }\n\t}"
    },
    {
        "vulnerableLines": "40-43",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp7(uint startTime) public {\n\t    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t    winner_tmstmp7 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "46-49",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp23(uint startTime) public {\n\t    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t    winner_tmstmp23 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "53-55",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp14(uint startTime) public {\n\t    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t    winner_tmstmp14 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "58-60",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n\t    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t    winner_tmstmp30 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "62-70",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp8 () public payable {\n\t    uint pastBlockTime_tmstmp8; // Forces one bet per block\n\t    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t    require(block.timestamp != pastBlockTime_tmstmp8, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t    pastBlockTime_tmstmp8 = block.timestamp;\n\t    if(block.timestamp % 15 == 0) { // winner\n\t        msg.sender.transfer(address(this).balance);\n\t    }\n\t}"
    },
    {
        "vulnerableLines": "74-77",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n\t    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t    winner_tmstmp39 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "79-87",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n\t    uint pastBlockTime_tmstmp36; // Forces one bet per block\n\t    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t    require(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t    pastBlockTime_tmstmp36 = block.timestamp;\n\t    if(block.timestamp % 15 == 0) { // winner\n\t        msg.sender.transfer(address(this).balance);\n\t    }\n\t}"
    },
    {
        "vulnerableLines": "91-94",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n\t    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t    winner_tmstmp35 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "96-104",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n\t    uint pastBlockTime_tmstmp40; // Forces one bet per block\n\t    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t    require(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t    pastBlockTime_tmstmp40 = block.timestamp;\n\t    if(block.timestamp % 15 == 0) { // winner\n\t        msg.sender.transfer(address(this).balance);\n\t    }\n\t}"
    },
    {
        "vulnerableLines": "106-108",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n\t    return block.timestamp >= 1546300800;\n\t}"
    }
]