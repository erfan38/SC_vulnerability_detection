[
    {
        "vulnerableLines": "10-12",
        "vulnerabilityReason": "Uses block.timestamp for timestamp comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to alter the logic flow.",
        "fixedCode": "function bug_tmstmp9() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "15-17",
        "vulnerabilityReason": "Uses block.timestamp for timestamp comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to alter the logic flow.",
        "fixedCode": "function bug_tmstmp25() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "20-24",
        "vulnerabilityReason": "Uses block.timestamp for timestamp comparison and determining the winner. This can be manipulated by miners.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to win the game dishonestly.",
        "fixedCode": "function play_tmstmp19(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp19 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "27-30",
        "vulnerabilityReason": "Uses block.timestamp for timestamp comparison and determining the winner. This can be manipulated by miners.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to win the game dishonestly.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp26 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "39-46",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements which can be manipulated by miners.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp for personal gain, such as winning the game multiple times.",
        "fixedCode": "function bug_tmstmp20 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp20 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "50-57",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements which can be manipulated by miners.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp for personal gain, such as winning the game multiple times.",
        "fixedCode": "function bug_tmstmp32 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp32, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp32 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "61-61",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp3 = block.timestamp; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "64-64",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp4 = block.timestamp; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "81-84",
        "vulnerabilityReason": "Uses block.timestamp for timestamp comparison and determining the winner. This can be manipulated by miners.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to win the game dishonestly.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp38 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "94-57",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements which can be manipulated by miners.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp for personal gain, such as winning the game multiple times.",
        "fixedCode": "function bug_tmstmp4 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp4 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "114-118",
        "vulnerabilityReason": "Uses block.timestamp for timestamp comparison and determining the winner. This can be manipulated by miners.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to win the game dishonestly.",
        "fixedCode": "function play_tmstmp7(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp7 = msg.sender;\n\t}"
    }
]