[
    {
        "vulnerableLines": "63-66",
        "vulnerabilityReason": "Uses block.timestamp to determine the winner based on a specific condition.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to incorrectly meet the condition and unfairly win.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n\twinner_tmstmp26 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "68-75",
        "vulnerabilityReason": "Using now (alias for block.timestamp) to control execution flow and critical operations.",
        "potentialSecurityRisk": "Miners may manipulate the block timestamp, potentially facilitating unfair wins or undesired state changes.",
        "fixedCode": "function bug_tmstmp20 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp20 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "78-85",
        "vulnerabilityReason": "Using now (alias for block.timestamp) to control execution flow and critical operations.",
        "potentialSecurityRisk": "Miners may manipulate the block timestamp, potentially facilitating unfair wins or undesired state changes.",
        "fixedCode": "function bug_tmstmp32 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp32, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp32 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "89-91",
        "vulnerabilityReason": "Uses block.timestamp to determine the winner based on a specific condition.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to incorrectly meet the condition and unfairly win.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n\twinner_tmstmp38 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "93-100",
        "vulnerabilityReason": "Using now (alias for block.timestamp) to control execution flow and critical operations.",
        "potentialSecurityRisk": "Miners may manipulate the block timestamp, potentially facilitating unfair wins or undesired state changes.",
        "fixedCode": "function bug_tmstmp4 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp4 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "103-107",
        "vulnerabilityReason": "Uses block.timestamp to determine the winner based on a specific condition.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to incorrectly meet the condition and unfairly win.",
        "fixedCode": "function play_tmstmp7(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n\twinner_tmstmp7 = msg.sender;\n}"
    }
]