[
    {
        "vulnerableLines": "17-17",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to set the minExecutionDate, which can be manipulated by miners.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence the execution date of proposals, potentially causing premature or delayed execution.",
        "fixedCode": "function newProposal(\n\taddress destination,\n\tuint weiAmount,\n\tstring memory transactionDescription,\n\tbytes memory transactionBytecode\n)\n\tonlyTokenholders public\n\treturns (uint proposalID)\n{\n\tproposalID = proposals.length++;\n\tProposal storage p = proposals[proposalID];\n\tp.recipient = destination;\n\tp.signedByChairman = false;\n\tp.amount = weiAmount;\n\tp.description = transactionDescription;\n\tp.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n\tp.minExecutionDate = block.timestamp + debatingPeriodInMinutes * 1 minutes;\n\tp.executed = false;\n\tp.proposalPassed = false;\n\tp.numberOfVotes = 0;\n\temit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n\tnumProposals = proposalID+1;\n\n\treturn proposalID;\n}"
    },
    {
        "vulnerableLines": "26-30",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Invalid time to play\");\n\twinner_tmstmp39 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "53-60",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\");\n\trequire(block.timestamp != pastBlockTime_tmstmp36, \"Only one transaction per block\");\n\tpastBlockTime_tmstmp36 = block.timestamp;\n\tif(block.timestamp % 15 == 0) {\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "88-92",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Invalid time to play\");\n\twinner_tmstmp35 = msg.sender;\n}"
    }
]