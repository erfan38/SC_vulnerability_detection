[
    {
        "vulnerableLines": "32-40",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp, allowing them to execute unauthorized transactions or win the game unfairly.",
        "fixedCode": "function bug_tmstmp20 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp20 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "46-53",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to calculate commission days.",
        "potentialSecurityRisk": "This allows a miner to manipulate the block timestamp and potentially distort the calculation of commission days, leading to inaccurate payouts.",
        "fixedCode": "function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n\t\tif (user.currentInvestAmount == 0) {\n\t\t\tamount = 0;\n\t\t} else {\n\t\t\tuint256 commissionDays = block.timestamp.sub(user.currentInvestTime).div(ONE_DAY);\n\t\t\tif (commissionDays > user.currentInvestCycle) {\n\t\t\t\tcommissionDays = user.currentInvestCycle;\n\t\t\t}\n\t\t\tamount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n\t\t\tamount = amount.div(1000);\n\t\t\tamount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "55-63",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp, allowing them to execute unauthorized transactions or win the game unfairly.",
        "fixedCode": "function bug_tmstmp32 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp32, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp32 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "65-71",
        "vulnerabilityReason": "Uses 'time' parameter directly without validating its source.",
        "potentialSecurityRisk": "This allows potential manipulation of the 'time' parameter which could skew investment records.",
        "fixedCode": "function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n\t\trequire(time <= block.timestamp, \"Invalid time\");\n\t\tInvestRecord[9] storage records = investRecordMapping[userAddress];\n\t\tfor (uint256 i = 8; i > 0; --i) {\n\t\t\tInvestRecord memory prevRecord = records[i - 1];\n\t\t\trecords[i] = prevRecord;\n\t\t}\n\t\trecords[0] = InvestRecord(time, amount, cycle);\n\t}"
    },
    {
        "vulnerableLines": "73-76",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time directly in if condition.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp38 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "86-94",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp, allowing them to execute unauthorized transactions or win the game unfairly.",
        "fixedCode": "function bug_tmstmp4 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp4 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "104-108",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp7(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp7 = msg.sender;\n\t}"
    }
]