[
    {
        "vulnerableLines": "8-15",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in conditions within require statements and conditions.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp, affecting game logic and potentially allowing miners to gain an unfair advantage.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\");\n\trequire(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\");\n\tpastBlockTime_tmstmp36 = block.timestamp;\n\tif(block.timestamp % 15 == 0) {\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "23-27",
        "vulnerabilityReason": "Uses block.timestamp without proper condition to prevent miner manipulation.",
        "potentialSecurityRisk": "Miners can set the block timestamp to match specific conditions to unfairly influence the outcome.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp35 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "34-41",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in conditions within require statements and conditions.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp, affecting game logic and potentially allowing miners to gain an unfair advantage.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\");\n\trequire(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\");\n\tpastBlockTime_tmstmp40 = block.timestamp;\n\tif(block.timestamp % 15 == 0) {\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "48-50",
        "vulnerabilityReason": "Uses block.timestamp in a view function without accounting for miner manipulation.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence view results.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "56-60",
        "vulnerabilityReason": "Uses block.timestamp without proper condition to prevent miner manipulation.",
        "potentialSecurityRisk": "Miners can set the block timestamp to match specific conditions to unfairly influence the outcome.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp27 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "66-70",
        "vulnerabilityReason": "Uses block.timestamp without proper condition to prevent miner manipulation.",
        "potentialSecurityRisk": "Miners can set the block timestamp to match specific conditions to unfairly influence the outcome.",
        "fixedCode": "function play_tmstmp31(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp31 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "76-78",
        "vulnerabilityReason": "Uses block.timestamp in a view function without accounting for miner manipulation.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence view results.",
        "fixedCode": "function bug_tmstmp13() view public returns (bool) {\n\treturn block.timestamp >= 1546300800;\n}"
    }
]