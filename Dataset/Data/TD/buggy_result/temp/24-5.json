[
    {
        "vulnerableLines": "22-27",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) and assigns it to user.currentInvestTime, influencing the investment mechanism.",
        "potentialSecurityRisk": "Miners could manipulate the block timestamp to influence the investment timings, potentially invalidating fair play.",
        "fixedCode": "function invest(address sponsorAddress, uint256 investCycle) external payable {\n\t\tUser storage sponsor = userMapping[sponsorAddress];\n\t\trequire(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n\t\trequire(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n\t\tuint256 investAmount = msg.value.div(ONE_ETH);\n\t\tinvestAmount = investAmount.mul(ONE_ETH);\n\t\trequire(investAmount == msg.value, \"Invest amount is not integer\");\n\t\trequire(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n\n\t\tUser memory user = userMapping[msg.sender];\n\t\tuint256 level = getLevelByInvestAmount(investAmount);\n\t\tif (user.totalInvestCount > 0) {\n\t\t\trequire(user.sponsorAddress == sponsorAddress, \"Sponsor address is inconsistent\");\n\t\t\trequire(user.currentInvestAmount == 0, \"Duplicate invest\");\n\t\t\trequire(user.currentInvestTime == 0, \"Invalid state\");\n\t\t\trequire(user.currentInvestCycle == 0, \"Invalid state\");\n\t\t\trequire(user.currentlevel == 0, \"Invalid state\");\n\t\t\trequire(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n\t\t\trequire(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n\t\t\tuser.totalInvestCount = user.totalInvestCount.add(1);\n\t\t\tuser.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n\t\t\tuser.currentInvestTime = block.timestamp;\n\t\t\tuser.currentInvestAmount = investAmount;\n\t\t\tuser.currentInvestCycle = investCycle;\n\t\t\tuser.currentlevel = level;\n\t\t\tuser.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n\t\t\tuserMapping[msg.sender] = user;\n\t\t\taddress addressWalker = sponsorAddress;\n\t\t\twhile (addressWalker != GENESIS_USER_ADDRESS) {\n\t\t\t\tsponsor = userMapping[addressWalker];\n\t\t\t\tsponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n\t\t\t\taddressWalker = sponsor.sponsorAddress;\n\t\t\t}\n\t\t} else {\n\t\t\tuserMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount, block.timestamp, investAmount, investCycle, level, getStaticCommissionRatio(level, investCycle), 0, 0, 0, 0, sponsorAddress);\n\t\t\taddressMapping[totalUserCount] = msg.sender;\n\t\t\ttotalUserCount = totalUserCount.add(1);\n\t\t\taddress addressWalker = sponsorAddress;\n\t\t\twhile (addressWalker != GENESIS_USER_ADDRESS) {\n\t\t\t\tsponsor = userMapping[addressWalker];\n\t\t\t\tsponsor.downlineCount = sponsor.downlineCount.add(1);\n\t\t\t\tif (addressWalker == sponsorAddress) {\n\t\t\t\t\tsponsor.nodeCount = sponsor.nodeCount.add(1);\n\t\t\t\t}\n\t\t\t\tsponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n\t\t\t\taddressWalker = sponsor.sponsorAddress;\n\t\t\t}\n\t\t}\n\n\t\taddInvestRecord(msg.sender, block.timestamp, investAmount, investCycle);\n\t\ttotalInvestCount = totalInvestCount.add(1);\n\t\ttotalInvestAmount = totalInvestAmount.add(investAmount);\n\t\tengineerFunds = engineerFunds.add(investAmount.div(50));\n\t\toperatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n\t}"
    },
    {
        "vulnerableLines": "53-53",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to log the investment time, potentially influenced by miners.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp, influencing the recorded investment time.",
        "fixedCode": "addInvestRecord(msg.sender, block.timestamp, investAmount, investCycle);"
    },
    {
        "vulnerableLines": "59-63",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp23(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp23 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "84-87",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp14(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp14 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "112-115",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp30 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "107-107",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to log a static commission record time.",
        "potentialSecurityRisk": "Miners could manipulate the block timestamp, influencing the recorded static commission time.",
        "fixedCode": "addStaticCommissionRecord(msg.sender, block.timestamp, avaliableSCB);"
    }
]