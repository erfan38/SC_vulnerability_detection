[
    {
        "vulnerableLines": "1-4",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp27 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "11-11",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp4 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "34-38",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp31(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp31 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "43-45",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp13() view public returns (bool) {\n\t\t// Some operations\n\t    return block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "50-50",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp5 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "59-66",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to manipulate the token lock period.",
        "fixedCode": "if(msg.sender == team) {\n\t\trequire(block.timestamp >= 1589036400, \"800M lock to 2020-05-10\");\n\t\tif(balances[msg.sender] - value < toWei(600000000))\n\t\t\trequire(block.timestamp >= 1620572400, \"10M lock to 2021-05-10\");\n\t\tif(balances[msg.sender] - value < toWei(400000000))\n\t\t\trequire(block.timestamp >= 1652108400, \"10M lock to 2022-05-10\");\n\t\tif(balances[msg.sender] - value < toWei(200000000))\n\t\t\trequire(block.timestamp >= 1683644400, \"10M lock to 2023-05-10\");\n\t}"
    },
    {
        "vulnerableLines": "75-75",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp1 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "86-86",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp2 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "95-95",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp3 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    }
]