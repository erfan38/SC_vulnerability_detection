[
    {
        "vulnerableLines": "1-8",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in multiple places, including conditions for require statements and determining if the player wins.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp and potentially win unfairly.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp40 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "23-25",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to verify the execution time frame of the proposal.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to force or prevent the execution of proposals.",
        "fixedCode": "require(block.timestamp > p.minExecutionDate, \"Proposal cannot be executed yet\"); // If it is past the voting deadline\n\t\trequire(!p.executed, \"Proposal already executed\"); // and it has not already been executed\n\t\trequire(p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)), \"Proposal hash does not match\"); // and the supplied code matches the proposal..."
    },
    {
        "vulnerableLines": "64-66",
        "vulnerabilityReason": "Uses block.timestamp directly for a conditional check.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to cause unintended behavior.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    }
]