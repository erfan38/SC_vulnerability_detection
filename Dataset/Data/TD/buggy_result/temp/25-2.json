[
    {
        "vulnerableLines": "4-12",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n\t    uint pastBlockTime_tmstmp36; // Forces one bet per block\n\t    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t    require(block.timestamp != pastBlockTime_tmstmp36, \"Only one transaction per block\"); // only 1 transaction per block\n\t    pastBlockTime_tmstmp36 = block.timestamp;\n\t    if (block.timestamp % 15 == 0) { // winner\n\t        msg.sender.transfer(address(this).balance);\n\t    }\n\t}"
    },
    {
        "vulnerableLines": "19-22",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n\t    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t    winner_tmstmp35 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "28-36",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n\t    uint pastBlockTime_tmstmp40; // Forces one bet per block\n\t    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t    require(block.timestamp != pastBlockTime_tmstmp40, \"Only one transaction per block\"); // only 1 transaction per block\n\t    pastBlockTime_tmstmp40 = block.timestamp;\n\t    if (block.timestamp % 15 == 0) { // winner\n\t        msg.sender.transfer(address(this).balance);\n\t    }\n\t}"
    },
    {
        "vulnerableLines": "42-44",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n\t    // Some operations\n\t    return block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "52-56",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n\t    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t    winner_tmstmp27 = msg.sender;\n\t}"
    }
]