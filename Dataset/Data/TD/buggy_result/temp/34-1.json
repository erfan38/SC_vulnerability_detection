[
    {
        "vulnerableLines": "30-33",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp34(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp34 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "36-38",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp21() view public returns (bool) {\n\t\t// some logic\n\t    return block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "41-44",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp10(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp10 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "46-49",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp22(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp22 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "53-60",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp12 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastblockTime_tmstmp12, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastblockTime_tmstmp12 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "63-67",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp11(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp11 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "69-71",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp1() view public returns (bool) {\n\t\t// some logic\n\t    return block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "74-77",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp2(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp2 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "79-81",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp17() view public returns (bool) {\n\t\t // some logic\n\t   return block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "83-85",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp37() view public returns (bool) {\n\t\t// some logic\n\t   return block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "98-99",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to set a critical variable.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to their benefit, affecting bonus calculations and other time-dependent logic.",
        "fixedCode": "constructor() public {\n\t\t_maxTotalSupply = 1000000000 * 10 ** 18;\n\t\t_totalSupply =  2000000 * 10 ** 18;\n\n\t\t_balances[msg.sender].amount = _totalSupply;\n\t\t_balances[msg.sender].time = block.timestamp;\n\t}"
    },
    {
        "vulnerableLines": "102-104",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp25() view public returns (bool) {\n\t\t// some logic\n\t    return block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "115-119",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp19(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp19 = msg.sender;\n\t}"
    }
]