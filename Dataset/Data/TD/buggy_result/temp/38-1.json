[
    {
        "vulnerableLines": "1-3",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp25() view public returns (bool) {\n    // Some operations\n    return block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "6-10",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp19(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp19 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "12-15",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp26 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "17-24",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp20() public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\");\n    require(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\");\n    pastBlockTime_tmstmp20 = block.timestamp;\n    if(block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "27-34",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp32() public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\");\n    require(block.timestamp != pastBlockTime_tmstmp32, \"Only 1 transaction per block\");\n    pastBlockTime_tmstmp32 = block.timestamp;\n    if(block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "37-40",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp38 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "46-49",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp30 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "54-61",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp8() public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\");\n    require(block.timestamp != pastBlockTime_tmstmp8, \"Only 1 transaction per block\");\n    pastBlockTime_tmstmp8 = block.timestamp;\n    if(block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "67-71",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp39 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "76-83",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36() public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\");\n    require(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\");\n    pastBlockTime_tmstmp36 = block.timestamp;\n    if(block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "91-95",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp35 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "113-120",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp40() public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\");\n    require(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\");\n    pastBlockTime_tmstmp40 = block.timestamp;\n    if(block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    }
]