[
    {
        "vulnerableLines": "8-8",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp2 = getBlockTimestamp();\nfunction getBlockTimestamp() internal view returns (uint256) {\n    return block.timestamp;\n}"
    },
    {
        "vulnerableLines": "10-10",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp3 = getBlockTimestamp();\nfunction getBlockTimestamp() internal view returns (uint256) {\n    return block.timestamp;\n}"
    },
    {
        "vulnerableLines": "12-12",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp4 = getBlockTimestamp();\nfunction getBlockTimestamp() internal view returns (uint256) {\n    return block.timestamp;\n}"
    },
    {
        "vulnerableLines": "15-18",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp38 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "20-27",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp4() public payable {\n    uint pastBlockTime_tmstmp4; // Forces one bet per block\n    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n    require(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\"); // only 1 transaction per block\n    pastBlockTime_tmstmp4 = block.timestamp;\n    if (block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "31-34",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp7(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp7 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "37-40",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp23(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp23 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "43-45",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp14(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp14 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "48-50",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp30 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "52-59",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp8() public payable {\n    uint pastBlockTime_tmstmp8; // Forces one bet per block\n    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n    require(block.timestamp != pastBlockTime_tmstmp8, \"Only 1 transaction per block\"); // only 1 transaction per block\n    pastBlockTime_tmstmp8 = block.timestamp;\n    if (block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "65-68",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp39 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "91-98",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36() public payable {\n    uint pastBlockTime_tmstmp36; // Forces one bet per block\n    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n    require(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\"); // only 1 transaction per block\n    pastBlockTime_tmstmp36 = block.timestamp;\n    if (block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    }
]