[
    {
        "vulnerableLines": "5-6",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to calculate commission days and perform comparisons.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly influence commission calculations.",
        "fixedCode": "function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n\tfor (uint256 i = index; i < (index + length); ++i) {\n\t\tUser memory user = userMapping[addressMapping[i]];\n\t\tif (user.currentInvestAmount > 0) {\n\t\t\tuint256 commissionDays = (block.timestamp).sub(user.currentInvestTime).div(ONE_DAY);\n\t\t\tif (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n\t\t\t\tuint256 depth = 1;\n\t\t\t\taddress addressWalker = user.sponsorAddress;\n\t\t\t\twhile (addressWalker != GENESIS_USER_ADDRESS) {\n\t\t\t\t\tUser storage sponsor = userMapping[addressWalker];\n\t\t\t\t\tif (sponsor.currentInvestAmount > 0) {\n\t\t\t\t\t\tuint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n\t\t\t\t\t\tif (dynamicCommissionRatio > 0) {\n\t\t\t\t\t\t\tuint256 dynamicCA = sponsor.currentInvestAmount;\n\t\t\t\t\t\t\tif (dynamicCA > user.currentInvestAmount) {\n\t\t\t\t\t\t\t\tdynamicCA = user.currentInvestAmount;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n\t\t\t\t\t\t\tdynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n\t\t\t\t\t\t\tif (sponsor.currentlevel == 1) {\n\t\t\t\t\t\t\t\tdynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n\t\t\t\t\t\t\t} else if (sponsor.currentlevel == 2) {\n\t\t\t\t\t\t\t\tdynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdynamicCA = dynamicCA.div(1000 * 100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\taddressWalker = sponsor.sponsorAddress;\n\t\t\t\t\tdepth = depth.add(1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
        "vulnerableLines": "45-45",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to record the time for adding commissions.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly influence the commission record time.",
        "fixedCode": "function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n\tfor (uint256 i = index; i < (index + length); ++i) {\n\t\taddress userAddress = addressMapping[i];\n\t\tUser storage user = userMapping[userAddress];\n\t\tif (user.calcDynamicCommissionAmount > 0) {\n\t\t\tuser.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n\t\t\taddDynamicCommissionRecord(userAddress, block.timestamp, user.calcDynamicCommissionAmount);\n\t\t}\n\t}\n}"
    },
    {
        "vulnerableLines": "37-37",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp1 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "49-49",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp2 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    }
]