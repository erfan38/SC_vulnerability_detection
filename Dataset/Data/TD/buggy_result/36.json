[
    {
        "vulnerableLines": "9-11",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp21() view public returns (bool) {\n\t\t// Some operations\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "17-21",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp3(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp3 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "31-33",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp9() view public returns (bool) {\n\t\t// Some operations\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "38-42",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp27 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "45-48",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp31(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp31 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "56-58",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp25() view public returns (bool) {\n\t\t// Some operations\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "63-67",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp19(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp19 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "73-76",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp26 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "78-85",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp20 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp20 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "88-95",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp32 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp32, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp32 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "98-101",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp38 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "103-110",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp4 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp4 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "113-117",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp7(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp7 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "120-123",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp23(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp23 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "199-201",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function play_tmstmp10(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp10 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "203-206",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function play_tmstmp22(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp22 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "209-215",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp12 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp12, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp12 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "220-222",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp11(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp11 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "224-226",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp1() view public returns (bool) {\n\t\t// Some operations\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "229-231",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp2(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp2 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "233-235",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp17() view public returns (bool) {\n\t\t// Some operations\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "238-240",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp37() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "243-245",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp13() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "247-247",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp5 = block.timestamp; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "249-249",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp1 = block.timestamp; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "251-251",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp2 = block.timestamp; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "253-253",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp3 = block.timestamp; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "255-255",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp4 = block.timestamp; // Ensure this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "297-300",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp14(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp14 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "317-320",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp30 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "346-353",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp8 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp8, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp8 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "367-390",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to set the minimum execution date of a proposal.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp to adjust or influence when a proposal can be minimally executed.",
        "fixedCode": "function newProposal(\n        address destination,\n        uint weiAmount,\n        string memory transactionDescription,\n        bytes memory transactionBytecode\n    )\n        onlyTokenholders public\n        returns (uint proposalID)\n    {\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = destination;\n        p.signedByChairman = false;\n        p.amount = weiAmount;\n        p.description = transactionDescription;\n        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n        p.minExecutionDate = block.timestamp + debatingPeriodInMinutes * 1 minutes;\n        p.executed = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n        numProposals = proposalID+1;\n\n        return proposalID;\n    }\n"
    },
    {
        "vulnerableLines": "392-396",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner in the play_tmstmp39 function.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n        require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n        winner_tmstmp39 = msg.sender;\n    }\n"
    },
    {
        "vulnerableLines": "419-427",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n        require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n        require(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\"); // only 1 transaction per block\n        pastBlockTime_tmstmp36 = block.timestamp;\n        if(block.timestamp % 15 == 0) { // winner\n            msg.sender.transfer(address(this).balance);\n        }\n    }\n"
    },
    {
        "vulnerableLines": "454-458",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner in the play_tmstmp35 function.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n        require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n        winner_tmstmp35 = msg.sender;\n    }\n"
    },
    {
        "vulnerableLines": "486-494",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n    uint pastBlockTime_tmstmp40; // Forces one bet per block\n    require(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n    require(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\"); // only 1 transaction per block\n    pastBlockTime_tmstmp40 = block.timestamp;\n    if(block.timestamp % 15 == 0) { // winner\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "508-510",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to check if the execution date has passed.",
        "potentialSecurityRisk": "This allows a malicious miner to potentially manipulate the block timestamp and execute the proposal earlier than intended.",
        "fixedCode": "function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {\n    Proposal storage p = proposals[proposalNumber];\n\n    require(initialized);\n    require(block.timestamp > p.minExecutionDate, \"Execution date not reached\");                                             // If it is past the voting deadline\n    require(!p.executed, \"Proposal already executed\");                                                          // and it has not already been executed\n    require(p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)), \"Code does not match the proposal\"); // and the supplied code matches the proposal...\n\n        // ...then tally the results\n    uint quorum = 0;\n    uint yea = 0;\n    uint nay = 0;\n\n    for (uint i = 0; i <  p.votes.length; ++i) {\n        Vote storage v = p.votes[i];\n        uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n        quorum += voteWeight;\n        if (v.inSupport) {\n            yea += voteWeight;\n        } else {\n            nay += voteWeight;\n        }\n    }\n\n    Token t = Token(tokenAddress);\n    require(quorum >= t.totalSupply().mul(minimumQuorum).div(100), \"Minimum quorum not reached\"); // Check if a minimum quorum has been reached\n\n    if (yea > nay ) {\n        // Proposal passed; execute the transaction\n\n        p.executed = true;\n        \n        (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n        require(success);\n\n        p.proposalPassed = true;\n    } else {\n        // Proposal failed\n        p.proposalPassed = false;\n    }\n\n    // Fire Events\n    emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\n}"
    },
    {
        "vulnerableLines": "549-551",
        "vulnerabilityReason": "Uses block.timestamp to check if the current timestamp is greater or equal to a specific value.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n}"
    }
]