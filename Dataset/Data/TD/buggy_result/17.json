[
    {
        "vulnerableLines": "49-51",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine an outcome.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence the contract's behavior.",
        "fixedCode": "function bug_tmstmp1() view public returns (bool) {\n    // Other operations\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "57-61",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and gain an unfair advantage.",
        "fixedCode": "function play_tmstmp7(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp7 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "67-67",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp1 = block.timestamp; // Ensure this value is used in non-critical logic only."
    },
    {
        "vulnerableLines": "73-76",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and gain an unfair advantage.",
        "fixedCode": "function play_tmstmp23(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp23 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "86-89",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and gain an unfair advantage.",
        "fixedCode": "function play_tmstmp2(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp2 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "91-93",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine an outcome.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence the contract's behavior.",
        "fixedCode": "function bug_tmstmp17() view public returns (bool) {\n    // Other operations\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "95-97",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine an outcome.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence the contract's behavior.",
        "fixedCode": "function bug_tmstmp37() view public returns (bool) {\n    // Other operations\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "100-103",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and gain an unfair advantage.",
        "fixedCode": "function play_tmstmp3(uint startTime) public {\n    require(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n    winner_tmstmp3 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "106-108",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine an outcome.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence the contract's behavior.",
        "fixedCode": "function bug_tmstmp9() view public returns (bool) {\n    // Other operations\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "110-112",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine an outcome.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence the contract's behavior.",
        "fixedCode": "function bug_tmstmp25() view public returns (bool) {\n    // Other operations\n\treturn block.timestamp >= 1546300800;\n}"
    },
    {
        "vulnerableLines": "115-115",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp2 = block.timestamp; // Ensure this value is used in non-critical logic only."
    },
    {
        "vulnerableLines": "117-117",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp3 = block.timestamp; // Ensure this value is used in non-critical logic only."
    },
    {
        "vulnerableLines": "119-119",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp4 = block.timestamp; // Ensure this value is used in non-critical logic only."
    },
    {
        "vulnerableLines": "131-133",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp14(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp14 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "142-144",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp30 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "150-157",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp8 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp8, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp8 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "166-170",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp39 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "178-185",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp36, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp36 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "197-199",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp35 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "211-213",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp19(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp19 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "217-219",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp26 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "223-229",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp20 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp20 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "233-240",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp32 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp32, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp32 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "245-246",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp38 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "256-264",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions and transfer operations, leading to timestamp dependence vulnerability.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp to unfairly participate in the game or influence block validation.",
        "fixedCode": "function bug_tmstmp4 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp4 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "277-278",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to set the frozenTime for a wallet.",
        "potentialSecurityRisk": "Timestamp manipulation by miners could affect the freezing mechanism, allowing earlier access to funds.",
        "fixedCode": "frozenTime: block.timestamp + 1 * 1 hours"
    },
    {
        "vulnerableLines": "285-293",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions and transfer operations, leading to timestamp dependence vulnerability.",
        "potentialSecurityRisk": "A miner can manipulate the block timestamp to unfairly participate in the game or influence block validation.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp40 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "302-304",
        "vulnerabilityReason": "Uses block.timestamp directly in a conditional check, making it susceptible to miner manipulation.",
        "potentialSecurityRisk": "Miners can adjust the timestamp to meet specific conditions in the contract, leading to unintended behavior.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "306-312",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in condition checks for determining whether a wallet is frozen.",
        "potentialSecurityRisk": "Miners could influence the timestamp, potentially unfreezing funds earlier than intended.",
        "fixedCode": "function checkFrozenWallet(address _from, uint _value) public view returns (bool) {\n\t\treturn (\n\t\t\t_from==owner || \n\t\t\t(!tokenFrozen && \n\t\t\t(!frozenWallets[_from].isFrozen || \n\t\t\t block.timestamp >= frozenWallets[_from].frozenTime || \n\t\t\t balanceOf[_from].sub(_value) >= frozenWallets[_from].frozenAmount))\n\t\t);\n\t}"
    },
    {
        "vulnerableLines": "315-319",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp27 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "328-332",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp31(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp31 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "341-343",
        "vulnerabilityReason": "Uses block.timestamp directly in a conditional check, making it susceptible to miner manipulation.",
        "potentialSecurityRisk": "Miners can adjust the timestamp to meet specific conditions in the contract, leading to unintended behavior.",
        "fixedCode": "function bug_tmstmp13() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "348-348",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment, potentially leading to time-related issues.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp5 = block.timestamp; // Use for non-critical logic only"
    }
]