[
    {
        "vulnerableLines": "9-11",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "Miners can manipulate this timestamp, impacting the return value and any dependent logic.",
        "fixedCode": "function bug_tmstmp21() view public returns (bool) {\n    uint256 thresholdTimestamp = 1546300800;\n    return block.timestamp >= thresholdTimestamp;\n}"
    },
    {
        "vulnerableLines": "17-21",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment and condition.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to win the game unfairly.",
        "fixedCode": "function play_tmstmp3(uint startTime) public {\n    require(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n    winner_tmstmp3 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "31-33",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "Miners can manipulate this timestamp, impacting the return value and any dependent logic.",
        "fixedCode": "function bug_tmstmp9() view public returns (bool) {\n    uint256 thresholdTimestamp = 1546300800;\n    return block.timestamp >= thresholdTimestamp;\n}"
    },
    {
        "vulnerableLines": "39-42",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment and condition.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to win the game unfairly.",
        "fixedCode": "function play_tmstmp27(uint startTime) public {\n    require(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n    winner_tmstmp27 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "45-48",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment and condition.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to win the game unfairly.",
        "fixedCode": "function play_tmstmp31(uint startTime) public {\n    require(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n    winner_tmstmp31 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "56-58",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "Miners can manipulate this timestamp, impacting the return value and any dependent logic.",
        "fixedCode": "function bug_tmstmp25() view public returns (bool) {\n    uint256 thresholdTimestamp = 1546300800;\n    return block.timestamp >= thresholdTimestamp;\n}"
    },
    {
        "vulnerableLines": "73-76",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment and condition.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to win the game unfairly.",
        "fixedCode": "function play_tmstmp26(uint startTime) public {\n    require(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n    winner_tmstmp26 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "78-85",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp20() public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\");\n    require(block.timestamp != pastBlockTime_tmstmp20, \"Only 1 transaction per block\");\n    pastBlockTime_tmstmp20 = block.timestamp;\n    if(block.timestamp % 15 == 0) {\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "88-95",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp32() public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\");\n    require(block.timestamp != pastBlockTime_tmstmp32, \"Only 1 transaction per block\");\n    pastBlockTime_tmstmp32 = block.timestamp;\n    if(block.timestamp % 15 == 0) {\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "98-101",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment and condition.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to win the game unfairly.",
        "fixedCode": "function play_tmstmp38(uint startTime) public {\n    require(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n    winner_tmstmp38 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "103-110",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp4() public payable {\n    require(msg.value == 10 ether, \"Must send 10 ether to play\");\n    require(block.timestamp != pastBlockTime_tmstmp4, \"Only 1 transaction per block\");\n    pastBlockTime_tmstmp4 = block.timestamp;\n    if(block.timestamp % 15 == 0) {\n        msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "vulnerableLines": "114-117",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment and condition.",
        "potentialSecurityRisk": "Miners can manipulate the timestamp to win the game unfairly.",
        "fixedCode": "function play_tmstmp7(uint startTime) public {\n    require(block.timestamp >= startTime + (5 * 1 days), \"Too early to play\");\n    winner_tmstmp7 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "120-123",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp23(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp23 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "197-201",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp10(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp10 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "203-206",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp22(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp22 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "208-216",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp12 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\trequire(block.timestamp != pastBlockTime_tmstmp12, \"Only 1 transaction per block\"); // only 1 transaction per block\n\tpastBlockTime_tmstmp12 = block.timestamp;\n\tif(block.timestamp % 15 == 0) { // winner\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "219-222",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp11(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp11 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "227-231",
        "vulnerabilityReason": "Uses block.timestamp directly in a condition to determine the winner.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to unfairly obtain the winning condition.",
        "fixedCode": "function play_tmstmp2(uint startTime) public {\n\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\twinner_tmstmp2 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "238-240",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp37() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "243-245",
        "vulnerabilityReason": "Uses block.timestamp for comparison without accounting for miner manipulation.",
        "potentialSecurityRisk": "This condition can be manipulated by miners to execute certain operations ahead of time.",
        "fixedCode": "function bug_tmstmp13() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    },
    {
        "vulnerableLines": "247-247",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp5 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "249-249",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp1 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "251-251",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp2 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "253-253",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp3 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "255-255",
        "vulnerabilityReason": "Uses block.timestamp directly in a variable assignment.",
        "potentialSecurityRisk": "This timestamp can be manipulated by miners, potentially affecting logic dependent on this value.",
        "fixedCode": "uint256 bugv_tmstmp4 = block.timestamp; // fixed by ensuring this value is used in non-critical logic only"
    },
    {
        "vulnerableLines": "297-300",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp14(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp14 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "317-320",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp30(uint startTime) public {\n\t\trequire(startTime + (5 * 1 days) <= block.timestamp, \"Too early to play\");\n\t\twinner_tmstmp30 = msg.sender;\n\t}"
    },
    {
        "vulnerableLines": "346-352",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp8() public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp8, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp8 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "383-383",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to set the minExecutionDate, which can be manipulated by miners.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to influence the execution date of proposals, potentially causing premature or delayed execution.",
        "fixedCode": "function newProposal(\n\taddress destination,\n\tuint weiAmount,\n\tstring memory transactionDescription,\n\tbytes memory transactionBytecode\n)\n\tonlyTokenholders public\n\treturns (uint proposalID)\n{\n\tproposalID = proposals.length++;\n\tProposal storage p = proposals[proposalID];\n\tp.recipient = destination;\n\tp.signedByChairman = false;\n\tp.amount = weiAmount;\n\tp.description = transactionDescription;\n\tp.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n\tp.minExecutionDate = block.timestamp + debatingPeriodInMinutes * 1 minutes;\n\tp.executed = false;\n\tp.proposalPassed = false;\n\tp.numberOfVotes = 0;\n\temit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n\tnumProposals = proposalID+1;\n\n\treturn proposalID;\n}"
    },
    {
        "vulnerableLines": "392-396",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp39(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Invalid time to play\");\n\twinner_tmstmp39 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "419-426",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) for conditions in require statements and elsewhere.",
        "potentialSecurityRisk": "This allows a miner to influence the block timestamp and unfairly attempt to win or manipulate game logic.",
        "fixedCode": "function bug_tmstmp36 () public payable {\n\trequire(msg.value == 10 ether, \"Must send 10 ether to play\");\n\trequire(block.timestamp != pastBlockTime_tmstmp36, \"Only one transaction per block\");\n\tpastBlockTime_tmstmp36 = block.timestamp;\n\tif(block.timestamp % 15 == 0) {\n\t\tmsg.sender.transfer(address(this).balance);\n\t}\n}"
    },
    {
        "vulnerableLines": "454-458",
        "vulnerabilityReason": "Uses block.timestamp to compare against a given start time without accounting for miner manipulation.",
        "potentialSecurityRisk": "A miner could manipulate the block timestamp to match the required condition and win the game dishonestly.",
        "fixedCode": "function play_tmstmp35(uint startTime) public {\n\trequire(block.timestamp >= startTime + (5 * 1 days), \"Invalid time to play\");\n\twinner_tmstmp35 = msg.sender;\n}"
    },
    {
        "vulnerableLines": "486-493",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) in multiple places, including conditions for require statements and determining if the player wins.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp and potentially win unfairly.",
        "fixedCode": "function bug_tmstmp40 () public payable {\n\t\trequire(msg.value == 10 ether, \"Must send 10 ether to play\"); // must send 10 ether to play\n\t\trequire(block.timestamp != pastBlockTime_tmstmp40, \"Only 1 transaction per block\"); // only 1 transaction per block\n\t\tpastBlockTime_tmstmp40 = block.timestamp;\n\t\tif(block.timestamp % 15 == 0) { // winner\n\t\t\tmsg.sender.transfer(address(this).balance);\n\t\t}\n\t}"
    },
    {
        "vulnerableLines": "508-510",
        "vulnerabilityReason": "Uses now (alias for block.timestamp) to verify the execution time frame of the proposal.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to force or prevent the execution of proposals.",
        "fixedCode": "require(block.timestamp > p.minExecutionDate, \"Proposal cannot be executed yet\"); // If it is past the voting deadline\n\t\trequire(!p.executed, \"Proposal already executed\"); // and it has not already been executed\n\t\trequire(p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)), \"Proposal hash does not match\"); // and the supplied code matches the proposal..."
    },
    {
        "vulnerableLines": "549-551",
        "vulnerabilityReason": "Uses block.timestamp directly for a conditional check.",
        "potentialSecurityRisk": "Miners can manipulate the block timestamp to cause unintended behavior.",
        "fixedCode": "function bug_tmstmp33() view public returns (bool) {\n\t\treturn block.timestamp >= 1546300800;\n\t}"
    }
]