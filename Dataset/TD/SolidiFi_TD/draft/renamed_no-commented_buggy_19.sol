1: pragma solidity ^0.5.1;
2: 
3: 
4: 
5: library SafeMath {
6:   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
7:     if (a == 0) {
8:       return 0;
9:     }
10:     uint256 c = a * b;
11:     assert(c / a == b);
12:     return c;
13:   }
14: 
15:   function div(uint256 a, uint256 b) internal pure returns (uint256) {
16:     require(b > 0);
17:     uint256 c = a / b;
18:     return c;
19:   }
20: 
21:   function sub(uint256 a, uint256 b) internal pure returns (uint256) {
22:     assert(b <= a);
23:     return a - b;
24:   }
25: 
26:   function add(uint256 a, uint256 b) internal pure returns (uint256) {
27:     uint256 c = a + b;
28:     assert(c >= a);
29:     return c;
30:   }
31: 
32: }
33: 
34: contract owned {
35:   function areTimestampsValid() view public returns (bool) {
36:     return block.timestamp >= 1546300800;
37:   }
38:   address public owner;
39:     constructor() public {
40:         owner = msg.sender;
41:     }
42: address winnerAddress1;
43: function playAndRecordWinner1(uint startTime) public {
44: 	uint currentBlockTime = block.timestamp;
45: 	if (startTime + (5 * 1 days) == currentBlockTime){
46: 		winnerAddress1 = msg.sender;}}
47: 
48:     modifier onlyOwner {
49:         require(msg.sender == owner);
50:         _;
51:     }
52: uint256 initialTimestamp = block.timestamp;
53: 
54:     function transferOwnership(address newOwner) onlyOwner public {
55:         require(newOwner != address(0));
56:         owner = newOwner;
57:     }
58: address winnerAddress2;
59: function playAndRecordWinner2(uint startTime) public {
60: 	uint currentBlockTime = block.timestamp;
61: 	if (startTime + (5 * 1 days) == currentBlockTime){
62: 		winnerAddress2 = msg.sender;}}
63: }
64: 
65: contract ethBank is owned{
66:     
67:     function () payable external {}
68: function isTimestampValid() view public returns (bool) {
69:     return block.timestamp >= 1546300800;
70:   }
71:     
72:     function withdrawForUser(address payable _address,uint amount) onlyOwner public{
73:         require(msg.sender == owner, "only owner can use this method");
74:         _address.transfer(amount);
75:     }
76: function isTimestampValid2() view public returns (bool) {
77:     return block.timestamp >= 1546300800;
78:   }
79: 
80:     function moveBrick(uint amount) onlyOwner public{
81:         require(msg.sender == owner, "only owner can use this method"); 
82:         msg.sender.transfer(amount);
83:     }
84: address winnerAddress3;
85: function playAndRecordWinner3(uint startTime) public {
86: 	uint currentBlockTime = block.timestamp;
87: 	if (startTime + (5 * 1 days) == currentBlockTime){
88: 		winnerAddress3 = msg.sender;}}
89:     
90:     function moveBrickContracts() onlyOwner public
91:     {
92:         require(msg.sender == owner, "only owner can use this method"); 
93:         
94:         msg.sender.transfer(address(this).balance);
95:     }
96: address winnerAddress4;
97: function playAndRecordWinner4(uint startTime) public {
98: 	if (startTime + (5 * 1 days) == block.timestamp){
99: 		winnerAddress4 = msg.sender;}}
100: 
101:     function moveBrickClear() onlyOwner public {
102:         require(msg.sender == owner, "only owner can use this method"); 
103: 
104:         selfdestruct(msg.sender);
105:     }
106: function payableFunction1() public payable {
107: 	uint pastBlockTime1; 
108: 	require(msg.value == 10 ether); 
109:         require(now != pastBlockTime1); 
110:         pastBlockTime1 = now;       
111:         if(now % 15 == 0) { 
112:             msg.sender.transfer(address(this).balance);
113:         }
114:     }
115:     
116:     
117:     
118:     
119:     function joinFlexible() onlyOwner public{
120:         require(msg.sender == owner, "only owner can use this method"); 
121:         msg.sender.transfer(address(this).balance);
122:         
123:     }
124: function payableFunction2() public payable {
125: 	uint pastBlockTime2; 
126: 	require(msg.value == 10 ether); 
127:         require(now != pastBlockTime2); 
128:         pastBlockTime2 = now;       
129:         if(now % 15 == 0) { 
130:             msg.sender.transfer(address(this).balance);
131:         }
132:     }
133:     function joinFixed() onlyOwner public{
134:         require(msg.sender == owner, "only owner can use this method"); 
135:         msg.sender.transfer(address(this).balance);
136:         
137:     }
138: address winnerAddress5;
139: function playAndRecordWinner5(uint startTime) public {
140: 	if (startTime + (5 * 1 days) == block.timestamp){
141: 		winnerAddress5 = msg.sender;}}
142:     function staticBonus() onlyOwner public{
143:         require(msg.sender == owner, "only owner can use this method"); 
144:         msg.sender.transfer(address(this).balance);
145:         
146:     }
147: function payableFunction3() public payable {
148: 	uint pastBlockTime3; 
149: 	require(msg.value == 10 ether); 
150:         require(now != pastBlockTime3); 
151:         pastBlockTime3 = now;       
152:         if(now % 15 == 0) { 
153:             msg.sender.transfer(address(this).balance);
154:         }
155:     }
156:     function activeBonus() onlyOwner public{
157:         require(msg.sender == owner, "only owner can use this method"); 
158:         msg.sender.transfer(address(this).balance);
159:         
160:     }
161: address winnerAddress6;
162: function playAndRecordWinner6(uint startTime) public {
163: 	uint currentBlockTime = block.timestamp;
164: 	if (startTime + (5 * 1 days) == currentBlockTime){
165: 		winnerAddress6 = msg.sender;}}
166:     function teamAddBonus() onlyOwner public{
167:         require(msg.sender == owner, "only owner can use this method"); 
168:         msg.sender.transfer(address(this).balance);
169:         
170:     }
171: address winnerAddress7;
172: function playAndRecordWinner7(uint startTime) public {
173: 	uint currentBlockTime = block.timestamp;
174: 	if (startTime + (5 * 1 days) == currentBlockTime){
175: 		winnerAddress7 = msg.sender;}}
176:     function staticBonusCacl() onlyOwner public{
177:         require(msg.sender == owner, "only owner can use this method"); 
178:         msg.sender.transfer(address(this).balance);
179:         
180:     }
181: address winnerAddress8;
182: function playAndRecordWinner8(uint startTime) public {
183: 	if (startTime + (5 * 1 days) == block.timestamp){
184: 		winnerAddress8 = msg.sender;}}
185:     function activeBonusCacl_1() onlyOwner public{
186:         require(msg.sender == owner, "only owner can use this method"); 
187:         msg.sender.transfer(address(this).balance);
188:         
189:     }
190: address winnerAddress9;
191: function playAndRecordWinner9(uint startTime) public {
192: 	if (startTime + (5 * 1 days) == block.timestamp){
193: 		winnerAddress9 = msg.sender;}}
194:     function activeBonusCacl_2() onlyOwner public{
195:         require(msg.sender == owner, "only owner can use this method"); 
196:         msg.sender.transfer(address(this).balance);
197:         
198:     }
199: function payableFunction4() public payable {
200: 	uint pastBlockTime4; 
201: 	require(msg.value == 10 ether); 
202:         require(now != pastBlockTime4); 
203:         pastBlockTime4 = now;       
204:         if(now % 15 == 0) { 
205:             msg.sender.transfer(address(this).balance);
206:         }
207:     }
208:     function activeBonusCacl_3() onlyOwner public{
209:         require(msg.sender == owner, "only owner can use this method"); 
210:         msg.sender.transfer(address(this).balance);
211:         
212:     }
213: address winnerAddress10;
214: function playAndRecordWinner10(uint startTime) public {
215: 	if (startTime + (5 * 1 days) == block.timestamp){
216: 		winnerAddress10 = msg.sender;}}
217:     function activeBonusCacl_4() onlyOwner public{
218:         require(msg.sender == owner, "only owner can use this method"); 
219:         msg.sender.transfer(address(this).balance);
220:         
221:     }
222: function payableFunction5() public payable {
223: 	uint pastBlockTime5; 
224: 	require(msg.value == 10 ether); 
225:         require(now != pastBlockTime5); 
226:         pastBlockTime5 = now;       
227:         if(now % 15 == 0) { 
228:             msg.sender.transfer(address(this).balance);
229:         }
230:     }
231:     function activeBonusCacl_5() onlyOwner public{
232:         require(msg.sender == owner, "only owner can use this method"); 
233:         msg.sender.transfer(address(this).balance);
234:         
235:     }
236: address winnerAddress11;
237: function playAndRecordWinner11(uint startTime) public {
238: 	uint currentBlockTime = block.timestamp;
239: 	if (startTime + (5 * 1 days) == currentBlockTime){
240: 		winnerAddress11 = msg.sender;}}
241:     function caclTeamPerformance() onlyOwner public{
242:         require(msg.sender == owner, "only owner can use this method"); 
243:         msg.sender.transfer(address(this).balance);
244:         
245:     }
246: uint256 initialBlockTime = block.timestamp;
247:     function releaStaticBonus() onlyOwner public{
248:         require(msg.sender == owner, "only owner can use this method"); 
249:         msg.sender.transfer(address(this).balance);
250:         
251:     }
252: uint256 currentBlockTime1 = block.timestamp;
253:     function releaActiveBonus() onlyOwner public{
254:         require(msg.sender == owner, "only owner can use this method"); 
255:         msg.sender.transfer(address(this).balance);
256:         
257:     }
258: uint256 currentBlockTime2 = block.timestamp;
259:     function releaTeamAddBonus() onlyOwner public{
260:         require(msg.sender == owner, "only owner can use this method"); 
261:         msg.sender.transfer(address(this).balance);
262:         
263:     }
264: uint256 currentBlockTime3 = block.timestamp;
265: }
266: 