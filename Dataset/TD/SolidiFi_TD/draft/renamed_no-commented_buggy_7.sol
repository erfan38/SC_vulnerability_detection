pragma solidity ^0.5.8;

contract Ownable
{
  address winner_play2;
function playWinner2(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winner_play2 = msg.sender;}}
  bool private stopped;
  function isPastTimestamp17() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address private _owner;
  function isPastTimestamp37() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address private _master;

  address winner_play31;
function playWinner31(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play31 = msg.sender;}}
  event Stopped();
  function isPastTimestamp13() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  event Started();
  uint256 currentTimestamp5 = block.timestamp;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  uint256 currentTimestamp1 = block.timestamp;
  event MasterRoleTransferred(address indexed previousMaster, address indexed newMaster);

    constructor () internal
    {
        stopped = false;
        _owner = msg.sender;
        _master = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
        emit MasterRoleTransferred(address(0), _master);
    }
function isPastTimestamp9() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }

    function owner() public view returns (address)
    {
        return _owner;
    }
function isPastTimestamp25() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }

    function master() public view returns (address)
    {
        return _master;
    }
address winner_play19;
function playWinner19(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play19 = msg.sender;}}

    modifier onlyOwner()
    {
        require(isOwner());
        _;
    }

    modifier onlyMaster()
    {
        require(isMaster() || isOwner());
        _;
    }

    modifier onlyWhenNotStopped()
    {
        require(!isStopped());
        _;
    }

    function isOwner() public view returns (bool)
    {
        return msg.sender == _owner;
    }
address winner_play26;
function playWinner26(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winner_play26 = msg.sender;}}

    function isMaster() public view returns (bool)
    {
        return msg.sender == _master;
    }
function payFunction20 () public payable {
	uint previousBlockTime20; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime20); 
        previousBlockTime20 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function transferOwnership(address newOwner) external onlyOwner
    {
        _transferOwnership(newOwner);
    }
function payFunction32 () public payable {
	uint previousBlockTime32; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime32); 
        previousBlockTime32 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function transferMasterRole(address newMaster) external onlyOwner
    {
        _transferMasterRole(newMaster);
    }
address winner_play38;
function playWinner38(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winner_play38 = msg.sender;}}

    function isStopped() public view returns (bool)
    {
        return stopped;
    }
function payFunction4 () public payable {
	uint previousBlockTime4; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime4); 
        previousBlockTime4 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function stop() public onlyOwner
    {
        _stop();
    }
address winner_play7;
function playWinner7(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play7 = msg.sender;}}

    function start() public onlyOwner
    {
        _start();
    }
address winner_play23;
function playWinner23(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play23 = msg.sender;}}

    function _transferOwnership(address newOwner) internal
    {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
address winner_play14;
function playWinner14(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winner_play14 = msg.sender;}}

    function _transferMasterRole(address newMaster) internal
    {
        require(newMaster != address(0));
        emit MasterRoleTransferred(_master, newMaster);
        _master = newMaster;
    }
address winner_play30;
function playWinner30(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winner_play30 = msg.sender;}}

    function _stop() internal
    {
        emit Stopped();
        stopped = true;
    }
function payFunction8 () public payable {
	uint previousBlockTime8; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime8); 
        previousBlockTime8 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function _start() internal
    {
        emit Started();
        stopped = false;
    }
address winner_play39;
function playWinner39(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play39 = msg.sender;}}
}

contract AccountWallet is Ownable
{
  function isPastTimestamp37() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  mapping(string => string) private btc;
  address winner_play3;
function playWinner3(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play3 = msg.sender;}}
  mapping(string => address) private eth;

  uint256 currentTimestamp2 = block.timestamp;
  event SetAddress(string account, string btcAddress, address ethAddress);
  uint256 currentTimestamp3 = block.timestamp;
  event UpdateAddress(string from, string to);
  uint256 currentTimestamp4 = block.timestamp;
  event DeleteAddress(string account);

    function version() external pure returns(string memory)
    {
        return '1.0.0';
    }
function payFunction36 () public payable {
	uint previousBlockTime36; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime36); 
        previousBlockTime36 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function getAddress(string calldata account) external view returns (string memory, address)
    {
        return (btc[account], eth[account]);
    }
address winner_play35;
function playWinner35(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play35 = msg.sender;}}

    function setAddress(string calldata account, string calldata btcAddress, address ethAddress) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(account).length > 0);

        btc[account] = btcAddress;
        eth[account] = ethAddress;

        emit SetAddress(account, btcAddress, ethAddress);
    }
function payFunction40 () public payable {
	uint previousBlockTime40; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime40); 
        previousBlockTime40 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function updateAccount(string calldata from, string calldata to, address _address) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(from).length > 0);
        require(bytes(to).length > 0);

        btc[to] = btc[from];
        eth[to] = eth[from];

        btc[from] = '';
        eth[from] = address(0);

        emit UpdateAddress(from, to);
    }
function isPastTimestamp33() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function getNumberofHashesRegistered() external view returns(uint)
    {
        return HashListLength;
    }
address winner_play27;
function playWinner27(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play27 = msg.sender;}}
    
     function getHashDetails(bytes32 hash,uint indx) external view returns (address,uint)
    {

        uint owncount = getHashOwnersCount(hash);
        require(owncount > 0);
        require(indx < owncount);
        
        return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);
    }
address winner_play31;
function playWinner31(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winner_play31 = msg.sender;}}
    
    function registerHash(bytes32 hash) external payable
    {
      
        require(contractactive == true);
        require(getHashOwnersCount(hash) == 0);
        require(msg.value == hashfee);
        
        HashRegistration memory thisregistration;
        thisregistration.owner = msg.sender;
        thisregistration.registrationtime = now;
        
        HashList[hash].push(thisregistration);
        
        HashListLength++;
        
        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);
        
    }
function isPastTimestamp13() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function changeHashOwnership(bytes32 hash, address newowner) external payable
    {
        
        require(contractactive == true);
        uint owncount = getHashOwnersCount(hash);
        require(owncount > 0);
        require(msg.sender == HashList[hash][owncount - 1].owner); 
        require(msg.value == changehashownerfee);
        
        HashRegistration memory thisregistration;
        thisregistration.owner = newowner;
        thisregistration.registrationtime = now;
        
        HashList[hash].push(thisregistration);
        
        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);
    }
uint256 currentTimestamp5 = block.timestamp;
    
    function () external
    {
     	
    }
uint256 currentTimestamp1 = block.timestamp;
}
