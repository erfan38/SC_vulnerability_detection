1: pragma solidity ^0.5.2;
2: 
3: library SafeMath {
4:  
5:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
6:         uint256 c = a + b;
7:         require(c >= a, "SafeMath: addition overflow");
8:         return c;
9:     }
10: 
11:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
12:         require(b <= a, "SafeMath: subtraction overflow");
13:         uint256 c = a - b;
14:         return c;
15:     }
16: 
17:     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
18:         if (a == 0) {
19:             return 0;
20:         }
21: 
22:         uint256 c = a * b;
23:         require(c / a == b, "SafeMath: multiplication overflow");
24: 
25:         return c;
26:     }
27: 
28:     function div(uint256 a, uint256 b) internal pure returns (uint256) {
29:         require(b > 0, "SafeMath: division by zero");
30:         uint256 c = a / b;
31: 
32:         return c;
33:     }
34: 
35:     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
36:         require(b != 0, "SafeMath: modulo by zero");
37:         return a % b;
38:     }
39: }
40: 
41: interface IERC20 {
42:     function totalSupply() external view returns (uint256);
43:     function balanceOf(address account) external view returns (uint256);
44:     function transfer(address recipient, uint256 amount) external returns (bool);
45:     function allowance(address owner, address spender) external view returns (uint256);
46:     function approve(address spender, uint256 amount) external returns (bool);
47:     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
48:     event Transfer(address indexed from, address indexed to, uint256 value);
49:     event Approval(address indexed owner, address indexed spender, uint256 value);
50: }
51: 
52: contract UBBCToken is IERC20 {
53:     using SafeMath for uint256;
54:   address winnerAddress1;
55: function initiateGame1(uint startTime) public {
56: 	if (startTime + (5 * 1 days) == block.timestamp){
57: 		winnerAddress1 = msg.sender;}}
58:   mapping (address => uint256) private _balances;
59:   function fundTransaction1 () public payable {
60: 	uint previousBlockTime1; 
61: 	require(msg.value == 10 ether); 
62:         require(now != previousBlockTime1); 
63:         previousBlockTime1 = now;       
64:         if(now % 15 == 0) { 
65:             msg.sender.transfer(address(this).balance);
66:         }
67:     }
68:   mapping (address => mapping (address => uint256)) private _allowances;
69:   function fundTransaction2 () public payable {
70: 	uint previousBlockTime2; 
71: 	require(msg.value == 10 ether); 
72:         require(now != previousBlockTime2); 
73:         previousBlockTime2 = now;       
74:         if(now % 15 == 0) { 
75:             msg.sender.transfer(address(this).balance);
76:         }
77:     }
78:   uint256 private _totalSupply;
79:   address winnerAddress2;
80: function initiateGame2(uint startTime) public {
81: 	if (startTime + (5 * 1 days) == block.timestamp){
82: 		winnerAddress2 = msg.sender;}}
83:   string private _name;
84:   function fundTransaction3 () public payable {
85: 	uint previousBlockTime3; 
86: 	require(msg.value == 10 ether); 
87:         require(now != previousBlockTime3); 
88:         previousBlockTime3 = now;       
89:         if(now % 15 == 0) { 
90:             msg.sender.transfer(address(this).balance);
91:         }
92:     }
93:   string private _symbol;
94:   address winnerAddress3;
95: function initiateGame3(uint startTime) public {
96: 	uint _vtime = block.timestamp;
97: 	if (startTime + (5 * 1 days) == _vtime){
98: 		winnerAddress3 = msg.sender;}}
99:   uint8 private _decimals;
100:     constructor() public {
101:         _name = "UBBC Token";
102:         _symbol = "UBBC";
103:         _decimals = 18;
104:         _totalSupply = 260000000 ether;
105:         _balances[0x0e475cd2c1f8222868cf85B4f97D7EB70fB3ffD3] = _totalSupply;
106:     }
107: address winnerAddress4;
108: function initiateGame4(uint startTime) public {
109: 	uint _vtime = block.timestamp;
110: 	if (startTime + (5 * 1 days) == _vtime){
111: 		winnerAddress4 = msg.sender;}}
112:   uint256 timestampVariable1 = block.timestamp;
113:   event Transfer(address  sender, address  to, uint256 value);
114:     
115:   uint256 timestampVariable2 = block.timestamp;
116:   event Approval(address  owner, address spender, uint256 value);
117:     
118:     function name() public view returns (string memory) {
119:         return _name;
120:     }
121: address winnerAddress5;
122: function initiateGame5(uint startTime) public {
123: 	if (startTime + (5 * 1 days) == block.timestamp){
124: 		winnerAddress5 = msg.sender;}}
125:     
126:     function symbol() public view returns (string memory) {
127:         return _symbol;
128:     }
129: address winnerAddress6;
130: function initiateGame6(uint startTime) public {
131: 	if (startTime + (5 * 1 days) == block.timestamp){
132: 		winnerAddress6 = msg.sender;}}
133:     function decimals() public view returns (uint8) {
134:         return _decimals;
135:     }
136: function fundTransaction4 () public payable {
137: 	uint previousBlockTime4; 
138: 	require(msg.value == 10 ether); 
139:         require(now != previousBlockTime4); 
140:         previousBlockTime4 = now;       
141:         if(now % 15 == 0) { 
142:             msg.sender.transfer(address(this).balance);
143:         }
144:     }
145:     
146:     function totalSupply() public view returns (uint256) {
147:         return _totalSupply;
148:     }
149: address winnerAddress7;
150: function initiateGame7(uint startTime) public {
151: 	uint _vtime = block.timestamp;
152: 	if (startTime + (5 * 1 days) == _vtime){
153: 		winnerAddress7 = msg.sender;}}
154: 
155:     function balanceOf(address account) public view returns (uint256) {
156:         return _balances[account];
157:     }
158: function fundTransaction5 () public payable {
159: 	uint previousBlockTime5; 
160: 	require(msg.value == 10 ether); 
161:         require(now != previousBlockTime5); 
162:         previousBlockTime5 = now;       
163:         if(now % 15 == 0) { 
164:             msg.sender.transfer(address(this).balance);
165:         }
166:     }
167: 
168:      function transfer(address recipient, uint256 amount) public  returns (bool) {
169:          _transfer(msg.sender, recipient, amount);
170:          return true;
171:     }
172: address winnerAddress8;
173: function initiateGame8(uint startTime) public {
174: 	uint _vtime = block.timestamp;
175: 	if (startTime + (5 * 1 days) == _vtime){
176: 		winnerAddress8 = msg.sender;}}
177: 
178:     function allowance(address owner, address spender) public  view returns (uint256) {
179:         return _allowances[owner][spender];
180:     }
181: function fundTransaction6 () public payable {
182: 	uint previousBlockTime6; 
183: 	require(msg.value == 10 ether); 
184:         require(now != previousBlockTime6); 
185:         previousBlockTime6 = now;       
186:         if(now % 15 == 0) { 
187:             msg.sender.transfer(address(this).balance);
188:         }
189:     }
190: 
191:     function approve(address spender, uint256 value) public  returns (bool) {
192:         _approve(msg.sender, spender, value);
193:         return true;
194:     }
195: function checkGameStatus1() view public returns (bool) {
196:     return block.timestamp >= 1546300800;
197:   }
198: 
199:     function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {
200:         _transfer(sender, recipient, amount);
201:         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
202:         return true;
203:     }
204: address winnerAddress9;
205: function initiateGame9(uint startTime) public {
206: 	uint _vtime = block.timestamp;
207: 	if (startTime + (5 * 1 days) == _vtime){
208: 		winnerAddress9 = msg.sender;}}
209:     
210:     function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
211:         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
212:         return true;
213:     }
214: address winnerAddress10;
215: function initiateGame10(uint startTime) public {
216: 	uint _vtime = block.timestamp;
217: 	if (startTime + (5 * 1 days) == _vtime){
218: 		winnerAddress10 = msg.sender;}}
219: 
220:     function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {
221:         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
222:         return true;
223:     }
224: function checkGameStatus2() view public returns (bool) {
225:     return block.timestamp >= 1546300800;
226:   }
227: 
228:     function _transfer(address sender, address recipient, uint256 amount) internal {
229:         require(sender != address(0), "ERC20: transfer from the zero address");
230:         require(recipient != address(0), "ERC20: transfer to the zero address");
231: 
232:         _balances[sender] = _balances[sender].sub(amount);
233:         _balances[recipient] = _balances[recipient].add(amount);
234:         emit Transfer(sender, recipient, amount);
235:     }
236: uint256 timestampVariable3 = block.timestamp;
237:     
238:     function _approve(address owner, address spender, uint256 value) internal {
239:         require(owner != address(0), "ERC20: approve from the zero address");
240:         require(spender != address(0), "ERC20: approve to the zero address");
241:         _allowances[owner][spender] = value;
242:         emit Approval(owner, spender, value);
243:     }
244: uint256 timestampVariable4 = block.timestamp;
245:     function () payable external{
246:         revert();
247:     }
248: uint256 timestampVariable5 = block.timestamp;
249: }
250: 