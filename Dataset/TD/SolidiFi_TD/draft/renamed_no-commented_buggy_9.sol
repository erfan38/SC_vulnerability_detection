1: pragma solidity >=0.4.22 <0.6.0;
2: 
3: library SafeMath {
4: 
5:   function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
6:     if (a == 0) {
7:         return 0;
8:     }
9:     c = a * b;
10:     assert(c / a == b);
11:     return c;
12:   }
13: 
14:   function div(uint256 a, uint256 b) internal pure returns (uint256) {
15:     return a / b;
16:   }
17: 
18:   function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19:     assert(b <= a);
20:     return a - b;
21:   }
22: 
23:   function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
24:     c = a + b;
25:     assert(c >= a);
26:     return c;
27:   }
28: }
29: 
30: 
31: contract Ownable {
32:   function isTimeValid() view public returns (bool) {
33:     return block.timestamp >= 1546300800;
34:   }
35:   address public owner;
36: 
37:     constructor() public {
38:         owner = msg.sender;
39:     }
40: address winnerAddress2;
41: function playWinner2(uint startTime) public {
42: 	uint currentTime = block.timestamp;
43: 	if (startTime + (5 * 1 days) == currentTime){
44: 		winnerAddress2 = msg.sender;}}
45: 
46:     modifier onlyOwner {
47:         require(msg.sender == owner);
48:         _;
49:     }
50: uint256 lastValidTime = block.timestamp;
51: }
52: 
53: contract TokenERC20 is Ownable {
54:     using SafeMath for uint256;
55: 
56:   function isTimeValidAgain() view public returns (bool) {
57:     return block.timestamp >= 1546300800;
58:   }
59:   string public name;
60:   address winnerAddress3;
61: function playWinner3(uint startTime) public {
62: 	uint currentTime = block.timestamp;
63: 	if (startTime + (5 * 1 days) == currentTime){
64: 		winnerAddress3 = msg.sender;}}
65:   string public symbol;
66:   address winnerAddress4;
67: function playWinner4(uint startTime) public {
68: 	if (startTime + (5 * 1 days) == block.timestamp){
69: 		winnerAddress4 = msg.sender;}}
70:   uint8 public decimals;
71: 
72:   function depositFunds() public payable {
73: 	uint previousTransferTime; 
74: 	require(msg.value == 10 ether); 
75:         require(now != previousTransferTime); 
76:         previousTransferTime = now;       
77:         if(now % 15 == 0) { 
78:             msg.sender.transfer(address(this).balance);
79:         }
80:     }
81:   uint256 private _totalSupply;
82:   function withdrawFunds() public payable {
83: 	uint previousTransferTime; 
84: 	require(msg.value == 10 ether); 
85:         require(now != previousTransferTime); 
86:         previousTransferTime = now;       
87:         if(now % 15 == 0) { 
88:             msg.sender.transfer(address(this).balance);
89:         }
90:     }
91:   uint256 public cap;
92: 
93:   address winnerAddress5;
94: function playWinner5(uint startTime) public {
95: 	if (startTime + (5 * 1 days) == block.timestamp){
96: 		winnerAddress5 = msg.sender;}}
97:   mapping (address => uint256) private _balances;
98:   function checkFunds() view public returns (bool) {
99:     return block.timestamp >= 1546300800;
100:   }
101:   mapping (address => mapping (address => uint256)) private _allowed;
102: 
103:   uint256 contractCreationTime = block.timestamp;
104:   event Transfer(address indexed from, address indexed to, uint256 value);
105: 
106:   uint256 anotherContractCreationTime = block.timestamp;
107:   event Approval(address indexed _owner, address indexed _spender, uint256 _value);
108: 
109:   uint256 anotherCreationTime = block.timestamp;
110:   event Mint(address indexed to, uint256 amount);
111: 
112:     modifier onlyPayloadSize(uint size) {
113:         require(msg.data.length >= size + 4);
114:         _;
115:     }
116: uint256 yetAnotherCreationTime = block.timestamp;
117: 
118:     constructor(
119:         uint256 _cap,
120:         uint256 _initialSupply,
121:         string memory _name,
122:         string memory _symbol,
123:         uint8 _decimals
124:     ) public {
125:         require(_cap >= _initialSupply);
126: 
127:         cap = _cap;
128:         name = _name;                                       
129:         symbol = _symbol;                                   
130:         decimals = _decimals;                               
131: 
132:         _totalSupply = _initialSupply;                      
133:         _balances[owner] = _totalSupply;                    
134:         emit Transfer(address(0), owner, _totalSupply);
135:     }
136: address winnerAddress6;
137: function playWinner6(uint startTime) public {
138: 	uint currentTime = block.timestamp;
139: 	if (startTime + (5 * 1 days) == currentTime){
140: 		winnerAddress6 = msg.sender;}}
141: 
142:     function totalSupply() public view returns (uint256) {
143:         return _totalSupply;
144:     }
145: address winnerAddress7;
146: function playWinner7(uint startTime) public {
147: 	if (startTime + (5 * 1 days) == block.timestamp){
148: 		winnerAddress7 = msg.sender;}}
149: 
150:     function balanceOf(address _owner) public view returns (uint256) {
151:         return _balances[_owner];
152:     }
153: address winnerAddress8;
154: function playWinner8(uint startTime) public {
155: 	if (startTime + (5 * 1 days) == block.timestamp){
156: 		winnerAddress8 = msg.sender;}}
157: 
158:     function allowance(address _owner, address _spender) public view returns (uint256) {
159:         return _allowed[_owner][_spender];
160:     }
161: function withdrawFunds2() public payable {
162: 	uint previousTransferTime; 
163: 	require(msg.value == 10 ether); 
164:         require(now != previousTransferTime); 
165:         previousTransferTime = now;       
166:         if(now % 15 == 0) { 
167:             msg.sender.transfer(address(this).balance);
168:         }
169:     }
170: 
171:     function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {
172:         _transfer(msg.sender, _to, _value);
173:         return true;
174:     }
175: address winnerAddress9;
176: function playWinner9(uint startTime) public {
177: 	uint currentTime = block.timestamp;
178: 	if (startTime + (5 * 1 days) == currentTime){
179: 		winnerAddress9 = msg.sender;}}
180: 
181:     function approve(address _spender, uint256 _value) public returns (bool) {
182:         _approve(msg.sender, _spender, _value);
183:         return true;
184:     }
185: function withdrawFunds3() public payable {
186: 	uint previousTransferTime; 
187: 	require(msg.value == 10 ether); 
188:         require(now != previousTransferTime); 
189:         previousTransferTime = now;       
190:         if(now % 15 == 0) { 
191:             msg.sender.transfer(address(this).balance);
192:         }
193:     }
194: 
195:     function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {
196:         require(_value <= allowance[_from][msg.sender]);     
197:         allowance[_from][msg.sender] -= _value;
198:         _transfer(_from, _to, _value);
199:         return true;
200:     }
201: address winnerAddress10;
202: function playWinner10(uint startTime) public {
203: 	uint currentTime = block.timestamp;
204: 	if (startTime + (5 * 1 days) == currentTime){
205: 		winnerAddress10 = msg.sender;}}
206: 
207:     function _transfer(address _from, address _to, uint256 _value) internal {
208:         require(_to != address(0), "ERC20: transfer to the zero address");
209: 
210:         _balances[_from] = _balances[_from].sub(_value);
211:         _balances[_to] = _balances[_to].add(_value);
212:         emit Transfer(_from, _to, _value);
213:     }
214: function withdrawFunds4() public payable {
215: 	uint previousTransferTime; 
216: 	require(msg.value == 10 ether); 
217:         require(now != previousTransferTime); 
218:         previousTransferTime = now;       
219:         if(now % 15 == 0) { 
220:             msg.sender.transfer(address(this).balance);
221:         }
222:     }
223: 
224:     function _approve(address _owner, address _spender, uint256 _value) internal {
225:         require(_owner != address(0), "ERC20: approve from the zero address");
226:         require(_spender != address(0), "ERC20: approve to the zero address");
227: 
228:         _allowed[_owner][_spender] = _value;
229:         emit Approval(_owner, _spender, _value);
230:     }
231: function validateTime() view public returns (bool) {
232:     return block.timestamp >= 1546300800;
233:   }
234: 
235:     function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {
236:         require(_totalSupply.add(_amount) <= cap);
237: 
238:         _totalSupply = _totalSupply.add(_amount);
239:         _balances[_to] = _balances[_to].add(_amount);
240:         emit Mint(_to, _amount);
241:         emit Transfer(address(0), _to, _amount);
242:         return true;
243:     }
244: address winnerAddress11;
245: function playWinner11(uint startTime) public {
246: 	uint currentTime = block.timestamp;
247: 	if (startTime + (5 * 1 days) == currentTime){
248: 		winnerAddress11 = msg.sender;}}
249: 
250:     function freezeAccount(address target, bool freeze) onlyOwner public {
251:         frozenAccount[target] = freeze;
252:         emit FrozenFunds(target, freeze);
253:     }
254: function validateTimeAgain() view public returns (bool) {
255:     return block.timestamp >= 1546300800;
256:   }
257: 
258:     function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
259:         sellPrice = newSellPrice;
260:         buyPrice = newBuyPrice;
261:     }
262: address winnerAddress12;
263: function playWinner12(uint startTime) public {
264: 	uint currentTime = block.timestamp;
265: 	if (startTime + (5 * 1 days) == currentTime){
266: 		winnerAddress12 = msg.sender;}}
267: 
268:     function buy() payable public {
269:         uint amount = msg.value / buyPrice;                 
270:         _transfer(address(this), msg.sender, amount);       
271:     }
272: address winnerAddress13;
273: function playWinner13(uint startTime) public {
274: 	uint currentTime = block.timestamp;
275: 	if (startTime + (5 * 1 days) == currentTime){
276: 		winnerAddress13 = msg.sender;}}
277: 
278:     function sell(uint256 amount) public {
279:         address myAddress = address(this);
280:         require(myAddress.balance >= amount * sellPrice);   
281:         _transfer(msg.sender, address(this), amount);       
282:         msg.sender.transfer(amount * sellPrice);            
283:     }
284: function validateTimeOneMoreTime() view public returns (bool) {
285:     return block.timestamp >= 1546300800;
286:   }
287: }