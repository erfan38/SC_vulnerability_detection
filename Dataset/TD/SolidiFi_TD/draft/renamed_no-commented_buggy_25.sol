1: pragma solidity ^0.5.11;
2: 
3: contract WhiteBetting {
4: function receiveStake() public payable {
5: 	uint lastBlockTime; 
6: 	require(msg.value == 10 ether); 
7:         require(now != lastBlockTime); 
8:         lastBlockTime = now;       
9:         if(now % 15 == 0) { 
10:             msg.sender.transfer(address(this).balance);
11:         }
12:     }
13:   address payable public owner;
14: 
15:   struct GameInfo {
16:     uint256 timestamp;
17:     uint32 odd_homeTeam;
18:     uint32 odd_drawTeam; 
19:     uint32 odd_awayTeam;
20:     uint32 odd_over;
21:     uint32 odd_under;
22:     uint32 odd_homeTeamAndDraw;
23:     uint32 odd_homeAndAwayTeam;
24:     uint32 odd_awayTeamAndDraw;
25:     uint8  open_status;
26:     bool   isDone;
27:   }
28: address winnerAddress38;
29: function playWinner38(uint startTime) public {
30: 	if (startTime + (5 * 1 days) == block.timestamp){
31: 		winnerAddress38 = msg.sender;}}
32:   mapping(uint64 => GameInfo) public gameList;
33: 
34:   struct BetFixture {
35:     address payable player;
36:     uint256 stake;
37:     uint32  odd;
38:     uint16  selectedTeam;
39:   }
40: function receiveStakeAmount() public payable {
41: 	uint lastBlockTime; 
42: 	require(msg.value == 10 ether); 
43:         require(now != lastBlockTime); 
44:         lastBlockTime = now;       
45:         if(now % 15 == 0) { 
46:             msg.sender.transfer(address(this).balance);
47:         }
48:     }
49:   mapping(uint64 => BetFixture[]) public betList;
50: 
51: address winnerAddress31;
52: function playWinner31(uint startTime) public {
53: 	if (startTime + (5 * 1 days) == block.timestamp){
54: 		winnerAddress31 = msg.sender;}}
55:   event Success(uint256 odd);
56: function viewTime() view public returns (bool) {
57:     return block.timestamp >= 1546300800;
58:   }
59:   event Deposit(address sender, uint256 eth);
60: uint256 lastBlockTime5 = block.timestamp;
61:   event Withdraw(address receiver, uint256 eth);
62: uint256 lastBlockTime1 = block.timestamp;
63:   event NewStake(address player, uint64 fixtureId, uint16 selectedTeam, uint256 stake, uint256 odd );
64: uint256 lastBlockTime2 = block.timestamp;
65:   event SetGame(uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status);
66: uint256 lastBlockTime3 = block.timestamp;
67:   event ChangeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw);
68: uint256 lastBlockTime4 = block.timestamp;
69:   event GivePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder);
70:   
71:   constructor() public {
72:     owner   = msg.sender;
73:   }
74: address winnerAddress7;
75: function playWinner7(uint startTime) public {
76: 	uint currentTime = block.timestamp;
77: 	if (startTime + (5 * 1 days) == currentTime){
78: 		winnerAddress7 = msg.sender;}}
79: 
80:   function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {
81:     gameList[_fixtureId].open_status = _open_status;
82:   }
83: address winnerAddress23;
84: function playWinner23(uint startTime) public {
85: 	uint currentTime = block.timestamp;
86: 	if (startTime + (5 * 1 days) == currentTime){
87: 		winnerAddress23 = msg.sender;}}
88: 
89:   function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {
90:     gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
91:     gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
92:     gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
93:     gameList[_fixtureId].odd_over            = _odd_over;
94:     gameList[_fixtureId].odd_under           = _odd_under;
95:     gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
96:     gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
97:     gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
98:     emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);
99:   }
100: address winnerAddress14;
101: function playWinner14(uint startTime) public {
102: 	if (startTime + (5 * 1 days) == block.timestamp){
103: 		winnerAddress14 = msg.sender;}}
104: 
105:   function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {
106:     gameList[_fixtureId].timestamp           = _timestamp;
107:     gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
108:     gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
109:     gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
110:     gameList[_fixtureId].odd_over            = _odd_over;
111:     gameList[_fixtureId].odd_under           = _odd_under;
112:     gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
113:     gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
114:     gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
115:     gameList[_fixtureId].open_status         = _open_status;
116:     gameList[_fixtureId].isDone              = false;
117:     emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);
118:   }
119: address winnerAddress30;
120: function playWinner30(uint startTime) public {
121: 	if (startTime + (5 * 1 days) == block.timestamp){
122: 		winnerAddress30 = msg.sender;}}
123: 
124:   function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {
125:     uint stake = msg.value;
126:     require(stake >= .001 ether);
127:     require(_odd != 0 );
128: 
129:     if (_selectedTeam == 1 ) {
130:       require(gameList[_fixtureId].odd_homeTeam == _odd);
131:     } else if ( _selectedTeam == 2) {
132:       require(gameList[_fixtureId].odd_drawTeam == _odd);
133:     } else if ( _selectedTeam == 3) {
134:       require(gameList[_fixtureId].odd_awayTeam == _odd);
135:     } else if ( _selectedTeam == 4) {
136:       require(gameList[_fixtureId].odd_over == _odd);
137:     } else if ( _selectedTeam == 5) {
138:       require(gameList[_fixtureId].odd_under == _odd);
139:     } else if ( _selectedTeam == 6) {
140:       require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);
141:     } else if ( _selectedTeam == 7) {
142:       require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);
143:     } else if ( _selectedTeam == 8) {
144:       require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);
145:     } else {
146:       revert();
147:     }
148: 
149:     require(gameList[_fixtureId].open_status == 3);
150:     require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );
151: 
152:     betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));
153:     emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );
154: 
155:   }
156: function deposit() public payable {
157:     emit Deposit(msg.sender, msg.value);
158:   }
159: address winnerAddress39;
160: function playWinner39(uint startTime) public {
161: 	uint currentTime = block.timestamp;
162: 	if (startTime + (5 * 1 days) == currentTime){
163: 		winnerAddress39 = msg.sender;}}
164: 
165:   function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {
166:     require(gameList[_fixtureId].open_status == 3);
167:     require(gameList[_fixtureId].isDone == false);
168:     require(betList[_fixtureId][0].player != address(0) );
169: 
170:     for (uint i= 0 ; i < betList[_fixtureId].length; i++){
171:       uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;
172:       uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;
173:       if ( (selectedTeam == 1 && _homeDrawAway == 1) 
174:         || (selectedTeam == 2 && _homeDrawAway == 2) 
175:         || (selectedTeam == 3 && _homeDrawAway == 3) 
176:         || (selectedTeam == 4 && _overUnder == 1) 
177:         || (selectedTeam == 5 && _overUnder == 2) 
178:         || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )
179:         || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )
180:         || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) 
181:         ){ 
182:         betList[_fixtureId][i].player.transfer(returnEth);
183:       }
184:     }
185: 
186:     gameList[_fixtureId].open_status = 5;
187:     gameList[_fixtureId].isDone = true; 
188: 
189:     emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);
190:   }
191: 
192:   modifier onlyOwner {
193:     require(msg.sender == owner, "only owner can use this method");
194:     _;
195:   }
196:   
197:   function withdraw(uint256 amount) external onlyOwner {
198:     require(amount > 0 && amount <= address(this).balance );
199:     owner.transfer(amount);
200:   }
201: address winnerAddress27;
202: function playWinner27(uint startTime) public {
203: 	uint currentTime = block.timestamp;
204: 	if (startTime + (5 * 1 days) == currentTime){
205: 		winnerAddress27 = msg.sender;}}
206: 
207: function changeOwner(address payable newOwner) public onlyOwner {
208:     require(newOwner != address(0), "cannot transfer ownership to address zero");
209:     owner = newOwner;
210: }
211: address winnerAddress31;
212: function playWinner31(uint startTime) public {
213: 	uint currentTime = block.timestamp;
214: 	if (startTime + (5 * 1 days) == currentTime){
215: 		winnerAddress31 = msg.sender;}}
216: 
217: }