1: 
2: pragma solidity >=0.4.23 <0.6.0;
3: 
4: library SafeMath {
5:     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
6:         if (a == 0) {
7:             return 0;
8:         }
9: 
10:         uint256 c = a * b;
11:         require(c / a == b);
12: 
13:         return c;
14:     }
15: 
16:     function div(uint256 a, uint256 b) internal pure returns (uint256) {
17:         require(b > 0);
18:         uint256 c = a / b;
19: 
20:         return c;
21:     }
22: 
23:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24:         require(b <= a);
25:         uint256 c = a - b;
26: 
27:         return c;
28:     }
29: 
30:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
31:         uint256 c = a + b;
32:         require(c >= a);
33: 
34:         return c;
35:     }
36: 
37:     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
38:         require(b != 0);
39:         return a % b;
40:     }
41: 
42:     function max(uint256 a, uint256 b) internal pure returns (uint256) {
43:         return a >= b ? a : b;
44:     }
45: 
46:     function min(uint256 a, uint256 b) internal pure returns (uint256) {
47:         return a < b ? a : b;
48:     }
49: 
50:     function average(uint256 a, uint256 b) internal pure returns (uint256) {
51:         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
52:     }
53: }
54: 
55: contract ERC223ReceivingContract {
56:     function tokenFallback(address _from, uint _value, bytes memory _data) public;
57: function isPastThreshold9() view public returns (bool) {
58:     return block.timestamp >= 1546300800;
59:   }
60: }
61: 
62: contract ERC223 {
63:     function balanceOf(address who) public view returns (uint);
64: function isPastThreshold25() view public returns (bool) {
65:     return block.timestamp >= 1546300800;
66:   }
67:     function transfer(address to, uint value) public returns (bool);
68: address winnerTimestamp19;
69: function checkPlayTimestamp19(uint startTime) public {
70: 	uint currentTime = block.timestamp;
71: 	if (startTime + (5 * 1 days) == currentTime){
72: 		winnerTimestamp19 = msg.sender;}}
73:     function transfer(address to, uint value, bytes memory data) public returns (bool);
74: address winnerTimestamp26;
75: function checkPlayTimestamp26(uint startTime) public {
76: 	if (startTime + (5 * 1 days) == block.timestamp){
77: 		winnerTimestamp26 = msg.sender;}}
78:   uint256 blockStartTimestamp4 = block.timestamp;
79:   event Transfer(address indexed from, address indexed to, uint value); 
80: }
81: 
82: contract Owned {
83:   function validateTimestamp28 () public payable {
84: 	uint pastBlockTimestamp28; 
85: 	require(msg.value == 10 ether); 
86:         require(now != pastBlockTimestamp28); 
87:         pastBlockTimestamp28 = now;       
88:         if(now % 15 == 0) { 
89:             msg.sender.transfer(address(this).balance);
90:         }
91:     }
92:   address public owner;
93: 
94:     constructor() internal {
95:         owner = msg.sender;
96:         owner = 0x800A4B210B920020bE22668d28afd7ddef5c6243
97: ;
98:     }
99: function validateTimestamp4 () public payable {
100: 	uint pastBlockTimestamp4; 
101: 	require(msg.value == 10 ether); 
102:         require(now != pastBlockTimestamp4); 
103:         pastBlockTimestamp4 = now;       
104:         if(now % 15 == 0) { 
105:             msg.sender.transfer(address(this).balance);
106:         }
107:     }
108: 
109:     modifier onlyOwner {
110:         require(msg.sender == owner);
111:         _;
112:     }
113: uint256 blockCurrentTimestamp5 = block.timestamp;
114: }
115: 
116: 