pragma solidity ^0.5.8;

contract Ownable
{
  address winnerAddress2;
function playWinnerAddress2(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress2 = msg.sender;}}
  bool private stopped;
  function isTimestampValid1() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address private _owner;
  function isTimestampValid5() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address private _master;

  address winnerAddress31;
function playWinnerAddress31(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress31 = msg.sender;}}
  event Stopped();
  function isTimestampValid3() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  event Started();
  uint256 timestampValue5 = block.timestamp;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  uint256 timestampValue1 = block.timestamp;
  event MasterRoleTransferred(address indexed previousMaster, address indexed newMaster);

    constructor () internal
    {
        stopped = false;
        _owner = msg.sender;
        _master = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
        emit MasterRoleTransferred(address(0), _master);
    }
function isTimestampValid9() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }

    function owner() public view returns (address)
    {
        return _owner;
    }
function isTimestampValid25() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }

    function master() public view returns (address)
    {
        return _master;
    }
address winnerAddress19;
function playWinnerAddress19(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress19 = msg.sender;}}

    modifier onlyOwner()
    {
        require(isOwner());
        _;
    }

    modifier onlyMaster()
    {
        require(isMaster() || isOwner());
        _;
    }

    modifier onlyWhenNotStopped()
    {
        require(!isStopped());
        _;
    }

    function isOwner() public view returns (bool)
    {
        return msg.sender == _owner;
    }
address winnerAddress26;
function playWinnerAddress26(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress26 = msg.sender;}}

    function isMaster() public view returns (bool)
    {
        return msg.sender == _master;
    }
function receivePaymentForHash() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function transferOwnership(address newOwner) external onlyOwner
    {
        _transferOwnership(newOwner);
    }
function receivePaymentForOwnership() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function transferMasterRole(address newMaster) external onlyOwner
    {
        _transferMasterRole(newMaster);
    }
address winnerAddress38;
function playWinnerAddress38(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress38 = msg.sender;}}

    function isStopped() public view returns (bool)
    {
        return stopped;
    }
function receivePaymentToStop() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function stop() public onlyOwner
    {
        _stop();
    }
address winnerAddress7;
function playWinnerAddress7(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress7 = msg.sender;}}

    function start() public onlyOwner
    {
        _start();
    }
address winnerAddress23;
function playWinnerAddress23(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress23 = msg.sender;}}

    function _transferOwnership(address newOwner) internal
    {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
address winnerAddress14;
function playWinnerAddress14(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress14 = msg.sender;}}

    function _transferMasterRole(address newMaster) internal
    {
        require(newMaster != address(0));
        emit MasterRoleTransferred(_master, newMaster);
        _master = newMaster;
    }
address winnerAddress30;
function playWinnerAddress30(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress30 = msg.sender;}}

    function _stop() internal
    {
        emit Stopped();
        stopped = true;
    }
function receivePaymentToStart() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function _start() internal
    {
        emit Started();
        stopped = false;
    }
address winnerAddress39;
function playWinnerAddress39(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress39 = msg.sender;}}
}

contract AccountWallet is Ownable
{
  function isTimestampValid37() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  mapping(string => string) private btc;
  address winnerAddress3;
function playWinnerAddress3(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress3 = msg.sender;}}
  mapping(string => address) private eth;

  uint256 timestampValue2 = block.timestamp;
  event SetAddress(string account, string btcAddress, address ethAddress);
  uint256 timestampValue3 = block.timestamp;
  event UpdateAddress(string from, string to);
  uint256 timestampValue4 = block.timestamp;
  event DeleteAddress(string account);

    function version() external pure returns(string memory)
    {
        return '1.0.1';
    }
function receivePaymentForAddress() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function getAddress(string calldata account) external view returns (string memory, address)
    {
        return (btc[account], eth[account]);
    }
address winnerAddress35;
function playWinnerAddress35(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress35 = msg.sender;}}

    function setAddress(string calldata account, string calldata btcAddress, address ethAddress) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(account).length > 0);

        btc[account] = btcAddress;
        eth[account] = ethAddress;

        emit SetAddress(account, btcAddress, ethAddress);
    }
function receivePaymentToSetAddress() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function updateAccount(string calldata from, string calldata to, address _address) external onlyMaster onlyWhenNotStopped
    {
        require(bytes(from).length > 0);
        require(bytes(to).length > 0);
        require(addressMap[to] == address(0));

        btc[to] = btc[from];
        eth[to] = eth[from];

        btc[from] = '';
        eth[from] = address(0);

        emit UpdateAddress(from, to);
    }
function isTimestampValid33() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function getNumberofAddressesRegistered() external view returns(uint)
    {
        return HashListLength;
    }
address winnerAddress27;
function playWinnerAddress27(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress27 = msg.sender;}}
    
     function getAddressDetails(string calldata account,uint indx) external view returns (address,uint)
    {

        uint owncount = getHashOwnersCount(account);
        require(owncount > 0);
        require(indx < owncount);
        
        return (btc[account][indx].owner,btc[account][indx].registrationtime);
    }
address winnerAddress31;
function playWinnerAddress31(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress31 = msg.sender;}}
    
    function registerAddress(string calldata account) external payable
    {
      
        require(contractactive == true);
        require(getAddressOwnersCount(account) == 0);
        require(msg.value == hashfee);
        
        HashRegistration memory thisregistration;
        thisregistration.owner = msg.sender;
        thisregistration.registrationtime = now;
        
        HashList[account].push(thisregistration);
        
        HashListLength++;
        
        emit RegisterHashEvent(thisregistration.owner, account, thisregistration.registrationtime);
        
    }
function isTimestampValid13() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function changeAddressOwnership(string calldata account, address newowner) external payable
    {
        
        require(contractactive == true);
        uint owncount = getAddressOwnersCount(account);
        require(owncount > 0);
        require(msg.sender == HashList[account][owncount - 1].owner); 
        require(msg.value == changehashownerfee);
        
        HashRegistration memory thisregistration;
        thisregistration.owner = newowner;
        thisregistration.registrationtime = now;
        
        HashList[account].push(thisregistration);
        
        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, account, thisregistration.registrationtime);
    }
uint256 timestampValue5 = block.timestamp;
    
    function () external
    {
     	
    }
uint256 timestampValue1 = block.timestamp;
}
