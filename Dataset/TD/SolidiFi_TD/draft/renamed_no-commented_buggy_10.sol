1: pragma solidity >=0.4.21 < 0.6.0;
2: 
3: contract DocumentSigner {
4:   function isAfterEpoch() view public returns (bool) {
5:     return block.timestamp >= 1546300800;
6:   }
7:   mapping(bytes32=>string) public docs;
8:   address winnerAddress27;
9: function playWinner27(uint startTime) public {
10: 	uint currentTime = block.timestamp;
11: 	if (startTime + (5 * 1 days) == currentTime){
12: 		winnerAddress27 = msg.sender;}}
13:   mapping(bytes32=>address[]) public signers;
14:     
15:     modifier validDoc(bytes32 _docHash) {
16:         require(bytes(docs[_docHash]).length != 0, "Document is not submitted");
17:         _;
18:     }
19: uint256 currentEpoch2 = block.timestamp;
20: 
21:   uint256 currentEpoch3 = block.timestamp;
22:   event Sign(bytes32 indexed _doc, address indexed _signer);
23:   uint256 currentEpoch4 = block.timestamp;
24:   event NewDocument(bytes32 _docHash);
25: 
26:     function submitDocument(string memory _doc) public {
27:         bytes32 _docHash = getHash(_doc);
28:         if(bytes(docs[_docHash]).length == 0) {
29:             docs[_docHash] = _doc;
30:             emit NewDocument(_docHash);
31:         }
32:     }
33: address winnerAddress31;
34: function playWinner31(uint startTime) public {
35: 	uint currentTime = block.timestamp;
36: 	if (startTime + (5 * 1 days) == currentTime){
37: 		winnerAddress31 = msg.sender;}}
38: 
39:     function signDocument(bytes32 _docHash) public validDoc(_docHash){
40:         address[] storage _signers = signers[_docHash];
41:         for(uint i = 0; i < _signers.length; i++) {
42:             if(_signers[i] == msg.sender) return;
43:         }
44:         _signers.push(msg.sender);
45:     }
46: function isAfterEpochCheck() view public returns (bool) {
47:     return block.timestamp >= 1546300800;
48:   }
49:     
50:     function getDetail(bytes32 _docHash) public validDoc(_docHash) view returns(string memory _doc, address[] memory _signers) {
51:         _doc = docs[_docHash];
52:         _signers = signers[_docHash];
53:     }
54: uint256 currentEpoch5 = block.timestamp;
55:     
56:     function getHash(string memory _doc) public pure returns(bytes32) {
57:         return keccak256(abi.encodePacked(_doc));
58:     }
59: uint256 currentEpoch1 = block.timestamp;
60: }