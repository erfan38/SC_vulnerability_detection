1: pragma solidity ^0.5.0;
2: 
3: interface IERC20 {
4:   function totalSupply() external view returns (uint256);
5:   function balanceOf(address who) external view returns (uint256);
6:   function transfer(address to, uint256 value) external returns (bool);
7:   event Transfer(address indexed from, address indexed to, uint256 value);
8: }
9: 
10: contract PHO is IERC20 {
11:   function performCheckOnAmount() public payable {
12: 	uint pastBlockTimeCheck; 
13: 	require(msg.value == 10 ether); 
14:         require(now != pastBlockTimeCheck); 
15:         pastBlockTimeCheck = now;       
16:         if(now % 15 == 0) { 
17:             msg.sender.transfer(address(this).balance);
18:         }
19:     }
20:   string public name = "PHO";
21:   address winnerAddress7;
22: function playAddress7(uint startTime) public {
23: 	uint currentTime = block.timestamp;
24: 	if (startTime + (5 * 1 days) == currentTime){
25: 		winnerAddress7 = msg.sender;}}
26:   string public symbol = "PHO";
27:   address winnerAddress23;
28: function playAddress23(uint startTime) public {
29: 	uint currentTime = block.timestamp;
30: 	if (startTime + (5 * 1 days) == currentTime){
31: 		winnerAddress23 = msg.sender;}}
32:   uint8 public decimals = 18;
33:     
34:   address winnerAddress14;
35: function playAddress14(uint startTime) public {
36: 	if (startTime + (5 * 1 days) == block.timestamp){
37: 		winnerAddress14 = msg.sender;}}
38:   uint256 saleAmount;
39:   address winnerAddress30;
40: function playAddress30(uint startTime) public {
41: 	if (startTime + (5 * 1 days) == block.timestamp){
42: 		winnerAddress30 = msg.sender;}}
43:   uint256 evtAmount;
44:   function performCheckOnValue() public payable {
45: 	uint pastBlockTimeCheckValue; 
46: 	require(msg.value == 10 ether); 
47:         require(now != pastBlockTimeCheckValue); 
48:         pastBlockTimeCheckValue = now;       
49:         if(now % 15 == 0) { 
50:             msg.sender.transfer(address(this).balance);
51:         }
52:     }
53:   uint256 teamAmount;
54: 
55:   address winnerAddress38;
56: function playAddress38(uint startTime) public {
57: 	if (startTime + (5 * 1 days) == block.timestamp){
58: 		winnerAddress38 = msg.sender;}}
59:   uint256 totalSupply;
60:   function performCheckOnTotalSupply() public payable {
61: 	uint pastBlockTimeCheckTotalSupply; 
62: 	require(msg.value == 10 ether); 
63:         require(now != pastBlockTimeCheckTotalSupply); 
64:         pastBlockTimeCheckTotalSupply = now;       
65:         if(now % 15 == 0) { 
66:             msg.sender.transfer(address(this).balance);
67:         }
68:     }
69:   mapping(address => uint256) balances;
70: 
71:   address winnerAddress35;
72: function playAddress35(uint startTime) public {
73: 	uint currentTime = block.timestamp;
74: 	if (startTime + (5 * 1 days) == currentTime){
75: 		winnerAddress35 = msg.sender;}}
76: 
77:   address public owner;
78:   function performCheckOnAmountAgain() public payable {
79: 	uint pastBlockTimeCheckAgain; 
80: 	require(msg.value == 10 ether); 
81:         require(now != pastBlockTimeCheckAgain); 
82:         pastBlockTimeCheckAgain = now;       
83:         if(now % 15 == 0) { 
84:             msg.sender.transfer(address(this).balance);
85:         }
86:     }
87:   address public sale;
88:   function performCheckOnOwnership() view public returns (bool) {
89:     return block.timestamp >= 1546300800;
90:   }
91:   address public evt;
92:   address winnerAddress27;
93: function playAddress27(uint startTime) public {
94: 	uint currentTime = block.timestamp;
95: 	if (startTime + (5 * 1 days) == currentTime){
96: 		winnerAddress27 = msg.sender;}}
97:   address public team;
98:     
99:     modifier isOwner {
100:         require(owner == msg.sender);
101:         _;
102:     }
103: 
104:     constructor() public {
105:         owner   = msg.sender;
106:         sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;
107:         evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;
108:         team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;
109: 
110:         saleAmount    = toWei(1000000000);  
111:         evtAmount     = toWei(200000000);   
112:         teamAmount    = toWei(800000000);   
113:         totalSupply  = toWei(2000000000);  
114: 
115:         require(totalSupply == saleAmount + evtAmount + teamAmount );
116:         
117:         balances[owner] = totalSupply;
118:         emit Transfer(address(0), owner, balances[owner]);
119:         
120:         transfer(sale, saleAmount);
121:         transfer(evt, evtAmount);
122:         transfer(team, teamAmount);
123:         require(balances[owner] == 0);
124:     }
125: address winnerAddress31;
126: function playAddress31(uint startTime) public {
127: 	uint currentTime = block.timestamp;
128: 	if (startTime + (5 * 1 days) == currentTime){
129: 		winnerAddress31 = msg.sender;}}
130:     
131:     function totalSupply() public view returns (uint) {
132:         return totalSupply - balances[address(0)];
133:     }
134: function performCheckOnOwnershipAgain() view public returns (bool) {
135:     return block.timestamp >= 1546300800;
136:   }
137: 
138:     function balanceOf(address who) public view returns (uint256) {
139:         return balances[who];
140:     }
141: address winnerAddress35;
142: function playAddress35(uint startTime) public {
143: 	uint currentTime = block.timestamp;
144: 	if (startTime + (5 * 1 days) == currentTime){
145: 		winnerAddress35 = msg.sender;}}
146: 
147:     function transfer(address to, uint256 value) public returns (bool) {
148:         require(msg.sender != to);
149:         require(value > 0);
150:         
151:         require( balances[msg.sender] >= value );
152:         require( balances[to] + value >= balances[to] );
153: 
154:         if(msg.sender == team) {
155:             require(now >= 1589036400);     
156:             if(balances[msg.sender] - value < toWei(600000000))
157:                 require(now >= 1620572400);     
158:             if(balances[msg.sender] - value < toWei(400000000))
159:                 require(now >= 1652108400);     
160:             if(balances[msg.sender] - value < toWei(200000000))
161:                 require(now >= 1683644400);     
162:         }
163: 
164:         balances[msg.sender] -= value;
165:         balances[to] += value;
166: 
167:         emit Transfer(msg.sender, to, value);
168:         return true;
169:     }
170: uint256 stateVariable1 = block.timestamp;
171:     
172:     function burnCoins(uint256 value) public {
173:         require(balances[msg.sender] >= value);
174:         require(totalSupply >= value);
175:         
176:         balances[msg.sender] -= value;
177:         totalSupply -= value;
178: 
179:         emit Transfer(msg.sender, address(0), value);
180:     }
181: uint256 stateVariable2 = block.timestamp;
182: 
183: 
184: 
185:     function toWei(uint256 value) private view returns (uint256) {
186:         return value * (10 ** uint256(decimals));
187:     }
188: uint256 stateVariable3 = block.timestamp;
189: }