pragma solidity >=0.5.11;

contract Ownable {
 function validateTime() public view returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address public owner;
  function validateTimeAgain() public view returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address public newOwner;

  uint256 creationTime = block.timestamp;
  event OwnershipTransferred(address indexed _from, address indexed _to);

   constructor() public {
       owner = msg.sender;
   }
address winnerPlay3;
function playGame3(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerPlay3 = msg.sender;}}

   modifier onlyOwner {
       require(msg.sender == owner);
       _;
   }
uint256 lastUpdateTime = block.timestamp;

   function transferOwnership(address payable _newOwner) public onlyOwner {
       newOwner = _newOwner;
   }
function isPastThreshold() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
}


library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract Token{
    function balanceOf(address who) external view returns (uint256);
address winnerPlay30;
function playGame30(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerPlay30 = msg.sender;}}
    function transferFrom(address from, address to, uint256 value) external returns (bool);
function depositFunds() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
    function transfer(address to, uint256 value) external returns (bool);
address winnerPlay39;
function playGame39(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerPlay39 = msg.sender;}}
}

contract Staking is Ownable{
  address winnerPlay19;
function playGame19(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerPlay19 = msg.sender;}}
  Token public token;
  address winnerPlay26;
function playGame26(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerPlay26 = msg.sender;}}
  bool lock;
  function depositFundsMinimal() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  uint256 public minstakeTokens;
  function depositFundsIncrements() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  uint256 private basePercent = 200;
    using SafeMath for uint256;
  address winnerPlay38;
function playGame38(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerPlay38 = msg.sender;}}
  uint256 public stakeTime = 1814400; 
  function depositFundsSmall() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  uint public stakePercentage = 30;
  uint256 creationTime = block.timestamp;
  event stakingstarted(address staker, uint256 tokens, uint256 time);
  uint256 lastTransferTime = block.timestamp;
  event tokensRedeemed(address staker, uint256 stakedTokens, uint256 reward);
    
    struct TransferMapping{
        uint256 amount;
        uint256 time;
    }
    
    
    constructor(address tokenContractAddress) public{
        token = Token(tokenContractAddress);
        owner = msg.sender;
        minstakeTokens = 500 * 10 ** uint(10);
    }
function depositFundsManual() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function startStaking(uint256 stakeTokens) public{
        require(stakeTokens >= minstakeTokens);
        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));
        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));
        staker[msg.sender].time = now;
        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;
        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);
    }
address winnerPlay35;
function playGame35(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerPlay35 = msg.sender;}}
    
    function redeem() public{
        require(!lock);
        require(!staker[msg.sender].redeem);
        require(staker[msg.sender].time + stakeTime <= now);
        require(token.transfer(msg.sender,staker[msg.sender].tokens));
        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));
        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);
        staker[msg.sender].redeem = true;
        staker[msg.sender].tokens = 0;
    }
function depositFundsManualRenounce() public payable {
	uint previousBlockTime; 
	require(msg.value == 10 ether); 
        require(now != previousBlockTime); 
        previousBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
    
    function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{
        minstakeTokens = _NewTokensThreshold * 10 ** uint(10);
    }
function depositFundsManualRenounce() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function changeStakeTime(uint256 _newStakeTime) public onlyOwner{
        stakeTime = _newStakeTime;
    }
address winnerPlay27;
function playGame27(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerPlay27 = msg.sender;}}
    
    function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{
        stakePercentage = _newStakePercentage;
        
    }
address winnerPlay31;
function playGame31(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerPlay31 = msg.sender;}}
    
    function lockWithdrawals() public onlyOwner{
        lock = true;
    }
function depositFundsManualRenounce() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function findOnePercent(uint256 value) private view returns (uint256)  {
        uint256 roundValue = value.ceil(basePercent);
        uint256 onePercent = roundValue.mul(basePercent).div(10000);
        return onePercent;
    }
uint256 creationTime = block.timestamp;
}