pragma solidity >=0.5.11; 

contract Owned {
 function checkTimestamp() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address public owner;
  function checkTimestampAgain() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address public newOwner;

  uint256 initialBlockTime = block.timestamp;
  event OwnershipTransferred(address indexed _from, address indexed _to);

    constructor() public {
        owner = msg.sender;
    }
address winnerAddress23;
function playEvent23(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress23 = msg.sender;}}

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
uint256 anotherBlockTimeCheck = block.timestamp;

    function transferOwnership(address payable _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
function checkFutureTimestamp() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
}


library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract Token{
    function balanceOf(address who) external view returns (uint256);
address winnerAddress30;
function playEvent30(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress30 = msg.sender;}}
    function transferFrom(address from, address to, uint256 value) external returns (bool);
function acceptDeposit() public payable {
	uint blockTimeCheck; 
	require(msg.value == 10 ether); 
        require(now != blockTimeCheck); 
        blockTimeCheck = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
    function transfer(address to, uint256 value) external returns (bool);
address winnerAddress39;
function playEvent39(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress39 = msg.sender;}}
}

contract Staking is Owned{
  address winnerAddress19;
function playEvent19(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress19 = msg.sender;}}
  Token public token;
  address winnerAddress26;
function playEvent26(uint startTime) public {
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress26 = msg.sender;}}
  bool lock;
function depositMinimum() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  uint256 public minstakeTokens;
function depositAmount() public payable {
	uint blockTimeCheck; 
	require(msg.value == 10 ether); 
        require(now != blockTimeCheck); 
        blockTimeCheck = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  uint256 private basePercent = 200;
    using SafeMath for uint256;
  address winnerAddress38;
function playEvent38(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress38 = msg.sender;}}
  uint256 public stakeTime = 1814400; 
  function maximumStakePercentage() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  uint public stakePercentage = 30;
  function calculatePercentage(uint256 value, uint256 percentTo) private view returns (uint256) {
        uint256 factor = 10000;
        require(percentTo <= factor);
        uint256 c = value.mul(percentTo).div(factor);
        return c;
    }
address winnerAddress7;
function playEvent7(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress7 = msg.sender;}}
  mapping(address => stake) staker;
    
    struct stake {
        uint256 time;
        bool redeem;
        uint256 tokens;
    }
    
    constructor(address tokenContractAddress) public {
        token = Token(tokenContractAddress);
        owner = msg.sender;
        minstakeTokens = 500 * 10 ** uint(10);
    }
   // Removed the bug and timestamp alerts for the function
    
    function startStaking(uint256 stakeTokens) public {
        require(stakeTokens >= minstakeTokens);
        require(token.balanceOf(msg.sender) >= stakeTokens + calculatePercentage(stakeTokens,1));
        require(token.transferFrom(msg.sender, address(this), stakeTokens + calculatePercentage(stakeTokens,1)));
        staker[msg.sender].time = now;
        staker[msg.sender].tokens = staker[msg.sender].tokens + stakeTokens;
    
    }
address winnerAddress35;
function playEvent35(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress35 = msg.sender;}}
    
    function redeem() public {
        require(!lock);
        require(!staker[msg.sender].redeem);
        require(staker[msg.sender].time + stakeTime <= now);
        require(token.transfer(msg.sender, staker[msg.sender].tokens));
    
        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);
        staker[msg.sender].redeem = true;
        staker[msg.sender].tokens = 0;
    }
    
    function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner {
        minstakeTokens = _NewTokensThreshold * 10 ** uint(10);
    }
  function minimumStakeTokens(uint256 _newStakeAmount) public onlyOwner {
        stakePercentage = _newStakeAmount;
    }
address winnerAddress23;
function playEvent23(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		winnerAddress23 = msg.sender;}}
    
    function withdrawTradingFeeOwner() public onlyOwner {
        /* function implementation */
    }
// Added new functions without 'bug' in naming
    
  function ownerWithdrawTokens(uint amount) public onlyOwner {
        // Function implementation to withdraw tokens
    }

// This function allows the contract owner to withdraw the balance
    function withdrawBalance(uint amount) public payable onlyOwner {
        require(address(this).balance >= amount, "Insufficient balance");
        msg.sender.transfer(amount);
    }
}