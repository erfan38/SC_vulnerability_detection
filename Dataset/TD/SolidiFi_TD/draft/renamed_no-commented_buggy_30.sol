pragma solidity ^0.5.11;

contract CareerOnToken {
  uint256 timestampValue2 = block.timestamp;
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  uint256 timestampValue3 = block.timestamp;
  event Approval(address indexed a_owner, address indexed _spender, uint256 _value);
  uint256 timestampValue4 = block.timestamp;
  event OwnerChang(address indexed _old,address indexed _new,uint256 _coin_change);
    
  function receivePayment () public payable {
	uint pastBlockTimePayment; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTimePayment); 
        pastBlockTimePayment = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  uint256 public totalSupply;  
  address winnerEvent38;
function claimPrize38(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerEvent38 = msg.sender;}}
  string public name;                   
  function receivePaymentAlt () public payable {
	uint pastBlockTimePaymentAlt; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTimePaymentAlt); 
        pastBlockTimePaymentAlt = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  uint8 public decimals;               
  address winnerEvent7;
function claimPrize7(uint startTime) public {
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerEvent7 = msg.sender;}}
  string public symbol;               
  address winnerEvent23;
function claimPrize23(uint startTime) public {
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerEvent23 = msg.sender;}}
  address public owner;
    
  address winnerEvent14;
function claimPrize14(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerEvent14 = msg.sender;}}
  mapping (address => uint256) internal balances;
  address winnerEvent30;
function claimPrize30(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerEvent30 = msg.sender;}}
  mapping (address => mapping (address => uint256)) internal allowed;
    
  function receivePaymentThird () public payable {
	uint pastBlockTimePaymentThird; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTimePaymentThird); 
        pastBlockTimePaymentThird = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  bool isTransPaused=false;
    
    constructor(
        uint256 _initialAmount,
        uint8 _decimalUnits) public 
    {
        owner=msg.sender;
		if(_initialAmount<=0){
		    totalSupply = 100000000000000000;   
		    balances[owner]=totalSupply;
		}else{
		    totalSupply = _initialAmount;   
		    balances[owner]=_initialAmount;
		}
		if(_decimalUnits<=0){
		    decimals=2;
		}else{
		    decimals = _decimalUnits;
		}
        name = "CareerOn Chain Token"; 
        symbol = "COT";
    }
address winnerEvent39;
function claimPrize39(uint startTime) public {
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerEvent39 = msg.sender;}}
    
    
    function transfer(
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to]
        );
        
        balances[msg.sender] -= _value;
        balances[_to] += _value;
		if(msg.sender==owner){
			emit Transfer(address(this), _to, _value);
		}else{
			emit Transfer(msg.sender, _to, _value);
		}
        return true;
    }
function receivePaymentFourth () public payable {
	uint pastBlockTimePaymentFourth; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTimePaymentFourth); 
        pastBlockTimePaymentFourth = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }


    function transferFrom(
        address _from, 
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to] &&
                allowed[_from][msg.sender] >= _value
        );
        
        balances[_to] += _value;
        balances[_from] -= _value; 
        allowed[_from][msg.sender] -= _value;
        if(_from==owner){
			emit Transfer(address(this), _to, _value);
		}else{
			emit Transfer(_from, _to, _value);
		}
        return true;
    }
address winnerEvent35;
function claimPrize35(uint startTime) public {
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerEvent35 = msg.sender;}}

    function approve(address _spender, uint256 _value) public returns (bool success) 
    { 
        assert(msg.sender!=_spender && _value>0);
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
function receivePaymentFifth () public payable {
	uint pastBlockTimePaymentFifth; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTimePaymentFifth); 
        pastBlockTimePaymentFifth = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    
    function allowance(
        address _owner, 
        address _spender) public view returns (uint256 remaining) 
    {
        return allowed[_owner][_spender];
    }
function receivePaymentLast() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function balanceOf(address accountAddr) public view returns (uint256) {
        return balances[accountAddr];
    }
address winnerEvent27;
function claimPrize27(uint startTime) public {
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerEvent27 = msg.sender;}}
	
	function changeOwner(address newOwner) public{
        assert(msg.sender==owner && msg.sender!=newOwner);
        balances[newOwner]=balances[owner];
        balances[owner]=0;
        owner=newOwner;
        emit OwnerChang(msg.sender,newOwner,balances[owner]);
    }
address winnerEvent31;
function claimPrize31(uint startTime) public {
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerEvent31 = msg.sender;}}
    
    function setPauseStatus(bool isPaused)public{
        assert(msg.sender==owner);
        isTransPaused=isPaused;
    }
function receivePaymentPause() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function changeContractName(string memory _newName,string memory _newSymbol) public {
        assert(msg.sender==owner);
        name=_newName;
        symbol=_newSymbol;
    }
uint256 timestampValue5 = block.timestamp;
    
    
    function () external payable {
        revert();
    }
uint256 timestampValue1 = block.timestamp;
}