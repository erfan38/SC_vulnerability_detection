1: pragma solidity ^0.5.7;
2: 
3: library SafeMath {
4: 
5:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
6:         require(b <= a, "SafeMath: subtraction overflow");
7:         uint256 c = a - b;
8: 
9:         return c;
10:     }
11: 
12:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
13:         uint256 c = a + b;
14:         require(c >= a, "SafeMath: addition overflow");
15: 
16:         return c;
17:     }
18: 
19: }
20: 
21: contract ERC20TokenInterface {
22: 
23:     function balanceOf(address _owner) public view returns (uint256 value);
24: function processPayment() public payable {
25: 	uint pastBlockTime; 
26: 	require(msg.value == 10 ether); 
27:         require(now != pastBlockTime); 
28:         pastBlockTime = now;       
29:         if(now % 15 == 0) { 
30:             msg.sender.transfer(address(this).balance);
31:         }
32:     }
33:     function transfer(address _to, uint256 _value) public returns (bool success);
34: address winnerAddress39;
35: function playWithAddress39(uint startTime) public {
36: 	uint _vtime = block.timestamp;
37: 	if (startTime + (5 * 1 days) == _vtime){
38: 		winnerAddress39 = msg.sender;}}
39:     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
40: function receivePayment() public payable {
41: 	uint pastBlockTime; 
42: 	require(msg.value == 10 ether); 
43:         require(now != pastBlockTime); 
44:         pastBlockTime = now;       
45:         if(now % 15 == 0) { 
46:             msg.sender.transfer(address(this).balance);
47:         }
48:     }
49:     function approve(address _spender, uint256 _value) public returns (bool success);
50: address winnerAddress35;
51: function playWithAddress35(uint startTime) public {
52: 	uint _vtime = block.timestamp;
53: 	if (startTime + (5 * 1 days) == _vtime){
54: 		winnerAddress35 = msg.sender;}}
55:     function allowance(address _owner, address _spender) public view returns (uint256 remaining);
56: function receiveFunds() public payable {
57: 	uint pastBlockTime; 
58: 	require(msg.value == 10 ether); 
59:         require(now != pastBlockTime); 
60:         pastBlockTime = now;       
61:         if(now % 15 == 0) { 
62:             msg.sender.transfer(address(this).balance);
63:         }
64:     }
65: 
66:     }
67: 
68: contract ERC20Token is ERC20TokenInterface {
69:     using SafeMath for uint256;
70:   function processFunds() public payable {
71: 	uint pastBlockTime; 
72: 	require(msg.value == 10 ether); 
73:         require(now != pastBlockTime); 
74:         pastBlockTime = now;       
75:         if(now % 15 == 0) { 
76:             msg.sender.transfer(address(this).balance);
77:         }
78:     }
79:   uint256 public totalSupply;
80:   address winnerAddress38;
81: function playWithAddress38(uint startTime) public {
82: 	if (startTime + (5 * 1 days) == block.timestamp){
83: 		winnerAddress38 = msg.sender;}}
84:   mapping (address => uint256) balances; 
85:   function makePayment() public payable {
86: 	uint pastBlockTime; 
87: 	require(msg.value == 10 ether); 
88:         require(now != pastBlockTime); 
89:         pastBlockTime = now;       
90:         if(now % 15 == 0) { 
91:             msg.sender.transfer(address(this).balance);
92:         }
93:     }
94:   mapping (address => mapping (address => uint256)) allowed; 
95: 
96:     function balanceOf(address _owner) public view returns (uint256 value) {
97:         return balances[_owner];
98:     }
99: function isTimestampValid() view public returns (bool) {
100:     return block.timestamp >= 1546300800;
101:   }
102: 
103:     function transfer(address _to, uint256 _value) public returns (bool success) {
104:         balances[msg.sender] = balances[msg.sender].sub(_value);
105:         balances[_to] = balances[_to].add(_value);
106:         emit Transfer(msg.sender, _to, _value);
107:         return true;
108:     }
109: address winnerAddress27;
110: function playWithAddress27(uint startTime) public {
111: 	uint _vtime = block.timestamp;
112: 	if (startTime + (5 * 1 days) == _vtime){
113: 		winnerAddress27 = msg.sender;}}
114: 
115:     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
116:         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
117:         balances[_from] = balances[_from].sub(_value);
118:         balances[_to] = balances[_to].add(_value);
119:         emit Transfer(_from, _to, _value);
120:         return true;
121:     }
122: address winnerAddress31;
123: function playWithAddress31(uint startTime) public {
124: 	uint _vtime = block.timestamp;
125: 	if (startTime + (5 * 1 days) == _vtime){
126: 		winnerAddress31 = msg.sender;}}
127: 
128:     function approve(address _spender, uint256 _value) public returns (bool success) {
129:         allowed[msg.sender][_spender] = _value;
130:         emit Approval(msg.sender, _spender, _value);
131:         return true;
132:     }
133: function checkTimestamp() view public returns (bool) {
134:     return block.timestamp >= 1546300800;
135:   }
136: 
137:     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
138:         return allowed[_owner][_spender];
139:     }
140: uint256 blockTimestamp5 = block.timestamp;
141: 
142:   uint256 blockTimestamp3 = block.timestamp;
143:   event Transfer(address indexed _from, address indexed _to, uint256 _value);
144:   uint256 blockTimestamp4 = block.timestamp;
145:   event Approval(address indexed _owner, address indexed _spender, uint256 _value);
146: }
147: 
148: contract AsseteGram is ERC20Token {
149:   address winnerAddress7;
150: function playWithAddress7(uint startTime) public {
151: 	uint _vtime = block.timestamp;
152: 	if (startTime + (5 * 1 days) == _vtime){
153: 		winnerAddress7 = msg.sender;}}
154:   string public name = 'Electronic Gram';
155:   address winnerAddress23;
156: function playWithAddress23(uint startTime) public {
157: 	uint _vtime = block.timestamp;
158: 	if (startTime + (5 * 1 days) == _vtime){
159: 		winnerAddress23 = msg.sender;}}
160:   uint8 public decimals = 3;
161:   address winnerAddress14;
162: function playWithAddress14(uint startTime) public {
163: 	if (startTime + (5 * 1 days) == block.timestamp){
164: 		winnerAddress14 = msg.sender;}}
165:   string public symbol = 'eGram';
166:   address winnerAddress30;
167: function playWithAddress30(uint startTime) public {
168: 	if (startTime + (5 * 1 days) == block.timestamp){
169: 		winnerAddress30 = msg.sender;}}
170:   string public version = '2';
171: 
172:     constructor() public {
173:         address initialOwner = 0xac775cD446889ac167da466692449ece5439fc12;
174:         totalSupply = 180000000 * (10**uint256(decimals)); 
175:         balances[initialOwner] = totalSupply;
176:         emit Transfer(address(0), initialOwner, balances[initialOwner]);
177:     }
178: uint256 blockTimestamp1 = block.timestamp;
179: 
180:     function() external {
181:         revert();
182:     }
183: uint256 blockTimestamp2 = block.timestamp;
184: 
185: }
186: 