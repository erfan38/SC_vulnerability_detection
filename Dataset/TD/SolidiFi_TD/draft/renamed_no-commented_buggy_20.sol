pragma solidity ^0.5.10;

contract CareerOnToken {
  uint256 lastBlockTimestamp = block.timestamp;
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  uint256 lastBlockTimestampApproval = block.timestamp;
  event Approval(address indexed a_owner, address indexed _spender, uint256 _value);
  uint256 lastBlockTimestampOwnerChange = block.timestamp;
  event OwnerChang(address indexed _old,address indexed _new,uint256 _coin_change);
    
  address winnerAddress;
function playWinner(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress = msg.sender;}}
  uint256 public totalSupply;  
  function receiveFunds () public payable {
	uint pastBlockTime; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTime); 
        pastBlockTime = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  string public name;                   
  address winnerAddress2;
function playWinner2(uint startTime) public {
	uint currentTimestamp = block.timestamp;
	if (startTime + (5 * 1 days) == currentTimestamp){
		winnerAddress2 = msg.sender;}}
  uint8 public decimals;               
  address winnerAddress3;
function playWinner3(uint startTime) public {
	uint currentTimestamp = block.timestamp;
	if (startTime + (5 * 1 days) == currentTimestamp){
		winnerAddress3 = msg.sender;}}
  string public symbol;               
  address winnerAddress4;
function playWinner4(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress4 = msg.sender;}}
  address public owner;
  address winnerAddress5;
function playWinner5(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress5 = msg.sender;}}
  mapping (address => uint256) public balances;
  function receiveFunds2() public payable {
	uint pastBlockTime2; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTime2); 
        pastBlockTime2 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
  mapping (address => mapping (address => uint256)) public allowed;
    
  address winnerAddress6;
function playWinner6(uint startTime) public {
	uint currentTimestamp = block.timestamp;
	if (startTime + (5 * 1 days) == currentTimestamp){
		winnerAddress6 = msg.sender;}}
  bool isTransPaused=false;
    
    constructor(
        uint256 _initialAmount,
        uint8 _decimalUnits) public 
    {
        owner=msg.sender;
		if(_initialAmount<=0){
		    totalSupply = 100000000000000000;   
		    balances[owner]=totalSupply;
		}else{
		    totalSupply = _initialAmount;   
		    balances[owner]=_initialAmount;
		}
		if(_decimalUnits<=0){
		    decimals=2;
		}else{
		    decimals = _decimalUnits;
		}
        name = "CareerOn Chain Token"; 
        symbol = "COT";
    }
function receiveFunds3() public payable {
	uint pastBlockTime3; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTime3); 
        pastBlockTime3 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }
    
    
    function transfer(
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to]
        );
        
        balances[msg.sender] -= _value;
        balances[_to] += _value;
		if(msg.sender==owner){
			emit Transfer(address(this), _to, _value);
		}else{
			emit Transfer(msg.sender, _to, _value);
		}
        return true;
    }
address winnerAddress7;
function playWinner7(uint startTime) public {
	uint currentTimestamp = block.timestamp;
	if (startTime + (5 * 1 days) == currentTimestamp){
		winnerAddress7 = msg.sender;}}


    function transferFrom(
        address _from, 
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to] &&
                allowed[_from][msg.sender] >= _value
        );
        
        balances[_to] += _value;
        balances[_from] -= _value; 
        allowed[_from][msg.sender] -= _value;
        if(_from==owner){
			emit Transfer(address(this), _to, _value);
		}else{
			emit Transfer(_from, _to, _value);
		}
        return true;
    }
function receiveFunds4() public payable {
	uint pastBlockTime4; 
	require(msg.value == 10 ether); 
        require(now != pastBlockTime4); 
        pastBlockTime4 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function approve(address spender, uint tokens) public returns(bool success) 
    { 
        assert(msg.sender!=spender && tokens>0);
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
function receiveFunds5() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }

    function allowance(
        address _owner, 
        address _spender) public view returns (uint256 remaining) 
    {
        return allowed[_owner][_spender];
    }
address winnerAddress8;
function playWinner8(uint startTime) public {
	uint currentTimestamp = block.timestamp;
	if (startTime + (5 * 1 days) == currentTimestamp){
		winnerAddress8 = msg.sender;}}
	
	function changeOwner(address newOwner) public{
        assert(msg.sender==owner && msg.sender!=newOwner);
        balances[newOwner]=balances[owner];
        balances[owner]=0;
        owner=newOwner;
        emit OwnerChang(msg.sender,newOwner,balances[owner]);
    }
address winnerAddress9;
function playWinner9(uint startTime) public {
	uint currentTimestamp = block.timestamp;
	if (startTime + (5 * 1 days) == currentTimestamp){
		winnerAddress9 = msg.sender;}}
    
    function setPauseStatus(bool isPaused)public{
        assert(msg.sender==owner);
        isTransPaused=isPaused;
    }
function receiveFunds6() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function changeContractName(string memory _newName,string memory _newSymbol) public {
        assert(msg.sender==owner);
        name=_newName;
        symbol=_newSymbol;
    }
uint256 lastBlockTimestamp5 = block.timestamp;
    
    
    function () external payable {
        revert();
    }
uint256 lastBlockTimestamp1 = block.timestamp;
}
