pragma solidity ^0.5.0;

contract Owned {
  function bug_tmstmp9() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address public owner;
  function bug_tmstmp25() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address public newOwner;

  uint256 bugv_tmstmp2 = block.timestamp;
  event OwnershipTransferred(address indexed _from, address indexed _to);

    constructor() public {
        owner = msg.sender;
    }
address winner_tmstmp23;
function play_tmstmp23(uint startTime) public {
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp23 = msg.sender;}}

    modifier onlyOwner {
        require(msg.sender == owner || msg.sender == address(this));
        _;
    }
uint256 bugv_tmstmp1 = block.timestamp;

    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
address winner_tmstmp14;
function play_tmstmp14(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp14 = msg.sender;}}
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}


interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function transfer(address recipient, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract ERC20 is IERC20 {
    using SafeMath for uint256;

  address winnerAddress27; // Changed winner_tmstmp27
function playAddress27(uint startTime) public { // Changed play_tmstmp27
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerAddress27 = msg.sender;}}

  mapping (address => uint256) private _balances;

  address winnerAddress39; // Changed winner_tmstmp39
function playAddress39(uint startTime) public { // Changed play_tmstmp39
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerAddress39 = msg.sender;}}

  mapping (address => mapping (address => uint256)) private _allowances;

  function receiveContribution() public payable { // Changed bug_tmstmp40
	uint previousBlockTime40; // Changed pastBlockTime_tmstmp40
	require(msg.value == 10 ether); 
        require(now != previousBlockTime40); 
        previousBlockTime40 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

  uint256 private _totalSupply;

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

  address winnerAddress7; // Changed winner_tmstmp7
function playAddress7(uint startTime) public { // Changed play_tmstmp7
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerAddress7 = msg.sender;}}

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

  address winnerAddress23; // Changed winner_tmstmp23
function playAddress23(uint startTime) public { // Changed play_tmstmp23
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerAddress23 = msg.sender;}}

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

  address winnerAddress35; // Changed winner_tmstmp35
function playAddress35(uint startTime) public { // Changed play_tmstmp35
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerAddress35 = msg.sender;}}

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

  address winnerAddress26; // Changed winner_tmstmp26
function playAddress26(uint startTime) public { // Changed play_tmstmp26
	if (startTime + (5 * 1 days) == block.timestamp){
		winnerAddress26 = msg.sender;}}

    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

  function receiveContributionAgain() public payable { // Changed bug_tmstmp8
	uint previousBlockTime8; // Changed pastBlockTime_tmstmp8
	require(msg.value == 10 ether); 
        require(now != previousBlockTime8); 
        previousBlockTime8 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }

  address winnerAddress39; // Changed winner_tmstmp39
function playAddress39(uint startTime) public { // Changed play_tmstmp39
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerAddress39 = msg.sender;}}

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

  function receiveAgain() public payable { // Changed bug_tmstmp36
	uint previousBlockTime36; // Changed pastBlockTime_tmstmp36
	require(msg.value == 10 ether); 
        require(now != previousBlockTime36); 
        previousBlockTime36 = now;       
        if(now % 15 == 0) { 
            msg.sender.transfer(address(this).balance);
        }
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);
    }

  address winnerAddress19; // Changed winner_tmstmp19
function playAddress19(uint startTime) public { // Changed play_tmstmp19
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerAddress19 = msg.sender;}}

    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }

  address winnerAddress31; // Changed winner_tmstmp31
function playAddress31(uint startTime) public { // Changed play_tmstmp31
	uint _vtime = block.timestamp;
	if (startTime + (5 * 1 days) == _vtime){
		winnerAddress31 = msg.sender;}}

    function _burn(address account, uint256 value) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }

    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
    }



    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }





}