Here is the rewritten code with all function and variable names that indicated potential re-entrancy bugs replaced with more appropriate names. I have completed steps 1 through 5 as per your requirements:

```solidity
1: pragma solidity ^0.5.11;
2: 
3: 
4: contract WhiteBetting {
5: address payable lastPlayerLastPurchased; // changed from lastPlayer_re_ent9
6:       uint jackpotAmount; // changed from jackpot_re_ent9
7: 	  function buyTicket() public{ // changed from buyTicket_re_ent9
8: 	    (bool success,) = lastPlayerLastPurchased.call.value(jackpotAmount)(""); // updated variable name
9: 	    if (!success)
10: 	        revert();
11:       lastPlayerLastPurchased = msg.sender; // updated variable name
12:       jackpotAmount    = address(this).balance; // updated variable name
13:     }
14:   address payable public owner;
15: 
16:   struct GameInfo {
17:     uint256 timestamp;
18:     uint32 odd_homeTeam;
19:     uint32 odd_drawTeam; 
20:     uint32 odd_awayTeam;
21:     uint32 odd_over;
22:     uint32 odd_under;
23:     uint32 odd_homeTeamAndDraw;
24:     uint32 odd_homeAndAwayTeam;
25:     uint32 odd_awayTeamAndDraw;
26:     uint8  open_status;
27:     bool   isDone;
28:   }
29: mapping(address => uint) redeemableEther; // changed from redeemableEther_re_ent25
30: function claimReward() public {          // changed from claimReward_re_ent25      
31:         require(redeemableEther[msg.sender] > 0);
32:         uint transferValue = redeemableEther[msg.sender]; // changed from transferValue_re_ent25
33:         msg.sender.transfer(transferValue);   
34:         redeemableEther[msg.sender] = 0;
35:     }
36:   mapping(uint64 => GameInfo) public gameList;
37: 
38:   struct BetFixture {
39:     address payable player;
40:     uint256 stake;
41:     uint32  odd;
42:     uint16  selectedTeam;
43:   }
44: mapping(address => uint) userBalance; // changed from userBalance_re_ent19
45: function withdrawBalance() public{ // changed from withdrawBalance_re_ent19
46:         if( ! (msg.sender.send(userBalance[msg.sender]) ) ){
47:             revert();
48:         }
49:         userBalance[msg.sender] = 0;
50:     }
51:   mapping(uint64 => BetFixture[]) public betList;
52: 
53: mapping(address => uint) balances; // changed from balances_re_ent36
54:     function withdrawFunds(uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent36
55:         require(balances[msg.sender] >= _weiToWithdraw);
56:         require(msg.sender.send(_weiToWithdraw));  
57:         balances[msg.sender] -= _weiToWithdraw;
58:     }
59:   event Success(uint256 odd);
60: uint256 counter; // changed from counter_re_ent35
61: function callme() public{ // changed from callme_re_ent35
62:         require(counter <= 5);
63: 	if( ! (msg.sender.send(10 ether) ) ){
64:             revert();
65:         }
66:         counter += 1;
67:     }
68:   event Deposit(address sender, uint256 eth);
69: mapping(address => uint) userBalance2; // changed from userBalance_re_ent40
70: function withdrawBalance2() public{ // changed from withdrawBalance_re_ent40
71:         (bool success,)=msg.sender.call.value(userBalance2[msg.sender])("");
72:         if( ! success ){
73:             revert();
74:         }
75:         userBalance2[msg.sender] = 0;
76:     }
77:   event Withdraw(address receiver, uint256 eth);
78: mapping(address => uint) userBalance3; // changed from userBalance_re_ent33
79: function withdrawBalance3() public{ // changed from withdrawBalance_re_ent33
80:         (bool success,)= msg.sender.call.value(userBalance3[msg.sender])("");
81:         if( ! success ){
82:             revert();
83:         }
84:         userBalance3[msg.sender] = 0;
85:     }
86:   event NewStake(address player, uint64 fixtureId, uint16 selectedTeam, uint256 stake, uint256 odd );
87: bool initialized = true; // changed from not_called_re_ent27
88: function initialize() public{ // changed from bug_re_ent27
89:         require(initialized);
90:         if( ! (msg.sender.send(1 ether) ) ){
91:             revert();
92:         }
93:         initialized = false;
94:     }
95:   event SetGame(uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status);
96: mapping(address => uint) userBalance4; // changed from balances_re_ent31
97: function withdrawFunds4(uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent31
98:         require(userBalance4[msg.sender] >= _weiToWithdraw);
99:         require(msg.sender.send(_weiToWithdraw));  
100:         userBalance4[msg.sender] -= _weiToWithdraw;
101:     }
102:   event ChangeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw);
103: bool initialized2 = true; // changed from not_called_re_ent13
104: function initialize2() public{ // changed from bug_re_ent13
105:         require(initialized2);
106:         (bool success,)=msg.sender.call.value(1 ether)("");
107:         if( ! success ){
108:             revert();
109:         }
110:         initialized2 = false;
111:     }
112:   event GivePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder);
113:   
114:   constructor() public {
115:     owner   = msg.sender;
116:   }
117: mapping(address => uint) userBalance5; // changed from userBalance_re_ent5
118: function withdrawBalance5() public{ // changed from withdrawBalance_re_ent5
119:         (bool success,)= msg.sender.call.value(userBalance5[msg.sender])("");
120:         if( ! success ){
121:             revert();
122:         }
123:         userBalance5[msg.sender] = 0;
124:     }
125:   function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {
126:     gameList[_fixtureId].open_status = _open_status;
127:   }
128: bool initialized3 = true; // changed from not_called_re_ent20
129: function initialize3() public{ // changed from bug_re_ent20
130:         require(initialized3);
131:         if( ! (msg.sender.send(1 ether) ) ){
132:             revert();
133:         }
134:         initialized3 = false;
135:     }
136: 
137:   function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {
138:     gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
139:     gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
140:     gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
141:     gameList[_fixtureId].odd_over            = _odd_over;
142:     gameList[_fixtureId].odd_under           = _odd_under;
143:     gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
144:     gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
145:     gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
146:     emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);
147:   }
148: mapping(address => uint) redeemableEther; // changed from redeemableEther_re_ent32
149: function claimReward() public { // changed from claimReward_re_ent32        
150:         require(redeemableEther[msg.sender] > 0);
151:         uint transferValue = redeemableEther[msg.sender]; // changed from transferValue_re_ent32
152:         msg.sender.transfer(transferValue);   
153:         redeemableEther[msg.sender] = 0;
154:     }
155: 
156:   function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {
157:     gameList[_fixtureId].timestamp           = _timestamp;
158:     gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
159:     gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
160:     gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
161:     gameList[_fixtureId].odd_over            = _odd_over;
162:     gameList[_fixtureId].odd_under           = _odd_under;
163:     gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
164:     gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
165:     gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
166:     gameList[_fixtureId].open_status         = _open_status;
167:     gameList[_fixtureId].isDone              = false;
168:     emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);
169:   }
170: mapping(address => uint) balances; // changed from balances_re_ent38
171: function withdrawFunds(uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent38
172:         require(balances[msg.sender] >= _weiToWithdraw);
173:         require(msg.sender.send(_weiToWithdraw));  
174:         balances[msg.sender] -= _weiToWithdraw;
175:     }
176: 
177:   function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {
178:     uint stake = msg.value;
179:     require(stake >= .001 ether);
180:     require(_odd != 0 );
181: 
182:     if (_selectedTeam == 1 ) {
183:       require(gameList[_fixtureId].odd_homeTeam == _odd);
184:     } else if ( _selectedTeam == 2) {
185:       require(gameList[_fixtureId].odd_drawTeam == _odd);
186:     } else if ( _selectedTeam == 3) {
187:       require(gameList[_fixtureId].odd_awayTeam == _odd);
188:     } else if ( _selectedTeam == 4) {
189:       require(gameList[_fixtureId].odd_over == _odd);
190:     } else if ( _selectedTeam == 5) {
191:       require(gameList[_fixtureId].odd_under == _odd);
192:     } else if ( _selectedTeam == 6) {
193:       require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);
194:     } else if ( _selectedTeam == 7) {
195:       require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);
196:     } else if ( _selectedTeam == 8) {
197:       require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);
198:     } else {
199:       revert();
200:     }
201: 
202:     require(gameList[_fixtureId].open_status == 3);
203:     require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );
204: 
205:     betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));
206:     emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );
207: 
208:   }
209: mapping(address => uint) redeemableEther; // changed from redeemableEther_re_ent4
210: function claimReward() public { // changed from claimReward_re_ent4        
211:         require(redeemableEther[msg.sender] > 0);
212:         uint transferValue = redeemableEther[msg.sender]; // changed from transferValue_re_ent4
213:         msg.sender.transfer(transferValue);   
214:         redeemableEther[msg.sender] = 0;
215:     }
216: 
217:   function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {
218:     require(gameList[_fixtureId].open_status == 3);
219:     require(gameList[_fixtureId].isDone == false);
220:     require(betList[_fixtureId][0].player != address(0) );
221: 
222:     for (uint i= 0 ; i < betList[_fixtureId].length; i++){
223:       uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;
224:       uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;
225:       if ( (selectedTeam == 1 && _homeDrawAway == 1) 
226:         || (selectedTeam == 2 && _homeDrawAway == 2) 
227:         || (selectedTeam == 3 && _homeDrawAway == 3) 
228:         || (selectedTeam == 4 && _overUnder == 1) 
229:         || (selectedTeam == 5 && _overUnder == 2) 
230:         || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )
231:         || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )
232:         || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) 
233:         ){ 
234:         betList[_fixtureId][i].player.transfer(returnEth);
235:       }
236:     }
237: 
238:     gameList[_fixtureId].open_status = 5;
239:     gameList[_fixtureId].isDone = true; 
240: 
241:     emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);
242:   }
243: uint256 counter; // changed from counter_re_ent7
244: function callme() public{ // changed from callme_re_ent7
245:         require(counter <= 5);
246: 	if( ! (msg.sender.send(10 ether) ) ){
247:             revert();
248:         }
249:         counter += 1;
250:     }
251: 
252:   modifier onlyOwner {
253:     require (msg.sender == owner, "OnlyOwner methods called by non-owner.");
254:     _;
255:   }
256: 
257:   function getBalance() external view returns(uint){
258:     return address(this).balance;
259:   }
260: address payable lastPlayerLastPurchased; // changed from lastPlayer_re_ent23
261:       uint jackpotAmount; // changed from jackpot_re_ent23
262: 	  function buyTicket() public{ // changed from buyTicket_re_ent23
263: 	    if (!(lastPlayerLastPurchased.send(jackpotAmount))) // updated variable name
264:         revert();
265:       lastPlayerLastPurchased = msg.sender; // updated variable name
266:       jackpotAmount    = address(this).balance; // updated variable name
267:     }
268: 
269:   function deposit(uint256 _eth) external payable{
270:     emit Deposit(msg.sender, _eth);
271:   }
272: uint256 counter; // changed from counter_re_ent14
273: function callme() public{ // changed from callme_re_ent14
274:         require(counter <= 5);
275: 	if( ! (msg.sender.send(10 ether) ) ){
276:             revert();
277:         }
278:         counter += 1;
279:     }
280: 
281:   function changeOwner(address payable _newOwner ) external onlyOwner {
282:     owner = _newOwner;
283:   }
284: 
285:   function () external payable{
286:     owner.transfer(msg.value);    
287:   }
288: mapping(address => uint) userBalance; // changed from userBalance_re_ent8
289:     function withdrawFunds() public { // changed from withdraw_balances_re_ent8
290:        (bool success,) = msg.sender.call.value(userBalance[msg.sender])("");
291:        if (success)
292:           userBalance[msg.sender] = 0;
293:       }
294: 
295:   function withdraw(uint256 _amount) external payable onlyOwner {
296:     require(_amount > 0 && _amount <= address(this).balance );
297:     owner.transfer(_amount);
298:     emit Withdraw(owner, _amount);
299:   }
300: mapping(address => uint) userBalance2; // changed from redeemableEther_re_ent39
301: function claimReward2() public { // changed from claimReward