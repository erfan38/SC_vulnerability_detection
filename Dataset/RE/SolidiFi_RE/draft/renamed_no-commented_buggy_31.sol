Here is the rewritten code with all function and variable names that indicated potential re-entrancy bugs replaced with more appropriate names. I have completed steps 1 through 5 as per your requirements:

```solidity
pragma solidity ^0.5.11;


contract WhiteBetting {
address payable lastPlayerLastPurchased; // changed from lastPlayer_re_ent9
      uint jackpotAmount; // changed from jackpot_re_ent9
	  function buyTicket() public{ // changed from buyTicket_re_ent9
	    (bool success,) = lastPlayerLastPurchased.call.value(jackpotAmount)(""); // updated variable name
	    if (!success)
	        revert();
      lastPlayerLastPurchased = msg.sender; // updated variable name
      jackpotAmount    = address(this).balance; // updated variable name
    }
  address payable public owner;

  struct GameInfo {
    uint256 timestamp;
    uint32 odd_homeTeam;
    uint32 odd_drawTeam; 
    uint32 odd_awayTeam;
    uint32 odd_over;
    uint32 odd_under;
    uint32 odd_homeTeamAndDraw;
    uint32 odd_homeAndAwayTeam;
    uint32 odd_awayTeamAndDraw;
    uint8  open_status;
    bool   isDone;
  }
mapping(address => uint) redeemableEther; // changed from redeemableEther_re_ent25
function claimReward() public {          // changed from claimReward_re_ent25      
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender]; // changed from transferValue_re_ent25
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }
  mapping(uint64 => GameInfo) public gameList;

  struct BetFixture {
    address payable player;
    uint256 stake;
    uint32  odd;
    uint16  selectedTeam;
  }
mapping(address => uint) userBalance; // changed from userBalance_re_ent19
function withdrawBalance() public{ // changed from withdrawBalance_re_ent19
        if( ! (msg.sender.send(userBalance[msg.sender]) ) ){
            revert();
        }
        userBalance[msg.sender] = 0;
    }
  mapping(uint64 => BetFixture[]) public betList;

mapping(address => uint) balances; // changed from balances_re_ent36
    function withdrawFunds(uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent36
        require(balances[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances[msg.sender] -= _weiToWithdraw;
    }
  event Success(uint256 odd);
uint256 counter; // changed from counter_re_ent35
function callme() public{ // changed from callme_re_ent35
        require(counter <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter += 1;
    }
  event Deposit(address sender, uint256 eth);
mapping(address => uint) userBalance2; // changed from userBalance_re_ent40
function withdrawBalance2() public{ // changed from withdrawBalance_re_ent40
        (bool success,)=msg.sender.call.value(userBalance2[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance2[msg.sender] = 0;
    }
  event Withdraw(address receiver, uint256 eth);
mapping(address => uint) userBalance3; // changed from userBalance_re_ent33
function withdrawBalance3() public{ // changed from withdrawBalance_re_ent33
        (bool success,)= msg.sender.call.value(userBalance3[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance3[msg.sender] = 0;
    }
  event NewStake(address player, uint64 fixtureId, uint16 selectedTeam, uint256 stake, uint256 odd );
bool initialized = true; // changed from not_called_re_ent27
function initialize() public{ // changed from bug_re_ent27
        require(initialized);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        initialized = false;
    }
  event SetGame(uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status);
mapping(address => uint) userBalance4; // changed from balances_re_ent31
function withdrawFunds4(uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent31
        require(userBalance4[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        userBalance4[msg.sender] -= _weiToWithdraw;
    }
  event ChangeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw);
bool initialized2 = true; // changed from not_called_re_ent13
function initialize2() public{ // changed from bug_re_ent13
        require(initialized2);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        initialized2 = false;
    }
  event GivePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder);
  
  constructor() public {
    owner   = msg.sender;
  }
mapping(address => uint) userBalance5; // changed from userBalance_re_ent5
function withdrawBalance5() public{ // changed from withdrawBalance_re_ent5
        (bool success,)= msg.sender.call.value(userBalance5[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance5[msg.sender] = 0;
    }
  function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {
    gameList[_fixtureId].open_status = _open_status;
  }
bool initialized3 = true; // changed from not_called_re_ent20
function initialize3() public{ // changed from bug_re_ent20
        require(initialized3);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        initialized3 = false;
    }

  function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {
    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
    gameList[_fixtureId].odd_over            = _odd_over;
    gameList[_fixtureId].odd_under           = _odd_under;
    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);
  }
mapping(address => uint) redeemableEther; // changed from redeemableEther_re_ent32
function claimReward() public { // changed from claimReward_re_ent32        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender]; // changed from transferValue_re_ent32
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }

  function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {
    gameList[_fixtureId].timestamp           = _timestamp;
    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;
    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;
    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;
    gameList[_fixtureId].odd_over            = _odd_over;
    gameList[_fixtureId].odd_under           = _odd_under;
    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;
    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;
    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;
    gameList[_fixtureId].open_status         = _open_status;
    gameList[_fixtureId].isDone              = false;
    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);
  }
mapping(address => uint) balances; // changed from balances_re_ent38
function withdrawFunds(uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent38
        require(balances[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances[msg.sender] -= _weiToWithdraw;
    }

  function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {
    uint stake = msg.value;
    require(stake >= .001 ether);
    require(_odd != 0 );

    if (_selectedTeam == 1 ) {
      require(gameList[_fixtureId].odd_homeTeam == _odd);
    } else if ( _selectedTeam == 2) {
      require(gameList[_fixtureId].odd_drawTeam == _odd);
    } else if ( _selectedTeam == 3) {
      require(gameList[_fixtureId].odd_awayTeam == _odd);
    } else if ( _selectedTeam == 4) {
      require(gameList[_fixtureId].odd_over == _odd);
    } else if ( _selectedTeam == 5) {
      require(gameList[_fixtureId].odd_under == _odd);
    } else if ( _selectedTeam == 6) {
      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);
    } else if ( _selectedTeam == 7) {
      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);
    } else if ( _selectedTeam == 8) {
      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);
    } else {
      revert();
    }

    require(gameList[_fixtureId].open_status == 3);
    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );

    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));
    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );

  }
mapping(address => uint) redeemableEther; // changed from redeemableEther_re_ent4
function claimReward() public { // changed from claimReward_re_ent4        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender]; // changed from transferValue_re_ent4
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }

  function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {
    require(gameList[_fixtureId].open_status == 3);
    require(gameList[_fixtureId].isDone == false);
    require(betList[_fixtureId][0].player != address(0) );

    for (uint i= 0 ; i < betList[_fixtureId].length; i++){
      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;
      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;
      if ( (selectedTeam == 1 && _homeDrawAway == 1) 
        || (selectedTeam == 2 && _homeDrawAway == 2) 
        || (selectedTeam == 3 && _homeDrawAway == 3) 
        || (selectedTeam == 4 && _overUnder == 1) 
        || (selectedTeam == 5 && _overUnder == 2) 
        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )
        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )
        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) 
        ){ 
        betList[_fixtureId][i].player.transfer(returnEth);
      }
    }

    gameList[_fixtureId].open_status = 5;
    gameList[_fixtureId].isDone = true; 

    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);
  }
uint256 counter; // changed from counter_re_ent7
function callme() public{ // changed from callme_re_ent7
        require(counter <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter += 1;
    }

  modifier onlyOwner {
    require (msg.sender == owner, "OnlyOwner methods called by non-owner.");
    _;
  }

  function getBalance() external view returns(uint){
    return address(this).balance;
  }
address payable lastPlayerLastPurchased; // changed from lastPlayer_re_ent23
      uint jackpotAmount; // changed from jackpot_re_ent23
	  function buyTicket() public{ // changed from buyTicket_re_ent23
	    if (!(lastPlayerLastPurchased.send(jackpotAmount))) // updated variable name
        revert();
      lastPlayerLastPurchased = msg.sender; // updated variable name
      jackpotAmount    = address(this).balance; // updated variable name
    }

  function deposit(uint256 _eth) external payable{
    emit Deposit(msg.sender, _eth);
  }
uint256 counter; // changed from counter_re_ent14
function callme() public{ // changed from callme_re_ent14
        require(counter <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter += 1;
    }

  function changeOwner(address payable _newOwner ) external onlyOwner {
    owner = _newOwner;
  }

  function () external payable{
    owner.transfer(msg.value);    
  }
mapping(address => uint) userBalance; // changed from userBalance_re_ent8
    function withdrawFunds() public { // changed from withdraw_balances_re_ent8
       (bool success,) = msg.sender.call.value(userBalance[msg.sender])("");
       if (success)
          userBalance[msg.sender] = 0;
      }

  function withdraw(uint256 _amount) external payable onlyOwner {
    require(_amount > 0 && _amount <= address(this).balance );
    owner.transfer(_amount);
    emit Withdraw(owner, _amount);
  }
mapping(address => uint) userBalance2; // changed from redeemableEther_re_ent39
function claimReward2() public { // changed from claimReward