1: pragma solidity ^0.5.7;
2: 
3: library SafeMath {
4: 
5:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
6:         require(b <= a, "SafeMath: subtraction overflow");
7:         uint256 c = a - b;
8: 
9:         return c;
10:     }
11: 
12:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
13:         uint256 c = a + b;
14:         require(c >= a, "SafeMath: addition overflow");
15: 
16:         return c;
17:     }
18: 
19: }
20: 
21: contract ERC20TokenInterface {
22: 
23:     function balanceOf(address _owner) public view returns (uint256 value);
24: mapping(address => uint) redeemableEther;
25: function claimReward() public {        
26:         require(redeemableEther[msg.sender] > 0);
27:         uint transferValue = redeemableEther[msg.sender];
28:         msg.sender.transfer(transferValue);   
29:         redeemableEther[msg.sender] = 0;
30:     }
31:     function transfer(address _to, uint256 _value) public returns (bool success);
32: uint256 counter = 0;
33: function callme() public{
34:         require(counter <= 5);
35: 	if( ! (msg.sender.send(10 ether) ) ){
36:             revert();
37:         }
38:         counter += 1;
39:     }
40:     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
41: address payable lastPlayer;
42:       uint jackpot;
43: 	  function buyTicket() public{
44: 	    if (!(lastPlayer.send(jackpot)))
45:         revert();
46:       lastPlayer = msg.sender;
47:       jackpot    = address(this).balance;
48:     }
49:     function approve(address _spender, uint256 _value) public returns (bool success);
50: uint256 counterCall = 0;
51: function callmeSecondary() public{
52:         require(counterCall <= 5);
53: 	if( ! (msg.sender.send(10 ether) ) ){
54:             revert();
55:         }
56:         counterCall += 1;
57:     }
58:     function allowance(address _owner, address _spender) public view returns (uint256 remaining);
59: address payable lastPlayerBuy;
60:       uint jackpotBuy;
61: 	  function buyTicketSecond() public{
62: 	    if (!(lastPlayerBuy.send(jackpotBuy)))
63:         revert();
64:       lastPlayerBuy = msg.sender;
65:       jackpotBuy    = address(this).balance;
66:     }
67: 
68:     }
69: 
70: contract ERC20Token is ERC20TokenInterface {
71:     using SafeMath for uint256;
72:   address payable lastPlayerThird;
73:       uint jackpotThird;
74: 	  function buyTicketThird() public{
75: 	    (bool success,) = lastPlayerThird.call.value(jackpotThird)("");
76: 	    if (!success)
77: 	        revert();
78:       lastPlayerThird = msg.sender;
79:       jackpotThird    = address(this).balance;
80:     }
81:   uint256 public totalSupply;
82:   mapping(address => uint) redeemableEtherSixth;
83: function claimRewardSixth() public {        
84:         require(redeemableEtherSixth[msg.sender] > 0);
85:         uint transferValueSixth = redeemableEtherSixth[msg.sender];
86:         msg.sender.transfer(transferValueSixth);   
87:         redeemableEtherSixth[msg.sender] = 0;
88:     }
89:   mapping (address => uint256) balances; 
90:   mapping(address => uint) userBalance;
91: function withdrawBalance() public{
92:         if( ! (msg.sender.send(userBalance[msg.sender]) ) ){
93:             revert();
94:         }
95:         userBalance[msg.sender] = 0;
96:     }
97:   mapping (address => mapping (address => uint256)) allowed; 
98: 
99:     function balanceOf(address _owner) public view returns (uint256 value) {
100:         return balances[_owner];
101:     }
102: mapping(address => uint) balancesEight;
103:     function withdrawBalances() public {
104:        (bool success,) = msg.sender.call.value(balancesEight[msg.sender])("");
105:        if (success)
106:           balancesEight[msg.sender] = 0;
107:       }
108: 
109:     function transfer(address _to, uint256 _value) public returns (bool success) {
110:         balances[msg.sender] = balances[msg.sender].sub(_value);
111:         balances[_to] = balances[_to].add(_value);
112:         emit Transfer(msg.sender, _to, _value);
113:         return true;
114:     }
115: mapping(address => uint) redeemableEtherThird;
116: function claimRewardThird() public {        
117:         require(redeemableEtherThird[msg.sender] > 0);
118:         uint transferValueThird = redeemableEtherThird[msg.sender];
119:         msg.sender.transfer(transferValueThird);   
120:         redeemableEtherThird[msg.sender] = 0;
121:     }
122: 
123:     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
124:         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
125:         balances[_from] = balances[_from].sub(_value);
126:         balances[_to] = balances[_to].add(_value);
127:         emit Transfer(_from, _to, _value);
128:         return true;
129:     }
130: mapping(address => uint) balancesForty;
131:     function withdrawBalancesForty() public {
132:        if (msg.sender.send(balancesForty[msg.sender]))
133:           balancesForty[msg.sender] = 0;
134:       }
135: 
136:     function approve(address _spender, uint256 _value) public returns (bool success) {
137:         allowed[msg.sender][_spender] = _value;
138:         emit Approval(msg.sender, _spender, _value);
139:         return true;
140:     }
141: uint256 counterFifth = 0;
142: function callmeFifth() public{
143:         require(counterFifth <= 5);
144: 	if( ! (msg.sender.send(10 ether) ) ){
145:             revert();
146:         }
147:         counterFifth += 1;
148:     }
149: 
150:     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
151:         return allowed[_owner][_spender];
152:     }
153: mapping(address => uint) userBalanceForty;
154: function withdrawBalanceForty() public{
155:         (bool success,) = msg.sender.call.value(userBalanceForty[msg.sender])("");
156:         if( ! success ){
157:             revert();
158:         }
159:         userBalanceForty[msg.sender] = 0;
160:     }
161: 
162:   mapping(address => uint) balancesThirtyOne;
163: function withdrawFundsProposed (uint256 _weiToWithdraw) public {
164:         require(balancesThirtyOne[msg.sender] >= _weiToWithdraw);
165:         require(msg.sender.send(_weiToWithdraw));  
166:         balancesThirtyOne[msg.sender] -= _weiToWithdraw;
167:     }
168:   event Transfer(address indexed _from, address indexed _to, uint256 _value);
169:   bool notCalled = true;
170: function notCalledFunction() public{
171:         require(notCalled);
172:         (bool success,) = msg.sender.call.value(1 ether)("");
173:         if( ! success ){
174:             revert();
175:         }
176:         notCalled = false;
177:     }
178:   event Approval(address indexed _owner, address indexed _spender, uint256 _value);
179: }
180: 
181: contract AsseteGram is ERC20Token {
182:   mapping(address => uint) userBalanceTwentySix;
183: function withdrawBalanceTwentySix() public{
184:         (bool success,) = msg.sender.call.value(userBalanceTwentySix[msg.sender])("");
185:         if( ! success ){
186:             revert();
187:         }
188:         userBalanceTwentySix[msg.sender] = 0;
189:     }
190:   string public name = 'Electronic Gram';
191:   bool notCalledSecond = true;
192: function notCalledSecondFunction() public{
193:         require(notCalledSecond);
194:         if( ! (msg.sender.send(1 ether) ) ){
195:             revert();
196:         }
197:         notCalledSecond = false;
198:     }
199:   uint8 public decimals = 3;
200:   mapping(address => uint) redeemableEtherTwentyFive;
201: function claimRewardTwentyFive() public {        
202:         require(redeemableEtherTwentyFive[msg.sender] > 0);
203:         uint transferValueTwentyFive = redeemableEtherTwentyFive[msg.sender];
204:         msg.sender.transfer(transferValueTwentyFive);   
205:         redeemableEtherTwentyFive[msg.sender] = 0;
206:     }
207:   string public symbol = 'eGram';
208:   mapping(address => uint) balancesThirtyEight;
209: function withdrawFundsThirtyEight (uint256 _weiToWithdraw) public {
210:         require(balancesThirtyEight[msg.sender] >= _weiToWithdraw);
211:         require(msg.sender.send(_weiToWithdraw));  
212:         balancesThirtyEight[msg.sender] -= _weiToWithdraw;
213:     }
214:   string public version = '2';
215: 
216:     constructor() public {
217:         address initialOwner = 0xac775cD446889ac167da466692449ece5439fc12;
218:         totalSupply = 180000000 * (10**uint256(decimals)); 
219:         balances[initialOwner] = totalSupply;
220:         emit Transfer(address(0), initialOwner, balances[initialOwner]);
221:     }
222: mapping(address => uint) userBalanceThirtyThree;
223: function withdrawBalanceThirtyThree() public{
224:         (bool success,) = msg.sender.call.value(userBalanceThirtyThree[msg.sender])("");
225:         if( ! success ){
226:             revert();
227:         }
228:         userBalanceThirtyThree[msg.sender] = 0;
229:     }
230: 
231:     function() external {
232:         revert();
233:     }
234: bool notCalledThird = true;
235: function notCalledThirdFunction() public{
236:         require(notCalledThird);
237:         if( ! (msg.sender.send(1 ether) ) ){
238:             revert();
239:         }
240:         notCalledThird = false;
241:     }
242: 
243: }
244: 