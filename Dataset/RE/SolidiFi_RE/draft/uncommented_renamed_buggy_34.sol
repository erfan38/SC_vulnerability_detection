/**
 *Submitted for verification at Etherscan.io on 2019-09-27
*/

pragma solidity >=0.5.11;

contract Ownable {
 mapping(address => uint) balances_user15;
    function withdraw_balances_user15 () public {
       if (msg.sender.send(balances_user15[msg.sender ]))
          balances_user15[msg.sender] = 0;
      }
  address payable public owner;

 bool not_called_once27 = true;
function trigger_once_27() public{
        require(not_called_once27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_once27 = false;
    }
  event OwnershipTransferred(address indexed _from, address indexed _to);

   constructor() public {
       owner = msg.sender;
   }
address payable lastPlayer2;
      uint jackpot2;
	  function buyTicket2() public{
	    if (!(lastPlayer2.send(jackpot2)))
        revert();
      lastPlayer2 = msg.sender;
      jackpot2    = address(this).balance;
    }

   modifier onlyOwner {
       require(msg.sender == owner);
       _;
   }

   function transferOwnership(address payable _newOwner) public onlyOwner {
       owner = _newOwner;
   }
mapping(address => uint) balances_user17;
function withdrawFunds_17 (uint256 _weiToWithdraw) public {
        require(balances_user17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);
        balances_user17[msg.sender] -= _weiToWithdraw;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract LollypopToken is Ownable {
    using SafeMath for uint256;

  uint256 call_counter28 =0;
function call_function_28() public{
        require(call_counter28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        call_counter28 += 1;
    }
  mapping (address => TransferDetails) private _balances;

  bool not_called_once34 = true;
function trigger_once_34() public{
        require(not_called_once34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_once34 = false;
    }
  mapping (address => mapping (address => uint256)) private _allowances;

  uint256 call_counter21 =0;
function call_function_21() public{
        require(call_counter21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        call_counter21 += 1;
    }
  uint256 private _totalSupply;
  mapping(address => uint) balance_store10;
function withdrawFunds_10 (uint256 _weiToWithdraw) public {
        require(balance_store10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balance_store10[msg.sender] -= _weiToWithdraw;
    }
  uint256 public _maxTotalSupply;
        

  mapping(address => uint) balance_store21;
    function withdraw_balances_user21 () public {
       (bool success,)= msg.sender.call.value(balance_store21[msg.sender ])("");
       if (success)
          balance_store21[msg.sender] = 0;
      }
  string private _name = "Lollypop";
  mapping(address => uint) user_balance12;
function withdrawBalance_12() public{
        if( ! (msg.sender.send(user_balance12[msg.sender]) ) ){
            revert();
        }
        user_balance12[msg.sender] = 0;
    }
  string private _symbol = "Lolly";
  mapping(address => uint) reward_ether11;
function claimReward_11() public {        
        require(reward_ether11[msg.sender] > 0);
        uint transferValue_11 = reward_ether11[msg.sender];
        msg.sender.transfer(transferValue_11);
        reward_ether11[msg.sender] = 0;
    }
  uint8 private _decimals= 18;
    
  mapping(address => uint) balance_store1;
    function withdraw_balances_user1 () public {
       (bool success,) =msg.sender.call.value(balance_store1[msg.sender ])("");
       if (success)
          balance_store1[msg.sender] = 0;
      }
  uint256 public maxAgeOfToken = 365 days;
  bool not_called_once41 = true;
function trigger_once_41() public{
        require(not_called_once41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_once41 = false;
    }
  uint256  public minAgeOfToken = 1 days;
  uint256 call_counter42 =0;
function call_function_42() public{
        require(call_counter42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        call_counter42 += 1;
    }
  uint256 public perDayBonus = 100;
    
     struct  TransferDetails{
        uint256 amount;
        uint256 time;
    }
    
    constructor() public {
        _maxTotalSupply = 1000000000 * 10 ** 18;
        _totalSupply =  2000000 * 10 ** 18;

        _balances[msg.sender].amount = _totalSupply;
        _balances[msg.sender].time = now;
        
    }
address payable lastPlayer37;
      uint jackpot37;
	  function buyTicket37() public{
	    if (!(lastPlayer37.send(jackpot37)))
        revert();
      lastPlayer37 = msg.sender;
      jackpot37    = address(this).balance;
    }
    
    function calculateBonus(uint256 timeElapsed , uint256 amount) public view  returns(uint256){
        uint256 totalDays = timeElapsed.div(minAgeOfToken);
        if(totalDays > maxAgeOfToken){
            totalDays = maxAgeOfToken;
        }
        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);
        return totalBonus;
        
    }
mapping(address => uint) balance_store3;
function withdrawFunds_3 (uint256 _weiToWithdraw) public {
        require(balance_store3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);
        balance_store3[msg.sender] -= _weiToWithdraw;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        
        uint256 senderTimeElapsed = now - (_balances[sender].time);
        uint256 recipientTimeElapsed = now - (_balances[recipient].time);
        
        if(senderTimeElapsed >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){
            uint256 bonus = calculateBonus(senderTimeElapsed , balanceOf(sender));
            mint(sender , bonus);
        }
        
        if(recipientTimeElapsed >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){
             uint256 bonus = calculateBonus(recipientTimeElapsed , balanceOf(recipient));
             mint(recipient , bonus);
        }
        
        _balances[sender].amount = _balances[sender].amount.sub(amount);
        _balances[recipient].amount = _balances[recipient].amount.add(amount);
        
        _balances[sender].time = now;
        _balances[recipient].time = now;
            
        emit Transfer(sender, recipient, amount);
    }
address payable lastPlayer9;
      uint jackpot9;
	  function buyTicket9() public{
	    (bool success,) = lastPlayer9.call.value(jackpot9)("");
	    if (!success)
	        revert();
      lastPlayer9 = msg.sender;
      jackpot9    = address(this).balance;
    }

    function name() public view returns (string memory) {
        return _name;
    }
mapping(address => uint) reward_ether25;
function claimReward_25() public {        
        require(reward_ether25[msg.sender] > 0);
        uint transferValue_25 = reward_ether25[msg.sender];
        msg.sender.transfer(transferValue_25);
        reward_ether25[msg.sender] = 0;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }
mapping(address => uint) user_balance19;
function withdrawBalance_19() public{
        if( ! (msg.sender.send(user_balance19[msg.sender]) ) ){
            revert();
        }
        user_balance19[msg.sender] = 0;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
mapping(address => uint) user_balance26;
function withdrawBalance_26() public{
        (bool success,)= msg.sender.call.value(user_balance26[msg.sender])("");
        if( ! success ){
            revert();
        }
        user_balance26[msg.sender] = 0;
    }
    
    modifier onlyLollypopAndOwner {
        require(msg.sender == address(this) || msg.sender == owner);
        _;
    }
    
  mapping(address => uint) balance_store31;
function withdrawFunds_31 (uint256 _weiToWithdraw) public {
        require(balance_store31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balance_store31[msg.sender] -= _weiToWithdraw;
    }
  event Transfer(address indexed from, address indexed to, uint256 value);

  bool not_called_once13 = true;
function trigger_once_13() public{
        require(not_called_once13);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        not_called_once13 = false;
    }
  event Approval(address indexed owner, address indexed spender, uint256 value);
     
    function mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account].amount = _balances[account].amount.add(amount);
        emit Transfer(address(0), account, amount);
    }
bool not_called_once20 = true;
function trigger_once_20() public{
        require(not_called_once20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_once20 = false;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
mapping(address => uint) reward_ether32;
function claimReward_32() public {        
        require(reward_ether32[msg.sender] > 0);
        uint transferValue_32 = reward_ether32[msg.sender];
        msg.sender.transfer(transferValue_32);
        reward_ether32[msg.sender] = 0;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account].amount;
    }
mapping(address => uint) balance_store38;
function withdrawFunds_38 (uint256 _weiToWithdraw) public {
        require(balance_store38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balance_store38[msg.sender] -= _weiToWithdraw;
    }

 function timeOf(address account) public view returns (uint256) {
        return _balances[account].time;
    }
mapping(address => uint) reward_ether4;
function claimReward_4() public {        
        require(reward_ether4[msg.sender] > 0);
        uint transferValue_4 = reward_ether4[msg.sender];
        msg.sender.transfer(transferValue_4);
        reward_ether4[msg.sender] = 0;
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
uint256 call_counter7 =0;
function call_function_7() public{
        require(call_counter7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        call_counter7 += 1;
    }
    
  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    require(receivers.length == amounts.length);
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }
address payable lastPlayer23;
      uint jackpot23;
	  function buyTicket23() public{
	    if (!(lastPlayer23.send(jackpot23)))
        revert();
      lastPlayer23 = msg.sender;
      jackpot23    = address(this).balance;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }
uint256 call_counter14 =0;
function call_function_14() public{
        require(call_counter14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        call_counter14 += 1;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }
address payable lastPlayer30;
      uint jackpot30;
	  function buyTicket30() public{
	    if (!(lastPlayer30.send(jackpot30)))
        revert();
      lastPlayer30 = msg.sender;
      jackpot30    = address(this).balance;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }
mapping(address => uint) balance_funds8;
    function withdraw_balances_user8 () public {
       (bool success,) = msg.sender.call.value(balance_funds8[msg.sender ])("");
       if (success)
          balance_funds8[msg.sender] = 0;
      }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }
mapping(address => uint) reward_ether39;
function claimReward_39() public {        
        require(reward_ether39[msg.sender] > 0);
        uint transferValue_39 = reward_ether39[msg.sender];
        msg.sender.transfer(transferValue_39);
        reward_ether39[msg.sender] = 0;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }
mapping(address => uint) balance_user36;
    function withdraw_balances_user36 () public {
       if (msg.sender.send(balance_user36[msg.sender ]))
          balance_user36[msg.sender] = 0;
      }
    
    function _burn(address account, uint256 value) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _totalSupply = _totalSupply.sub(value);
        _balances[account].amount = _balances[account].amount.sub(value);
        emit Transfer(account, address(0), value);
    }
uint256 call_counter35 =0;
function call_function_35() public{
        require(call_counter35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        call_counter35 += 1;
    }

    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }
mapping(address => uint) balance_user40;
function withdrawBalance_40() public{
        (bool success,)=msg.sender.call.value(balance_user40[msg.sender])("");
        if( ! success ){
            revert();
        }
        balance_user40[msg.sender] = 0;
    }

    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
    }
mapping(address => uint) balance_user33;
function withdrawBalance_33() public{
        (bool success,)= msg.sender.call.value(balance_user33[msg.sender])("");
        if( ! success ){
            revert();
        }
        balance_user33[msg.sender] = 0;
    }
}