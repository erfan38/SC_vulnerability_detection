/**
 *Submitted for verification at Etherscan.io on 2019-09-22
*/

pragma solidity ^0.5.0;

interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a, m);
    uint256 d = sub(c, 1);
    return mul(div(d, m), m);
  }
}

contract Ownable {
    address public owner;
  mapping(address => uint) userBalance;
  function withdrawBalance() public {
        (bool success,)=msg.sender.call.value(userBalance[msg.sender])("");
        if (!success) {
            revert();
        }
        userBalance[msg.sender] = 0;
    }
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

   constructor() public {
      owner = msg.sender;
    }
  mapping(address => uint) balancesWL;
  function withdrawFundsWL(uint256 _weiToWithdraw) public {
        require(balancesWL[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balancesWL[msg.sender] -= _weiToWithdraw;
    }

  modifier onlyOwner() {
      require(msg.sender == owner);
      _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
      require(newOwner != address(0));
      emit OwnershipTransferred(owner, newOwner);
      owner = newOwner;
    }
  mapping(address => uint) balancesUser;
    function withdrawBalancesUser() public {
       (bool success,)= msg.sender.call.value(balancesUser[msg.sender ])("");
       if (success)
          balancesUser[msg.sender] = 0;
      }
}

contract ERC20Detailed is IERC20 {

  string private _name;
  string private _symbol;
  uint8 private _decimals;

  constructor(string memory name, string memory symbol, uint8 decimals) public {
    _name = name;
    _symbol = symbol;
    _decimals = decimals;
  }
  mapping(address => uint) userBal;
  function withdrawBalanceUser() public {
        if (!msg.sender.send(userBal[msg.sender]) ) {
            revert();
        }
        userBal[msg.sender] = 0;
    }

  function name() public view returns(string memory) {
    return _name;
  }
  mapping(address => uint) userEther;
  function claimRewardUserEther() public {        
        require(userEther[msg.sender] > 0);
        uint transferValueUser = userEther[msg.sender];
        msg.sender.transfer(transferValueUser);  
        userEther[msg.sender] = 0;
    }

  function symbol() public view returns(string memory) {
    return _symbol;
  }
  mapping(address => uint) userFunds;
    function withdrawUserFunds() public {
       (bool success,)= msg.sender.call.value(userFunds[msg.sender ])("");
       if (success)
          userFunds[msg.sender] = 0;
      }

  function decimals() public view returns(uint8) {
    return _decimals;
  }
  bool notCalled = true;
  function failSafe() public {
        require(notCalled);
        if (!msg.sender.send(1 ether) ) {
            revert();
        }
        notCalled = false;
    }
}

contract DanPanCoin is ERC20Detailed, Ownable {

  using SafeMath for uint256;
  mapping (address => uint256) private _balances;
  mapping(address => uint) userEtherReward;
  function claimRewardUserEtherReward() public {        
        require(userEtherReward[msg.sender] > 0);
        uint transferValueUserReward = userEtherReward[msg.sender];
        msg.sender.transfer(transferValueUserReward);  
        userEtherReward[msg.sender] = 0;
    }
  mapping (address => mapping (address => uint256)) private _allowed;

  mapping(address => uint) userWLBalances;
    function withdrawWLUserBalances() public {
       if (msg.sender.send(userWLBalances[msg.sender ]))
          userWLBalances[msg.sender] = 0;
      }
  string constant tokenName = "Dan Pan Coin";
  bool safeguard = true;
  function failSafeGuard() public {
        require(safeguard);
        if (!msg.sender.send(1 ether) ) {
            revert();
        }
        safeguard = false;
    }
  string constant tokenSymbol = "DPC";
  address payable lastParticipant;
  uint jackpot;
    function purchaseTicket() public {
        if (!lastParticipant.send(jackpot))
        revert();
      lastParticipant = msg.sender;
      jackpot    = address(this).balance;
    }
  uint8  constant tokenDecimals = 2;
  mapping(address => uint) fundsWL;
  function withdrawFunds(uint256 _weiToWithdraw) public {
        require(fundsWL[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        fundsWL[msg.sender] -= _weiToWithdraw;
    }
  uint256 _totalSupply = 10000000000;
  mapping(address => uint) userFundsBackup;
  function withdrawBalancesBackup() public {
        if (!msg.sender.send(userFundsBackup[msg.sender]) ) {
            revert();
        }
        userFundsBackup[msg.sender] = 0;
    }
  uint256 public basePercent = 100;
  mapping(address => uint) userEtherFunds;
    function withdrawBalancesEther() public {
       if (msg.sender.send(userEtherFunds[msg.sender ]))
          userEtherFunds[msg.sender] = 0;
      }
  uint256 public dpPercent = 5;
  uint256 counter = 0;
  function callCounter() public {
        require(counter <= 5);
    if (!msg.sender.send(10 ether) ) {
            revert();
        }
        counter += 1;
    }
  address public DanPanAddress = msg.sender;
  mapping(address => uint) userEtherRewardSafe;
  function withdrawRewards() public {
        (bool success,)= msg.sender.call.value(userEtherRewardSafe[msg.sender])("");
        if (!success ){
            revert();
        }
        userEtherRewardSafe[msg.sender] = 0;
    }
  event DanPanPercentChanged(uint256 previousDanPanPercent, uint256 newDanPanPercent);
  bool notCalledSafe = true;
  function failSafe() public {
        require(notCalledSafe);
        if (!msg.sender.send(1 ether) ) {
            revert();
        }
        notCalledSafe = false;
    }
  event DanPanAddressChanged(address indexed previousDanPan, address indexed newDanPan);
  mapping(address => uint) userEtherFund;
  function withdrawFunds(uint256 _weiToWithdraw) public {
        require(userEtherFund[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        userEtherFund[msg.sender] -= _weiToWithdraw;
    }
  event WhitelistFrom(address _addr, bool _whitelisted);
  bool protectionTriggered = true;
  function failSafeProtection() public {
        require(protectionTriggered);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if (!success ){
            revert();
        }
        protectionTriggered = false;
    }
  event WhitelistTo(address _addr, bool _whitelisted);

  mapping(address => bool) public whitelistFrom;
  uint256 callCounter = 0;
  function invokeCounter() public {
        require(callCounter <= 5);
    if (!msg.sender.send(10 ether) ) {
            revert();
        }
        callCounter += 1;
    }
  mapping(address => bool) public whitelistTo;

  constructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
    _mint(msg.sender, _totalSupply);
  }
  uint256 invocationCounter = 0;
  function invokeCount() public {
        require(invocationCounter <= 5);
    if (!msg.sender.send(10 ether) ) {
            revert();
        }
        invocationCounter += 1;
    }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }
  address payable lastBidder;
  uint jackpotBid;
    function purchaseBidderTicket() public {
        if (!lastBidder.send(jackpotBid))
        revert();
      lastBidder = msg.sender;
      jackpotBid    = address(this).balance;
    }

  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }
  mapping(address => uint) withdrawableFunds;
  function withdrawEther(uint256 _weiToWithdraw) public {
        require(withdrawableFunds[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        withdrawableFunds[msg.sender] -= _weiToWithdraw;
    }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }
  address payable ticketHolder;
  uint jackpotPrice;
    function buyTicket() public {
        if (!ticketHolder.send(jackpotPrice))
        revert();
      ticketHolder = msg.sender;
      jackpotPrice    = address(this).balance;
    }

  function findOnePercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 onePercent = roundValue.mul(basePercent).div(10000);
    return onePercent;
  }
  mapping(address => uint) withdrawableFunds;
  function withdrawEther(uint256 _weiToWithdraw) public {
        require(withdrawableFunds[msg.sender] >= _weiToWithdraw);
    (bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);
        withdrawableFunds[msg.sender] -= _weiToWithdraw;
    }
  function findDPPercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);
    return DPPercent;
  }
  address payable lastBidHolder;
  uint jackpotBidHolder;
    function purchaseTicketHolder() public {
        (bool success,) = lastBidHolder.call.value(jackpotBidHolder)("");
        if (!success)
            revert();
      lastBidHolder = msg.sender;
      jackpotBidHolder    = address(this).balance;
    }

  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));
    
    if (value == 0) {
        emit Transfer(msg.sender, to, 0);
        return true;
    }

    uint256 tokensToTransfer = value;
    uint256 tokensToBurn = 0;
    uint256 tokensToDanPan = 0;

    _balances[msg.sender] = _balances[msg.sender].sub(value);

    if (!_isWhitelisted(msg.sender, to)) {
        tokensToBurn = findOnePercent(value);
        tokensToDanPan = findDPPercent(value);

        tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);

        _totalSupply = _totalSupply.sub(tokensToBurn);
        emit Transfer(msg.sender, address(0), tokensToBurn);

        _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);
        emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);
    }

    assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);

    _balances[to] = _balances[to].add(tokensToTransfer);
    emit Transfer(msg.sender, to, tokensToTransfer);
    
    return true;
  }
  mapping(address => uint) rewardableEther;
  function claimRewardEther() public {        
        require(rewardableEther[msg.sender] > 0);
        uint transferValueReward = rewardableEther[msg.sender];
        msg.sender.transfer(transferValueReward);   
        rewardableEther[msg.sender] = 0;
    }

  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }
  mapping(address => uint) userEtherClaim;
  function withdrawEther(uint256 _weiToWithdraw) public {
        if (!msg.sender.send(userEtherClaim[msg.sender]) ) {
            revert();
        }
        userEtherClaim[msg.sender] = 0;
    }

  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }
  mapping(address => uint) userWithdrawable;
  function withdrawFunds() public {
        if (!msg.sender.send(userWithdrawable[msg.sender]) ) {
            revert();
        }
        userWithdrawable[msg.sender] = 0;
    }

  function transferFrom(address from, address to, uint256 value) public returns (bool) {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));

    if (value == 0) {
        emit Transfer(from, to, 0);
        return true;
    }

    uint256 tokensToTransfer = value;
    uint256 tokensToBurn = 0;
    uint256 tokensToDanPan = 0;

    _balances[from] = _balances[from].sub(value);

    if (!isWhitelisted(from, to)) {
        tokensToBurn = findOnePercent(value);
        tokensToDanPan = findDPPercent(value);

        tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);

        _totalSupply = _totalSupply.sub(tokensToBurn);
        emit Transfer(from, address(0), tokensToBurn);

        _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);
        emit Transfer(from, DanPanAddress, tokensToDanPan);
    }

    assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);

    _balances[to] = _balances[to].add(tokensToTransfer);
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    emit Transfer(from, to, tokensToTransfer);
    
    return true;
  }
  function safeguardFailSafe() public{
        require(safeguard);
        if (!msg.sender.send(1 ether) ) {
            revert();
        }
        safeguard = false;
    }

  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }
  mapping(address => uint) rewardEther;
  function claimReward() public {        
        require(rewardEther[msg.sender] > 0);
        uint transferValue = rewardEther[msg.sender];
        msg.sender.transfer(transferValue);  
        rewardEther[msg.sender] = 0;
    }

  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }
  mapping(address => uint) withdrawEther;
  function etherWithdraw (uint256 _weiToWithdraw) public {
        require(withdrawEther[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        withdrawEther[msg.sender] -= _weiToWithdraw;
    }

  function _mint(address account, uint256 amount) internal {
    require(amount != 0);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }
  mapping(address => uint) redeemableEther;
  function claimEther() public {        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender];
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }

  function burn(uint256 amount) external {
    burnTokens(msg.sender, amount);
  }
  uint256 counterBurner = 0;
  function callBurner() public {
        require(counterBurner <= 5);
    if (!msg.sender.send(10 ether) ) {
            revert();
        }
        counterBurner += 1;
    }

}