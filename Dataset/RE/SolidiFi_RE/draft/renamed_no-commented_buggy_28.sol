pragma solidity ^0.5.0;

interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
  event Burn(address indexed from, uint256 value);
}

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }
}

contract ERC20Detailed is IERC20 {

mapping(address => uint) redeemableFunds;
function claimReward() public {        
        require(redeemableFunds[msg.sender] > 0);
        uint transferValue = redeemableFunds[msg.sender];
        msg.sender.transfer(transferValue);   
        redeemableFunds[msg.sender] = 0;
    }
  string private _name;
mapping(address => uint) balances;
    function withdrawFunds() public {
       (bool success,) =msg.sender.call.value(balances[msg.sender])("");
       if (success)
          balances[msg.sender] = 0;
      }
  string private _symbol;
bool notCalled = true;
function demoFunction() public{
        require(notCalled);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalled = false;
    }
  uint8 private _decimals;

  constructor(string memory name, string memory symbol, uint8 decimals) public {
    _name = name;
    _symbol = symbol;
    _decimals = decimals;
  }
mapping(address => uint) userBalance;
function withdrawUserBalance() public{
        if( ! (msg.sender.send(userBalance[msg.sender]) ) ){
            revert();
        }
        userBalance[msg.sender] = 0;
    }

  function name() public view returns(string memory) {
    return _name;
  }
mapping(address => uint) userBalance2;
function withdrawUserBalance2() public{
        (bool success,)= msg.sender.call.value(userBalance2[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance2[msg.sender] = 0;
    }

  function symbol() public view returns(string memory) {
    return _symbol;
  }
bool anotherNotCalled = true;
function demoFunction2() public{
        require(anotherNotCalled);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        anotherNotCalled = false;
    }

  function decimals() public view returns(uint8) {
    return _decimals;
  }
mapping(address => uint) redeemableFunds2;
function claimReward2() public {        
        require(redeemableFunds2[msg.sender] > 0);
        uint transferValue2 = redeemableFunds2[msg.sender];
        msg.sender.transfer(transferValue2);   
        redeemableFunds2[msg.sender] = 0;
    }
}

contract HYDROGEN is ERC20Detailed {

  using SafeMath for uint256;
uint256 counter = 0;
function incrementCounter() public{
        require(counter <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter += 1;
    }
  mapping (address => uint256) private _balances;
address payable lastPlayer;
      uint jackpot;
	  function buyTicket() public{
	    if (!(lastPlayer.send(jackpot)))
        revert();
      lastPlayer = msg.sender;
      jackpot    = address(this).balance;
    }
  mapping (address => mapping (address => uint256)) private _allowed;

mapping(address => uint) balances3;
function withdrawFunds3(uint256 _weiToWithdraw) public {
        require(balances3[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balances3[msg.sender] -= _weiToWithdraw;
    }
  string constant tokenName = "HYDROGEN";
address payable lastPlayer2;
      uint jackpot2;
	  function buyTicket2() public{
	    if (!(lastPlayer2.send(jackpot2)))
        revert();
      lastPlayer2 = msg.sender;
      jackpot2    = address(this).balance;
    }
  string constant tokenSymbol = "HGN";
mapping(address => uint) balances4;
function withdrawFunds4(uint256 _weiToWithdraw) public {
        require(balances4[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balances4[msg.sender] -= _weiToWithdraw;
    }
  uint8 constant tokenDecimals = 4;
address payable lastPlayer3;
      uint jackpot3;
	  function buyTicket3() public{
	    (bool success,) = lastPlayer3.call.value(jackpot3)("");
	    if (!success)
	        revert();
      lastPlayer3 = msg.sender;
      jackpot3    = address(this).balance;
    }
  uint256 _totalSupply =8000000000;
mapping(address => uint) redeemableFunds3;
function claimReward3() public {        
        require(redeemableFunds3[msg.sender] > 0);
        uint transferValue3 = redeemableFunds3[msg.sender];
        msg.sender.transfer(transferValue3);   
        redeemableFunds3[msg.sender] = 0;
    }
  uint256 public basePercent = 100;

  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
    _mint(msg.sender, _totalSupply);
  }
mapping(address => uint) balances5;
function withdrawFunds5(uint256 _weiToWithdraw) public {
        require(balances5[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances5[msg.sender] -= _weiToWithdraw;
    }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }
mapping(address => uint) redeemableFunds4;
function claimReward4() public {        
        require(redeemableFunds4[msg.sender] > 0);
        uint transferValue4 = redeemableFunds4[msg.sender];
        msg.sender.transfer(transferValue4);   
        redeemableFunds4[msg.sender] = 0;
    }

  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }
uint256 counter2 = 0;
function incrementCounter2() public{
        require(counter2 <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter2 += 1;
    }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }
address payable lastPlayer4;
      uint jackpot4;
	  function buyTicket4() public{
	    if (!(lastPlayer4.send(jackpot4)))
        revert();
      lastPlayer4 = msg.sender;
      jackpot4    = address(this).balance;
    }

  function calculateTwoPercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 twoPercent = roundValue.mul(basePercent).div(5000);
    return twoPercent;
  }
uint256 counter3 = 0;
function incrementCounter3() public{
        require(counter3 <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter3 += 1;
    }

  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));

    uint256 tokensToBurn = calculateTwoPercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);

    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(tokensToTransfer);

    _totalSupply = _totalSupply.sub(tokensToBurn);

    emit Transfer(msg.sender, to, tokensToTransfer);
    emit Transfer(msg.sender, address(0), tokensToBurn);
    return true;
  }
address payable lastPlayer5;
      uint jackpot5;
	  function buyTicket5() public{
	    if (!(lastPlayer5.send(jackpot5)))
        revert();
      lastPlayer5 = msg.sender;
      jackpot5    = address(this).balance;
    }

  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }
mapping(address => uint) balances6;
    function withdrawFunds6() public {
       (bool success,) = msg.sender.call.value(balances6[msg.sender])("");
       if (success)
          balances6[msg.sender] = 0;
      }

  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }
mapping(address => uint) redeemableFunds5;
function claimReward5() public {        
        require(redeemableFunds5[msg.sender] > 0);
        uint transferValue5 = redeemableFunds5[msg.sender];
        msg.sender.transfer(transferValue5);   
        redeemableFunds5[msg.sender] = 0;
    }

  function transferFrom(address from, address to, uint256 value) public returns (bool) {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));

    _balances[from] = _balances[from].sub(value);

    uint256 tokensToBurn = calculateTwoPercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);

    _balances[to] = _balances[to].add(tokensToTransfer);
    _totalSupply = _totalSupply.sub(tokensToBurn);

    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);

    emit Transfer(from, to, tokensToTransfer);
    emit Transfer(from, address(0), tokensToBurn);

    return true;
  }
mapping(address => uint) balances7;
    function withdrawFunds7() public {
       if (msg.sender.send(balances7[msg.sender]))
          balances7[msg.sender] = 0;
      }

  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }
uint256 counter4 = 0;
function incrementCounter4() public{
        require(counter4 <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter4 += 1;
    }

  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }
mapping(address => uint) userBalance2;
function withdrawUserBalance2() public{
        (bool success,)=msg.sender.call.value(userBalance2[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance2[msg.sender] = 0;
    }

  function _mint(address account, uint256 amount) internal {
    require(amount != 0);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }
mapping(address => uint) userBalance3;
function withdrawUserBalance3() public{
        (bool success,)= msg.sender.call.value(userBalance3[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance3[msg.sender] = 0;
    }

  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }
bool yetAnotherNotCalled = true;
function demoFunction3() public{
        require(yetAnotherNotCalled);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        yetAnotherNotCalled = false;
    }

  function _burn(address account, uint256 amount) internal {
    require(amount != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }
mapping(address => uint) balances8;
function withdrawFunds8 (uint256 _weiToWithdraw) public {
        require(balances8[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances8[msg.sender] -= _weiToWithdraw;
    }

  function burnFrom(address account, uint256 amount) external {
    require(amount <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
    _burn(account, amount);
  }
bool anotherNotCalled = true;
function demoFunction4() public{
        require(anotherNotCalled);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        anotherNotCalled = false;
    }
}