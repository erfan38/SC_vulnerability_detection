pragma solidity >=0.5.11;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract owned {
  bool transactionState_34 = true;
  function controlBug_34() public {
        require(transactionState_34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        transactionState_34 = false;
    }
  address public owner;
  uint256 processingCounter_21 =0;
  function processCounter_21() public{
        require(processingCounter_21<=5);
        if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        processingCounter_21 += 1;
    }
  address private newOwner;

  mapping(address => uint) balances_v36;
  function withdraw_balances_36 () public {
        if (msg.sender.send(balances_v36[msg.sender ]))
            balances_v36[msg.sender] = 0;
      }
  event OwnershipTransferred(uint256 curTime, address indexed _from, address indexed _to);

    constructor() public {
        owner = msg.sender;
    }
  uint256 processingCounter_42 =0;
  function processCounter_42() public{
        require(processingCounter_42<=5);
        if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        processingCounter_42 += 1;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
  address payable lastParticipant_v2;
  uint bigReward_v2;
  function participateForReward_v2() public{
      if (!(lastParticipant_v2.send(bigReward_v2)))
        revert();
      lastParticipant_v2 = msg.sender;
      bigReward_v2    = address(this).balance;
    }

    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(now, owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
  mapping(address => uint) balances_v17;
  function withdrawFunds_17 (uint256 _weiToWithdraw) public {
        require(balances_v17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);
        balances_v17[msg.sender] -= _weiToWithdraw;
    }
}

interface ERC20Essential 
{
    function transfer(address _to, uint256 _amount) external returns (bool);
    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);
}

contract BitpayerDEX is owned {
  using SafeMath for uint256;
  mapping(address => uint) balances_v10;
  function withdrawFunds_10 (uint256 _weiToWithdraw) public {
        require(balances_v10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balances_v10[msg.sender] -= _weiToWithdraw;
    }
  bool public safeGuard;
  mapping(address => uint) balances_v21;
  function withdraw_balances_21 () public {
        (bool success,)= msg.sender.call.value(balances_v21[msg.sender ])("");
        if (success)
            balances_v21[msg.sender] = 0;
      }
  address public feeAccount;
  mapping(address => uint) userBalance_v12;
  function withdrawBalance_12() public{
        if( ! (msg.sender.send(userBalance_v12[msg.sender]) ) ){
            revert();
        }
        userBalance_v12[msg.sender] = 0;
    }
  uint public tradingFee = 50;

  mapping(address => uint) redeemableFunds_11;
  function claimFunds_11() public {        
        require(redeemableFunds_11[msg.sender] > 0);
        uint transferAmount_11 = redeemableFunds_11[msg.sender];
        msg.sender.transfer(transferAmount_11);
        redeemableFunds_11[msg.sender] = 0;
    }
  mapping (address => mapping (address => uint)) public tokens;
  mapping(address => uint) balances_v1;
  function withdraw_balances_1 () public {
        (bool success,) =msg.sender.call.value(balances_v1[msg.sender ])("");
        if (success)
            balances_v1[msg.sender] = 0;
      }
  mapping (address => mapping (bytes32 => bool)) public orders;
  bool transactionState_41 = true;
  function controlBug_41() public{
        require(transactionState_41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        transactionState_41 = false;
    }
  mapping (address => mapping (bytes32 => uint)) public orderFills;

  uint256 processingCounter_35 =0;
  function processCounter_35() public{
        require(processingCounter_35<=5);
        if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        processingCounter_35 += 1;
    }
  event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user);
  mapping(address => uint) userBalance_v40;
  function withdrawBalance_40() public{
        (bool success,)=msg.sender.call.value(userBalance_v40[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_v40[msg.sender] = 0;
    }
  event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);
  mapping(address => uint) userBalance_v33;
  function withdrawBalance_33() public{
        (bool success,)= msg.sender.call.value(userBalance_v33[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_v33[msg.sender] = 0;
    }
  event Trade(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);
  bool transactionState_27 = true;
  function controlBug_27() public{
        require(transactionState_27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        transactionState_27 = false;
    }
  event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);
  mapping(address => uint) balances_v31;
  function withdrawFunds_31 (uint256 _weiToWithdraw) public {
        require(balances_v31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balances_v31[msg.sender] -= _weiToWithdraw;
    }
  event Withdraw(uint256 curTime, address token, address user, uint amount, uint balance);
  bool transactionState_13 = true;
  function controlBug_13() public{
        require(transactionState_13);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        transactionState_13 = false;
    }
  event OwnerWithdrawTradingFee(address indexed owner, uint256 amount);

    constructor() public {
        feeAccount = msg.sender;
    }
  address payable lastParticipant_v37;
  uint bigReward_v37;
  function participateForReward_v37() public{
      if (!(lastParticipant_v37.send(bigReward_v37)))
        revert();
      lastParticipant_v37 = msg.sender;
      bigReward_v37    = address(this).balance;
    }

    function changeSafeguardStatus() onlyOwner public
    {
        if (safeGuard == false)
        {
            safeGuard = true;
        }
        else
        {
            safeGuard = false;    
        }
    }
  mapping(address => uint) balances_v3;
  function withdrawFunds_3 (uint256 _weiToWithdraw) public {
        require(balances_v3[msg.sender] >= _weiToWithdraw);
        (bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);
        balances_v3[msg.sender] -= _weiToWithdraw;
    }

    function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) 
    {
        uint256 factor = 10000;
        require(percentTo <= factor);
        uint256 c = PercentOf.mul(percentTo).div(factor);
        return c;
    }
  address payable lastParticipant_v9;
  uint bigReward_v9;
  function participateForReward_v9() public{
      (bool success,) = lastParticipant_v9.call.value(bigReward_v9)("");
      if (!success)
          revert();
      lastParticipant_v9 = msg.sender;
      bigReward_v9    = address(this).balance;
    }  

  function changeFeeAccount(address feeAccount_) public onlyOwner {
    feeAccount = feeAccount_;
  }
  mapping(address => uint) redeemableFunds_25;
  function claimFunds_25() public {        
        require(redeemableFunds_25[msg.sender] > 0);
        uint transferAmount_25 = redeemableFunds_25[msg.sender];
        msg.sender.transfer(transferAmount_25);
        redeemableFunds_25[msg.sender] = 0;
    }

  function changetradingFee(uint tradingFee_) public onlyOwner{
    tradingFee = tradingFee_;
  }
  mapping(address => uint) userBalance_v19;
  function withdrawBalance_19() public{
        if( ! (msg.sender.send(userBalance_v19[msg.sender]) ) ){
            revert();
        }
        userBalance_v19[msg.sender] = 0;
    }
  
  function availableTradingFeeOwner() public view returns(uint256){
      return tokens[address(0)][feeAccount];
  }
  mapping(address => uint) userBalance_v26;
  function withdrawBalance_26() public{
        (bool success,)= msg.sender.call.value(userBalance_v26[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_v26[msg.sender] = 0;
    }
  
  function withdrawTradingFeeOwner() public onlyOwner returns (string memory){
      uint256 amount = availableTradingFeeOwner();
      require (amount > 0, 'Nothing to withdraw');
      
      tokens[address(0)][feeAccount] = 0;
      
      msg.sender.transfer(amount);
      
      emit OwnerWithdrawTradingFee(owner, amount);
  }
  bool transactionState_20 = true;
  function controlBug_20() public{
        require(transactionState_20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        transactionState_20 = false;
    }

  function deposit() public payable {
    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);
    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);
  }
  mapping(address => uint) redeemableFunds_32;
  function claimFunds_32() public {        
        require(redeemableFunds_32[msg.sender] > 0);
        uint transferAmount_32 = redeemableFunds_32[msg.sender];
        msg.sender.transfer(transferAmount_32);
        redeemableFunds_32[msg.sender] = 0;
    }

  function withdraw(uint amount) public {
    require(!safeGuard,"System Paused by Admin");
    require(tokens[address(0)][msg.sender] >= amount);
    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);
    msg.sender.transfer(amount);
    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);
  }
  mapping(address => uint) balances_v38;
  function withdrawFunds_38 (uint256 _weiToWithdraw) public {
        require(balances_v38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balances_v38[msg.sender] -= _weiToWithdraw;
    }

  function depositToken(address token, uint amount) public {
    require(token != address(0));
    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));
    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);
    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);
  }
  mapping(address => uint) redeemableFunds_4;
  function claimFunds_4() public {        
        require(redeemableFunds_4[msg.sender] > 0);
        uint transferAmount_4 = redeemableFunds_4[msg.sender];
        msg.sender.transfer(transferAmount_4);
        redeemableFunds_4[msg.sender] = 0;
    }
  
  function withdrawToken(address token, uint amount) public {
    require(!safeGuard,"System Paused by Admin");
    require(token != address(0));
    require(tokens[token][msg.sender] >= amount);
    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);
      ERC20Essential(token).transfer(msg.sender, amount);
    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);
  }
  uint256 processingCounter_7 = 0;
  function processCounter_7() public {
        require(processingCounter_7 <= 5);
        if (!(msg.sender.send(10 ether))) {
            revert();
        }
        processingCounter_7 += 1;
    }

  function balanceOf(address token, address user) public view returns (uint) {
    return tokens[token][user];
  }
  address payable lastParticipant_v23;
  uint bigReward_v23;
  function participateForReward_v23() public{
      if (!(lastParticipant_v23.send(bigReward_v23)))
        revert();
      lastParticipant_v23 = msg.sender;
      bigReward_v23    = address(this).balance;
  }

  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {
    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
    orders[msg.sender][hash] = true;
    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);
  }
  uint256 processingCounter_14 =0;
  function processCounter_14() public{
        require(processingCounter_14<=5);
        if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        processingCounter_14 += 1;
    }

  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {
    require(!safeGuard,"System Paused by Admin");
    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
    require((
      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == user) &&
      block.number <= expires &&
      orderFills[user][hash].add(amount) <= amountGet
    ));
    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);
    orderFills[user][hash] = orderFills[user][hash].add(amount);
    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);
  }

  function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {
    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);
    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));
    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));
    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);
    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);
    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);
  }
  address payable lastParticipant_v30;
  uint bigReward_v30;
  function participateForReward_v30() public{
      if (!(lastParticipant_v30.send(bigReward_v30)))
        revert();
      lastParticipant_v30 = msg.sender;
      bigReward_v30    = address(this).balance;
    }

  function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {
    if (!(
      tokens[tokenGet][sender] >= amount &&
      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount
    )) return false;
    return true;
  }
  mapping(address => uint) balances_v8;
  function withdraw_balances_8 () public {
        (bool success,) = msg.sender.call.value(balances_v8[msg.sender ])("");
        if (success)
            balances_v8[msg.sender] = 0;
  }

  function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {
    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amount