/**
 *Submitted for verification at Etherscan.io on 2019-09-24
*/

pragma solidity ^0.5.11;

contract StockBet {
    
  mapping(address => uint) redeemableEther;
function claimReward() public {        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender];
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }
  event GameCreated(uint bet);
  mapping(address => uint) userBalances;
    function withdrawBalances() public {
       if (msg.sender.send(userBalances[msg.sender ]))
          userBalances[msg.sender] = 0;
      }
  event GameOpened(uint256 initialPrice);
  uint256 callCounter = 0;
function callMe() public{
        require(callCounter <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        callCounter += 1;
    }
  event GameClosed();
  mapping(address => uint) userRewards;
function withdrawRewards() public{
        (bool success,)=msg.sender.call.value(userRewards[msg.sender])("");
        if( ! success ){
            revert();
        }
        userRewards[msg.sender] = 0;
    }
  event OracleSet(address oracle);
  mapping(address => uint) additionalBalances;
function withdrawAdditionalBalances() public{
        (bool success,)= msg.sender.call.value(additionalBalances[msg.sender])("");
        if( ! success ){
            revert();
        }
        additionalBalances[msg.sender] = 0;
    }
  event FinalPriceSet(uint256 finalPrice);
  bool actionPending = true;
function finalizeAction() public{
        require(actionPending);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        actionPending = false;
    }
  event PlayerBet(address player, uint guess);
    
    address payable public owner;
    bool dataPending = true;
    function storeData() public {
        require(dataPending);
        if ( ! (msg.sender.send(1 ether) )) {
            revert();
        }
        dataPending = false;
    }
  address public oracle;
    uint256 actionCount = 0;
    function incrementAction() public{
        require(actionCount <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        actionCount += 1;
    }
  State public state;

  address payable lastParticipant;
      uint rewardPool;
      function allocateReward() public{
        if (!(lastParticipant.send(rewardPool)))
            revert();
        lastParticipant = msg.sender;
        rewardPool = address(this).balance;
    }
  mapping (uint => Guess) public guesses;

  mapping(address => uint) withdrawalBalances;
function completeWithdrawal(uint256 _weiToWithdraw) public {
        require(withdrawalBalances[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        withdrawalBalances[msg.sender] -= _weiToWithdraw;
    }
  uint256 public bet;
    uint256 splitJackpot;
  address payable latestParticipant;
      uint prizePool;
      function purchaseTicket() public{
        if (!(latestParticipant.send(prizePool)))
            revert();
        latestParticipant = msg.sender;
        prizePool = address(this).balance;
    }
  uint public result;
  mapping(address => uint) extraBalances;
function withdrawExtra(uint256 _amountToWithdraw) public {
        require(extraBalances[msg.sender] >= _amountToWithdraw);
        require(msg.sender.send(_amountToWithdraw));  
        extraBalances[msg.sender] -= _amountToWithdraw;
    }
  uint256 public initialPrice;
  address payable recentParticipant;
      uint awardFund;
      function claimTicketReward() public{
        (bool success,) = recentParticipant.call.value(awardFund)("");
        if (!success)
            revert();
        recentParticipant = msg.sender;
        awardFund = address(this).balance;
    }
  uint256 public finalPrice;

  mapping(address => uint) claimableEther;
function executeRewardClaim() public {        
        require(claimableEther[msg.sender] > 0);
        uint transferAmount = claimableEther[msg.sender];
        msg.sender.transfer(transferAmount);   
        claimableEther[msg.sender] = 0;
    }
  uint constant UP = 1;
  mapping(address => uint) unclaimedRewards;
function retrieveReward() public{
        if( ! (msg.sender.send(unclaimedRewards[msg.sender]) ) ){
            revert();
        }
        unclaimedRewards[msg.sender] = 0;
    }
  uint constant DOWN = 0;
    
    
    modifier byPlayer(){
        require(msg.sender != oracle);
        _;
    }
    
    modifier byOwner(){
        require(msg.sender == owner);
        _;
    }
    
    modifier byOracle(){
        require(msg.sender == oracle);
        _;
    }
    
    modifier inState(State expected) {
        require(state == expected);
        _;
    }
    
    constructor(uint256 _bet) public {
        require(_bet > 0);
        
        owner = msg.sender;
        state = State.SETUP;
        bet = _bet;
        
        emit GameCreated(bet);
    }
  mapping(address => uint) participantRewards;
  function collectParticipantRewards() public{
        (bool success,)=msg.sender.call.value(participantRewards[msg.sender])("");
        require(success);
        participantRewards[msg.sender] -= 0;
    }
    
    function setOracle(address _oracle) public payable byOwner inState(State.SETUP) {
        oracle = _oracle;
        
        emit OracleSet(oracle);
    }
  bool initialized = true;
  function initializeContract() public{
        require(initialized);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        initialized = false;
    }
    
    function setInitialPrice(uint256 _value) public payable byOracle inState(State.SETUP) {
        initialPrice = _value;
        state = State.OPEN;
        
        emit GameOpened(initialPrice);
    }
  mapping(address => uint) payableBalances;
  function claimBalance() public {        
        require(payableBalances[msg.sender] > 0);
        uint claimAmount = payableBalances[msg.sender];
        msg.sender.transfer(claimAmount);
        payableBalances[msg.sender] = 0;
    }

    function closeGame() public byOwner inState(State.OPEN){
        state = State.CLOSED;

        emit GameClosed();
    }
  mapping(address => uint) rewardBalances;
  function claimRewardAmount(uint256 _amount) public {
        require(rewardBalances[msg.sender] >= _amount);
        require(msg.sender.send(_amount));  
        rewardBalances[msg.sender] -= _amount;
    }
    
    function betUp() public payable byPlayer inState(State.OPEN){
        require(msg.value == (bet*0.001 ether));

        guesses[UP].guesses_number++;
        guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;

        emit PlayerBet(msg.sender, UP);
    }
  mapping(address => uint) additionalEarnings;
  function withdrawEarnings() public {        
        require(additionalEarnings[msg.sender] > 0);
        uint earnedAmount = additionalEarnings[msg.sender];
        msg.sender.transfer(earnedAmount);   
        additionalEarnings[msg.sender] = 0;
    }
    
    function betDown() public payable byPlayer inState(State.OPEN){
        require(msg.value == (bet*0.001 ether));

        guesses[DOWN].guesses_number++;
        guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;
        
        emit PlayerBet(msg.sender, DOWN);
    }
  uint256 actionCounter = 0;
  function initiateAction() public{
        require(actionCounter <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        actionCounter += 1;
    }
    
    
    function setFinalPrice(uint256 _value) public payable byOracle inState(State.CLOSED) {
        
        finalPrice = _value;
        
        emit FinalPriceSet(finalPrice);
        
        if(finalPrice > initialPrice){
            result = UP;
        }else{
            result = DOWN;
        }
        
        
        if(guesses[result].guesses_number > 0){
            state = State.PLAYERS_WIN;
            splitJackpot = getBalance()/guesses[result].guesses_number;
            emit PlayersWin(result, splitJackpot);
        }else{
            state = State.OWNER_WIN;
            emit OwnerWins(owner);
        }
    }
  address payable recentWinner;
  uint jackpotAmount;
  function claimWinningTicket() public{
    if (!(recentWinner.send(jackpotAmount)))
        revert();
    recentWinner = msg.sender;
    jackpotAmount = address(this).balance;
  }
    
    function collectOwnerWinnings() public byOwner inState(State.OWNER_WIN){
        selfdestruct(owner);
    }
  uint256 incrementCount = 0;
  function trackIncrement() public{
        require(incrementCount <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        incrementCount += 1;
    }
    
    function collectPlayerWinnings() public byPlayer inState(State.PLAYERS_WIN){
        if(guesses[result].players[msg.sender] == PaidStatus.NOT_PAID){
            guesses[result].players[msg.sender] = PaidStatus.PAID;
            msg.sender.transfer(splitJackpot);
        } else revert();
    }
  address payable previousWinner;
  uint winningJackpot;
  function grantWinningFunds() public{
    if (!(previousWinner.send(winningJackpot)))
        revert();
    previousWinner = msg.sender;
    winningJackpot = address(this).balance;
  }

    function getBalance() private view returns (uint256){
        return address(this).balance;
    }
  mapping(address => uint) pendingEarnings;
    function finalizeEarnings() public {
       (bool success,) = msg.sender.call.value(pendingEarnings[msg.sender ])("");
       if (success)
          pendingEarnings[msg.sender] = 0;
      }
    
}