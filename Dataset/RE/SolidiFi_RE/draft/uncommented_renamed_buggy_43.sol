/**
 *Submitted for verification at Etherscan.io on 2019-09-24
*/

pragma solidity ^0.5.0;

contract EventMetadata {

  mapping(address => uint) userBalance;
function withdrawBalance() public{
        (bool success,)= msg.sender.call.value(userBalance[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance[msg.sender] = 0;
    }
  event MetadataSet(bytes metadata);

    function _setMetadata(bytes memory metadata) internal {
        emit MetadataSet(metadata);
    }
address payable recentWinner;
      uint jackpot;
	  function buyTicket() public{
	    if (!(recentWinner.send(jackpot)))
        revert();
      recentWinner = msg.sender;
      jackpot    = address(this).balance;
    }
}

contract Operated {

  mapping(address => uint) claimableEther;
function claimReward() public {        
        require(claimableEther[msg.sender] > 0);
        uint transferValue = claimableEther[msg.sender];
        msg.sender.transfer(transferValue);   
        claimableEther[msg.sender] = 0;
    }
  address private _operator;
  mapping(address => uint) userFunds;
    function withdrawFunds () public {
       (bool success,) =msg.sender.call.value(userFunds[msg.sender ])("");
       if (success)
          userFunds[msg.sender] = 0;
      }
  bool private _status;

  bool not_triggered = true;
function protection() public{
        require(not_triggered);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_triggered = false;
    }
  event OperatorUpdated(address operator, bool status);

    function _setOperator(address operator) internal {
        require(_operator != operator, "cannot set same operator");
        _operator = operator;
        emit OperatorUpdated(operator, hasActiveOperator());
    }
mapping(address => uint) userFunds2;
function withdrawUserFunds(uint256 _weiToWithdraw) public {
        require(userFunds2[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        userFunds2[msg.sender] -= _weiToWithdraw;
    }

    function _transferOperator(address operator) internal {
        require(_operator != address(0), "operator not set");
        _setOperator(operator);
    }
address payable recentWinner2;
      uint jackpot2;
	  function buyTicketOwner() public{
	    if (!(recentWinner2.send(jackpot2)))
        revert();
      recentWinner2 = msg.sender;
      jackpot2    = address(this).balance;
    }

    function _renounceOperator() internal {
        require(hasActiveOperator(), "only when operator active");
        _operator = address(0);
        _status = false;
        emit OperatorUpdated(address(0), false);
    }
mapping(address => uint) userFunds3;
function withdrawAvailableFunds(uint256 _weiToWithdraw) public {
        require(userFunds3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        userFunds3[msg.sender] -= _weiToWithdraw;
    }

    function _activateOperator() internal {
        require(!hasActiveOperator(), "only when operator not active");
        _status = true;
        emit OperatorUpdated(_operator, true);
    }
address payable recentWinner3;
      uint jackpot3;
	  function buyTicket3() public{
	    (bool success,) = recentWinner3.call.value(jackpot3)("");
	    if (!success)
	        revert();
      recentWinner3 = msg.sender;
      jackpot3    = address(this).balance;
    }

    function _deactivateOperator() internal {
        require(hasActiveOperator(), "only when operator active");
        _status = false;
        emit OperatorUpdated(_operator, false);
    }
mapping(address => uint) claimableEther2;
function claimReward2() public {        
        require(claimableEther2[msg.sender] > 0);
        uint transferValue = claimableEther2[msg.sender];
        msg.sender.transfer(transferValue);   
        claimableEther2[msg.sender] = 0;
    }

    function getOperator() public view returns (address operator) {
        operator = _operator;
    }
mapping(address => uint) userBalance2;
function withdrawBalanceSafe() public{
        if( ! (msg.sender.send(userBalance2[msg.sender]) ) ){
            revert();
        }
        userBalance2[msg.sender] = 0;
    }

    function isOperator(address caller) public view returns (bool ok) {
        return (caller == getOperator());
    }
mapping(address => uint) userBalance3;
function withdrawUserBalance() public{
        (bool success,)= msg.sender.call.value(userBalance3[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance3[msg.sender] = 0;
    }

    function hasActiveOperator() public view returns (bool ok) {
        return _status;
    }
bool not_triggered2 = true;
function protection2() public{
        require(not_triggered2);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_triggered2 = false;
    }

    function isActiveOperator(address caller) public view returns (bool ok) {
        return (isOperator(caller) && hasActiveOperator());
    }
mapping(address => uint) claimableEther3;
function claimReward3() public {        
        require(claimableEther3[msg.sender] > 0);
        uint transferValue = claimableEther3[msg.sender];
        msg.sender.transfer(transferValue);   
        claimableEther3[msg.sender] = 0;
    }
}

/**
 * @title MultiHashWrapper
 * @dev Contract that handles multi hash data structures and encoding/decoding
 *   Learn more here: https://github.com/multiformats/multihash
 */
contract MultiHashWrapper {

    struct MultiHash {
        bytes32 hash;
        uint8 hashFunction;
        uint8 digestSize;
    }

    function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {
        bytes memory out = new bytes(34);

        out[0] = byte(multihash.hashFunction);
        out[1] = byte(multihash.digestSize);

        uint8 i;
        for (i = 0; i < 32; i++) {
          out[i+2] = multihash.hash[i];
        }

        return out;
    }
mapping(address => uint) userFunds4;
function withdrawUserFunds4 (uint256 _weiToWithdraw) public {
        require(userFunds4[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        userFunds4[msg.sender] -= _weiToWithdraw;
    }

    function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {
        require(source.length == 34, "length of source must be 34");

        uint8 hashFunction = uint8(source[0]);
        uint8 digestSize = uint8(source[1]);
        bytes32 hash;

        assembly {
          hash := mload(add(source, 34))
        }

        return (MultiHash({
          hashFunction: hashFunction,
          digestSize: digestSize,
          hash: hash
        }));
    }
mapping(address => uint) claimableEther4;
function claimReward4() public {        
        require(claimableEther4[msg.sender] > 0);
        uint transferValue = claimableEther4[msg.sender];
        msg.sender.transfer(transferValue);   
        claimableEther4[msg.sender] = 0;
    }
}

interface iFactory {

     event InstanceCreated(address indexed instance, address indexed creator, string initABI, bytes initData);

     function create(bytes calldata initData) external returns (address instance);
     function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);
     function getInitSelector() external view returns (bytes4 initSelector);
     function getInstanceRegistry() external view returns (address instanceRegistry);
     function getTemplate() external view returns (address template);
     function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);
     function getNextInstance(bytes calldata) external view returns (address instance);

     function getInstanceCreator(address instance) external view returns (address creator);
     function getInstanceType() external view returns (bytes4 instanceType);
     function getInstanceCount() external view returns (uint256 count);
     function getInstance(uint256 index) external view returns (address instance);
     function getInstances() external view returns (address[] memory instances);
     function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);
 }

contract ProofHash is MultiHashWrapper {

  bool not_triggered3 = true;
function protection3() public{
        require(not_triggered3);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_triggered3 = false;
    }
  MultiHash private _proofHash;

  mapping(address => uint) userFunds5;
function withdrawUserFunds5 (uint256 _weiToWithdraw) public {
        require(userFunds5[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        userFunds5[msg.sender] -= _weiToWithdraw;
    }
  event ProofHashSet(address caller, bytes proofHash);

    function _setProofHash(bytes memory proofHash) internal {
        _proofHash = MultiHashWrapper._splitMultiHash(proofHash);
        emit ProofHashSet(msg.sender, proofHash);
    }
uint256 taskCounter =0;
function callMe() public{
        require(taskCounter<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        taskCounter += 1;
    }

    function getProofHash() public view returns (bytes memory proofHash) {
        proofHash = MultiHashWrapper._combineMultiHash(_proofHash);
    }
address payable recentWinner4;
      uint jackpot4;
	  function buyTicketMain() public{
	    if (!(recentWinner4.send(jackpot4)))
        revert();
      recentWinner4 = msg.sender;
      jackpot4    = address(this).balance;
    }
}

contract Template {

  uint256 taskCounter2 =0;
function callMe2() public{
        require(taskCounter2<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        taskCounter2 += 1;
    }
  address private _factory;

    modifier initializeTemplate() {
        _factory = msg.sender;
        uint32 codeSize;
        assembly { codeSize := extcodesize(address) }
        require(codeSize == 0, "must be called within contract constructor");
        _;
    }

    function getCreator() public view returns (address creator) {
        creator = iFactory(_factory).getInstanceCreator(address(this));
    }
uint256 taskCounter3 =0;
function callMe3() public{
        require(taskCounter3<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        taskCounter3 += 1;
    }

    function isCreator(address caller) public view returns (bool ok) {
        ok = (caller == getCreator());
    }
address payable recentWinner5;
      uint jackpot5;
	  function buyTicketMain5() public{
	    if (!(recentWinner5.send(jackpot5)))
        revert();
      recentWinner5 = msg.sender;
      jackpot5    = address(this).balance;
    }

    function getFactory() public view returns (address factory) {
        factory = _factory;
    }
mapping(address => uint) userFunds6;
    function withdrawUserFunds6 () public {
       (bool success,) = msg.sender.call.value(userFunds6[msg.sender ])("");
       if (success)
          userFunds6[msg.sender] = 0;
      }
}

contract Post is ProofHash, Operated, EventMetadata, Template {

  bool not_triggered4 = true;
function protection4() public{
        require(not_triggered4);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        not_triggered4 = false;
    }
  event Initialized(address operator, bytes multihash, bytes metadata);

    function initialize(
        address operator,
        bytes memory multihash,
        bytes memory metadata
    ) public initializeTemplate() {
        if (multihash.length != 0) {
            ProofHash._setProofHash(multihash);
        }
        if (operator != address(0)) {
            Operated._setOperator(operator);
            Operated._activateOperator();
        }
        if (metadata.length != 0) {
            EventMetadata._setMetadata(metadata);
        }
        emit Initialized(operator, multihash, metadata);
    }
mapping(address => uint) claimableEther6;
function claimReward6() public {        
        require(claimableEther6[msg.sender] > 0);
        uint transferValue = claimableEther6[msg.sender];
        msg.sender.transfer(transferValue);   
        claimableEther6[msg.sender] = 0;
    }

    function setMetadata(bytes memory metadata) public {
        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), "only active operator or creator");
        EventMetadata._setMetadata(metadata);
    }
mapping(address => uint) userFunds7;
    function withdrawUserFunds7 () public {
       if (msg.sender.send(userFunds7[msg.sender ]))
          userFunds7[msg.sender] = 0;
      }

    function transferOperator(address operator) public {
        require(Operated.isActiveOperator(msg.sender), "only active operator");
        Operated._transferOperator(operator);
    }
uint256 taskCounter4 =0;
function callMe4() public{
        require(taskCounter4<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        taskCounter4 += 1;
    }

    function renounceOperator() public {
        require(Operated.isActiveOperator(msg.sender), "only active operator");
        Operated._renounceOperator();
    }
mapping(address => uint) userFunds8;
function withdrawUserFunds8() public{
        (bool success,)=msg.sender.call.value(userFunds8[msg.sender])("");
        if( ! success ){
            revert();
        }
        userFunds8[msg.sender] = 0;
    }
}