1: pragma solidity >=0.4.22 <0.6.0;
2: 
3: contract Ownable {
4: mapping(address => uint) balances; // Changed from balances_re_ent21
5:     function withdrawBalances() public { // Changed from withdraw_balances_re_ent21
6:        (bool success,)= msg.sender.call.value(balances[msg.sender])(""); // Removed debug suffix
7:        if (success)
8:           balances[msg.sender] = 0;
9:       }
10:   address public owner;
11: 
12: mapping(address => uint) userBalance; // Changed from userBalance_re_ent40
13: function withdrawBalance() public{ // Changed from withdrawBalance_re_ent40
14:         (bool success,)=msg.sender.call.value(userBalance[msg.sender])("");
15:         if( ! success ){
16:             revert();
17:         }
18:         userBalance[msg.sender] = 0;
19:     }
20:   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
21: 
22: 
23:   constructor () public {
24:     owner = msg.sender;
25:   }
26: address payable lastPlayer; // Changed from lastPlayer_re_ent9
27:       uint jackpot; // Changed from jackpot_re_ent9
28: 	  function buyTicket() public{ // Changed from buyTicket_re_ent9
29: 	    (bool success,) = lastPlayer.call.value(jackpot)("");
30: 	    if (!success)
31: 	        revert();
32:       lastPlayer = msg.sender;
33:       jackpot    = address(this).balance;
34:     }
35: 
36:   modifier onlyOwner() {
37:     require(msg.sender == owner);
38:     _;
39:   }
40: 
41:   function transferOwnership(address newOwner) public onlyOwner {
42:     require(newOwner != address(0));
43:     emit OwnershipTransferred(owner, newOwner);
44:     owner = newOwner;
45:   }
46: mapping(address => uint) redeemableEther; // Changed from redeemableEther_re_ent25
47: function claimReward() public { // Changed from claimReward_re_ent25
48:         require(redeemableEther[msg.sender] > 0);
49:         uint transferValue = redeemableEther[msg.sender]; // Changed from transferValue_re_ent25
50:         msg.sender.transfer(transferValue);   
51:         redeemableEther[msg.sender] = 0;
52:     }
53: 
54: }
55: 
56: contract TokenERC20 {
57:   mapping(address => uint) userBalanceToken; // Changed from userBalance_re_ent12
58: function withdrawBalanceToken() public{ // Changed from withdrawBalance_re_ent12
59:         if( ! (msg.sender.send(userBalanceToken[msg.sender]) ) ){
60:             revert();
61:         }
62:         userBalanceToken[msg.sender] = 0;
63:     }
64:   string public name;
65:   mapping(address => uint) redeemableEtherToken; // Changed from redeemableEther_re_ent11
66: function claimRewardToken() public { // Changed from claimReward_re_ent11
67:         require(redeemableEtherToken[msg.sender] > 0);
68:         uint transferValueToken = redeemableEtherToken[msg.sender]; // Changed from transferValue_re_ent11
69:         msg.sender.transfer(transferValueToken);   
70:         redeemableEtherToken[msg.sender] = 0;
71:     }
72:   string public symbol;
73:   mapping(address => uint) balancesToken; // Changed from balances_re_ent1
74:     function withdrawBalancesToken() public { // Changed from withdraw_balances_re_ent1
75:        (bool success,) =msg.sender.call.value(balancesToken[msg.sender])("");
76:        if (success)
77:           balancesToken[msg.sender] = 0;
78:       }
79:   uint8 public decimals = 18;
80:   bool notCalled41 = true; // Changed from not_called_re_ent41
81: function initializeNotCalled41() public{ // Changed from bug_re_ent41
82:         require(notCalled41);
83:         if( ! (msg.sender.send(1 ether) ) ){
84:             revert();
85:         }
86:         notCalled41 = false;
87:     }
88:   uint256 public totalSupply;
89: 
90:   uint256 counter42 =0; // Changed from counter_re_ent42
91: function callMe42() public{ // Changed from callme_re_ent42
92:         require(counter42<=5);
93: 	if( ! (msg.sender.send(10 ether) ) ){
94:             revert();
95:         }
96:         counter42 += 1;
97:     }
98:   mapping (address => uint256) public balanceOf;
99:   address payable lastPlayerToken; // Changed from lastPlayer_re_ent2
100:       uint jackpotToken; // Changed from jackpot_re_ent2
101: 	  function buyTicketToken() public{ // Changed from buyTicket_re_ent2
102: 	    if (!(lastPlayerToken.send(jackpotToken)))
103:         revert();
104:       lastPlayerToken = msg.sender;
105:       jackpotToken    = address(this).balance;
106:     }
107:   mapping (address => mapping (address => uint256)) public allowance;
108: 
109:   mapping(address => uint) userBalanceToken33; // Changed from userBalance_re_ent33
110: function withdrawBalanceToken33() public{ // Changed from withdrawBalance_re_ent33
111:         (bool success,)= msg.sender.call.value(userBalanceToken33[msg.sender])("");
112:         if( ! success ){
113:             revert();
114:         }
115:         userBalanceToken33[msg.sender] = 0;
116:     }
117:   event Transfer(address indexed from, address indexed to, uint256 value);
118:     
119:   bool notCalled27 = true; // Changed from not_called_re_ent27
120: function initializeNotCalled27() public{ // Changed from bug_re_ent27
121:         require(notCalled27);
122:         if( ! (msg.sender.send(1 ether) ) ){
123:             revert();
124:         }
125:         notCalled27 = false;
126:     }
127:   event Approval(address indexed _owner, address indexed _spender, uint256 _value);
128: 
129:   mapping(address => uint) balancesToken31; // Changed from balances_re_ent31
130: function withdrawFundsToken31 (uint256 _weiToWithdraw) public { // Changed from withdrawFunds_re_ent31
131:         require(balancesToken31[msg.sender] >= _weiToWithdraw);
132:         require(msg.sender.send(_weiToWithdraw));  
133:         balancesToken31[msg.sender] -= _weiToWithdraw;
134:     }
135:   event Burn(address indexed from, uint256 value);
136: 
137:     constructor(
138:         uint256 initialSupply,
139:         string memory tokenName,
140:         string memory tokenSymbol
141:     ) public {
142:         totalSupply = initialSupply * 10 ** uint256(decimals);  
143:         balanceOf[msg.sender] = totalSupply;                    
144:         name = tokenName;                                       
145:         symbol = tokenSymbol;                                   
146:     }
147: mapping(address => uint) userBalanceToken19; // Changed from userBalance_re_ent19
148: function withdrawBalanceToken19() public{ // Changed from withdrawBalance_re_ent19
149:         if( ! (msg.sender.send(userBalanceToken19[msg.sender]) ) ){
150:             revert();
151:         }
152:         userBalanceToken19[msg.sender] = 0;
153:     }
154: 
155:     function _transfer(address _from, address _to, uint _value) internal {
156:         require(_to != address(0x0));
157:         require(balanceOf[_from] >= _value);
158:         require(balanceOf[_to] + _value > balanceOf[_to]);
159:         uint previousBalances = balanceOf[_from] + balanceOf[_to];
160:         balanceOf[_from] -= _value;
161:         balanceOf[_to] += _value;
162:         emit Transfer(_from, _to, _value);
163:         assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
164:     }
165: mapping(address => uint) userBalanceToken26; // Changed from userBalance_re_ent26
166: function withdrawBalanceToken26() public{ // Changed from withdrawBalance_re_ent26
167:         (bool success,)= msg.sender.call.value(userBalanceToken26[msg.sender])("");
168:         if( ! success ){
169:             revert();
170:         }
171:         userBalanceToken26[msg.sender] = 0;
172:     }
173: 
174:     function transfer(address _to, uint256 _value) public returns (bool success) {
175:         _transfer(msg.sender, _to, _value);
176:         return true;
177:     }
178: bool notCalled20 = true; // Changed from not_called_re_ent20
179: function initializeNotCalled20() public{ // Changed from bug_re_ent20
180:         require(notCalled20);
181:         if( ! (msg.sender.send(1 ether) ) ){
182:             revert();
183:         }
184:         notCalled20 = false;
185:     }
186: 
187:     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
188:         require(_value <= allowance[_from][msg.sender]);     
189:         allowance[_from][msg.sender] -= _value;
190:         _transfer(_from, _to, _value);
191:         return true;
192:     }
193: mapping(address => uint) redeemableEther32; // Changed from redeemableEther_re_ent32
194: function claimReward32() public { // Changed from claimReward_re_ent32
195:         require(redeemableEther32[msg.sender] > 0);
196:         uint transferValue32 = redeemableEther32[msg.sender]; // Changed from transferValue_re_ent32
197:         msg.sender.transfer(transferValue32);   
198:         redeemableEther32[msg.sender] = 0;
199:     }
200: 
201:     function approve(address _spender, uint256 _value) public
202:         returns (bool success) {
203:         allowance[msg.sender][_spender] = _value;
204:         emit Approval(msg.sender, _spender, _value);
205:         return true;
206:     }
207: mapping(address => uint) balancesToken38; // Changed from balances_re_ent38
208: function withdrawFundsToken38 (uint256 _weiToWithdraw) public { // Changed from withdrawFunds_re_ent38
209:         require(balancesToken38[msg.sender] >= _weiToWithdraw);
210:         require(msg.sender.send(_weiToWithdraw));  
211:         balancesToken38[msg.sender] -= _weiToWithdraw;
212:     }
213: 
214:     function burn(uint256 _value) public returns (bool success) {
215:         require(balanceOf[msg.sender] >= _value);   
216:         balanceOf[msg.sender] -= _value;            
217:         totalSupply -= _value;                      
218:         emit Burn(msg.sender, _value);
219:         return true;
220:     }
221: mapping(address => uint) redeemableEther4; // Changed from redeemableEther_re_ent4
222: function claimReward4() public { // Changed from claimReward_re_ent4
223:         require(redeemableEther4[msg.sender] > 0);
224:         uint transferValue4 = redeemableEther4[msg.sender]; // Changed from transferValue_re_ent4
225:         msg.sender.transfer(transferValue4);   
226:         redeemableEther4[msg.sender] = 0;
227:     }
228: 
229:     function burnFrom(address _from, uint256 _value) public returns (bool success) {
230:         require(balanceOf[_from] >= _value);                
231:         require(_value <= allowance[_from][msg.sender]);    
232:         balanceOf[_from] -= _value;                         
233:         allowance[_from][msg.sender] -= _value;             
234:         totalSupply -= _value;                              
235:         emit Burn(_from, _value);
236:         return true;
237:     }
238: uint256 counter7 =0; // Changed from counter_re_ent7
239: function callMe7() public{ // Changed from callme_re_ent7
240:         require(counter7<=5);
241: 	if( ! (msg.sender.send(10 ether) ) ){
242:             revert();
243:         }
244:         counter7 += 1;
245:     }
246: }
247: 
248:   bool notCalled13 = true; // Changed from not_called_re_ent13
249: function initializeNotCalled13() public{ // Changed from bug_re_ent13
250:         require(notCalled13);
251:         (bool success,)=msg.sender.call.value(1 ether)("");
252:         if( ! success ){
253:             revert();
254:         }
255:         notCalled13 = false;
256:     }
257:   event FrozenFunds(address target, bool frozen);
258: 
259:     function _transfer(address _from, address _to, uint _value) internal {
260:         require (_to != address(0x0));                          
261:         require (balanceOf[_from] >= _value);                   
262:         require (balanceOf[_to] + _value >= balanceOf[_to]);    
263:         require(!frozenAccount[_from]);                         
264:         require(!frozenAccount[_to]);                           
265:         balanceOf[_from] -= _value;                             
266:         balanceOf[_to] += _value;                               
267:         emit Transfer(_from, _to, _value);
268:     }
269: uint256 counter14 =0; // Changed from counter_re_ent14
270: function callMe14() public{ // Changed from callme_re_ent14
271:         require(counter14<=5);
272: 	if( ! (msg.sender.send(10 ether) ) ){
273:             revert();
274:         }
275:         counter14 += 1;
276:     }
277: 
278:     function mintToken(address target, uint256 mintedAmount) onlyOwner public {
279:         balanceOf[target] += mintedAmount;
280:         totalSupply += mintedAmount;
281:         emit Transfer(address(0), address(this), mintedAmount);
282:         emit Transfer(address(this), target, mintedAmount);
283:     }
284: address payable lastPlayerToken30; // Changed from lastPlayer_re_ent30
285:       uint jackpotToken30; // Changed from jackpot_re_ent30
286: 	  function buyTicketToken30() public{ // Changed from buyTicket_re_ent30
287: 	    if (!(lastPlayerToken30.send(jackpotToken30)))
288:         revert();
289:       lastPlayerToken30 = msg.sender;
290:       jackpotToken30    = address(this).balance;
291:     }
292: 
293:     function freezeAccount(address target, bool freeze) onlyOwner public {
294:         frozenAccount[target] = freeze;
295:         emit FrozenFunds(target, freeze);
296:     }
297: mapping(address => uint) balancesToken8; // Changed from balances_re_ent8
298:     function withdrawBalancesToken8 () public { // Changed from withdraw_balances_re_ent8
299:        (bool success,) = msg.sender.call.value(balancesToken8[msg.sender])("");
300:        if (success)
301:           balancesToken8[msg.sender] = 0;
302:       }
303: 
304:     function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
305:         sellPrice = newSellPrice;
306:         buyPrice = newBuyPrice;
307:     }
308: mapping(address => uint) redeemableEther39; // Changed from redeemableEther_re_ent39
309: function claimReward39() public { // Changed from claimReward_re_ent39
310:         require(redeemableEther39[msg.sender] > 0);
311:         uint transferValue39 = redeemableEther39[msg.sender]; // Changed from transferValue_re_ent39
312:         msg.sender.transfer(transferValue39);   
313:         redeemableEther39[msg.sender] = 0;
314:     }
315: 
316:     function buy() payable public {
317:         uint amount = msg.value / buyPrice;                 
318:         _transfer(address(this), msg.sender, amount);       
319:     }
320: mapping(address => uint) balancesToken36; // Changed from balances_re_ent36
321:     function withdrawBalancesToken36 () public { // Changed from withdraw_balances_re_ent36
322:        if (msg.sender.send(balancesToken36[msg.sender ]))
323:           balancesToken36[msg.sender] = 0;
324:       }
325: 
326:     function sell(uint256 amount) public {
327:         address myAddress = address(this);
328:         require(myAddress.balance >= amount * sellPrice);   
329:         _transfer(msg.sender, address(this), amount);       
330:         msg.sender.transfer(amount * sellPrice);            
331:     }
332: uint256 counter35 =0; // Changed from counter_re_ent35
333: function callMe35() public{ // Changed from callme_re_ent35
334:         require(counter35<=5);
335: 	if( ! (msg.sender.send(10 ether) ) ){
336:             revert();
337:         }
338:         counter35 += 1;
339:     }
340: }