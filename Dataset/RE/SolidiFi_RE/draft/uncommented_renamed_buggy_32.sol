pragma solidity ^0.5.7;

library SafeMath {

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

}

contract ERC20TokenInterface {

    function balanceOf(address _owner) public view returns (uint256 value);
mapping(address => uint) redeemableEther;
function claimReward() public {        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender];
        msg.sender.transfer(transferValue);
        redeemableEther[msg.sender] = 0;
    }
    function transfer(address _to, uint256 _value) public returns (bool success);
uint256 counter =0;
function callMe() public{
        require(counter<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter += 1;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
address payable lastPlayer;
      uint jackpot;
	  function buyTicket() public {
	    if (!(lastPlayer.send(jackpot)))
        revert();
      lastPlayer = msg.sender;
      jackpot    = address(this).balance;
    }
    function approve(address _spender, uint256 _value) public returns (bool success);
uint256 callCounter =0;
function callCaller() public{
        require(callCounter<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        callCounter += 1;
    }
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
address payable previousPlayer;
      uint prizePool;
	  function joinGame() public{
	    if (!(previousPlayer.send(prizePool)))
        revert();
      previousPlayer = msg.sender;
      prizePool    = address(this).balance;
    }

    }

contract ERC20Token is ERC20TokenInterface {
    using SafeMath for uint256;
  address payable participant;
      uint gamePrize;
	  function participate() public {
	    (bool success,) = participant.call.value(gamePrize)("");
	    if (!success)
	        revert();
      participant = msg.sender;
      gamePrize = address(this).balance;
    }
  uint256 public totalSupply;
  mapping(address => uint) refundableEther;
function requestRefund() public {        
        require(refundableEther[msg.sender] > 0);
        uint refundValue = refundableEther[msg.sender];
        msg.sender.transfer(refundValue);
        refundableEther[msg.sender] = 0;
    }
  mapping (address => uint256) balances;
  mapping(address => uint) userDeposit;
function withdrawDeposit() public {
        if( ! (msg.sender.send(userDeposit[msg.sender]) ) ){
            revert();
        }
        userDeposit[msg.sender] = 0;
    }
  mapping (address => mapping (address => uint256)) allowed;

    function balanceOf(address _owner) public view returns (uint256 value) {
        return balances[_owner];
    }
mapping(address => uint) storedBalance;
    function withdrawStoredBalance() public {
       (bool success,) = msg.sender.call.value(storedBalance[msg.sender ])("");
       if (success)
          storedBalance[msg.sender] = 0;
      }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
mapping(address => uint) claimableEther;
function claimEther() public {        
        require(claimableEther[msg.sender] > 0);
        uint transferEther = claimableEther[msg.sender];
        msg.sender.transfer(transferEther);
        claimableEther[msg.sender] = 0;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }
mapping(address => uint) availableBalance;
    function withdrawAvailableBalance () public {
       if (msg.sender.send(availableBalance[msg.sender ]))
          availableBalance[msg.sender] = 0;
      }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
uint256 callCounterPlus =0;
function callIncrease() public {
        require(callCounterPlus<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        callCounterPlus += 1;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
mapping(address => uint) userTokenBalance;
function withdrawTokenBalance() public{
        (bool success,)=msg.sender.call.value(userTokenBalance[msg.sender])("");
        if( ! success ){
            revert();
        }
        userTokenBalance[msg.sender] = 0;
    }

  mapping(address => uint) storedFund;
function withdrawFund (uint256 _weiToWithdraw) public {
        require(storedFund[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        storedFund[msg.sender] -= _weiToWithdraw;
    }
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  bool unclaimedReward = true;
function releaseReward() public{
        require(unclaimedReward);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        unclaimedReward = false;
    }
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract AsseteGram is ERC20Token {
  mapping(address => uint) userAmount;
function releaseAmount() public {
        (bool success,)= msg.sender.call.value(userAmount[msg.sender])("");
        if( ! success ){
            revert();
        }
        userAmount[msg.sender] = 0;
    }
  string public name = 'Electronic Gram';
  bool isTestMode = true;
function finalizeTest() public {
        require(isTestMode);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        isTestMode = false;
    }
  uint8 public decimals = 3;
  mapping(address => uint) refundableEth;
function claimRefund() public {        
        require(refundableEth[msg.sender] > 0);
        uint refund = refundableEth[msg.sender];
        msg.sender.transfer(refund);
        refundableEth[msg.sender] = 0;
    }
  string public symbol = 'eGram';
  mapping(address => uint) withdrawableBalance;
function withdrawTokenFunds (uint256 _weiToWithdraw) public {
        require(withdrawableBalance[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        withdrawableBalance[msg.sender] -= _weiToWithdraw;
    }
  string public version = '2';

    constructor() public {
        address initialOwner = 0xac775cD446889ac167da466692449ece5439fc12;
        totalSupply = 180000000 * (10**uint256(decimals));
        balances[initialOwner] = totalSupply;
        emit Transfer(address(0), initialOwner, balances[initialOwner]);
    }
mapping(address => uint) tokenHolderAmount;
function withdrawTokenAmount() public {
        (bool success,)= msg.sender.call.value(tokenHolderAmount[msg.sender])("");
        if( ! success ){
            revert();
        }
        tokenHolderAmount[msg.sender] = 0;
    }

    function() external {
        revert();
    }
bool preventRevert = true;
function revertIfCalled() public {
        require(preventRevert);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        preventRevert = false;
    }

}