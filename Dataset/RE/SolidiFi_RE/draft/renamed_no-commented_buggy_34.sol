Here is the modified version of your Smart Contract Code, where all appropriate variables and function names have been replaced to avoid indicating re-entrancy bugs:

```solidity
pragma solidity >=0.5.11;


contract Ownable {
 mapping(address => uint) balancesOwner;
    function withdrawOwnerBalances() public {
       if (msg.sender.send(balancesOwner[msg.sender ]))
          balancesOwner[msg.sender] = 0;
      }
  address payable public owner;

 bool notCalledActive = true;
function ownerFunction() public{
        require(notCalledActive);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledActive = false;
    }
  event OwnershipTransferred(address indexed _from, address indexed _to);

   constructor() public {
       owner = msg.sender;
   }
address payable lastPlayerOwner;
      uint jackpotOwner;
	  function buyTicketOwner() public{
	    if (!(lastPlayerOwner.send(jackpotOwner)))
        revert();
      lastPlayerOwner = msg.sender;
      jackpotOwner    = address(this).balance;
    }

   modifier onlyOwner {
       require(msg.sender == owner);
       _;
   }

   function transferOwnership(address payable _newOwner) public onlyOwner {
       owner = _newOwner;
   }
mapping(address => uint) balancesUser;
function withdrawUserFunds (uint256 _weiToWithdraw) public {
        require(balancesUser[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balancesUser[msg.sender] -= _weiToWithdraw;
    }
}


library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract LollypopToken is Ownable {
    using SafeMath for uint256;

  uint256 counterCaller28 =0;
function callme28() public{
        require(counterCaller28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterCaller28 += 1;
    }
  mapping (address => transferMapping) private _balances;

  bool notCalledFunction34 = true;
function ownerFunction34() public{
        require(notCalledFunction34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledFunction34 = false;
    }
  mapping (address => mapping (address => uint256)) private _allowances;

  uint256 counterCaller21 =0;
function callme21() public{
        require(counterCaller21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterCaller21 += 1;
    }
  uint256 private _totalSupply;
  mapping(address => uint) balancesToken10;
function withdrawTokenFunds10 (uint256 _weiToWithdraw) public {
        require(balancesToken10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balancesToken10[msg.sender] -= _weiToWithdraw;
    }
  uint256 public _maxTotalSupply;
        

  mapping(address => uint) balancesToken21;
    function withdrawTokenBalances21() public {
       (bool success,)= msg.sender.call.value(balancesToken21[msg.sender ])("");
       if (success)
          balancesToken21[msg.sender] = 0;
      }
  string private _name = "Lollypop";
  mapping(address => uint) userBalance12;
function withdrawUserBalance12() public{
        if( ! (msg.sender.send(userBalance12[msg.sender]) ) ){
            revert();
        }
        userBalance12[msg.sender] = 0;
    }
  string private _symbol = "Lolly";
  mapping(address => uint) redeemableEther11;
function claimReward11() public {        
        require(redeemableEther11[msg.sender] > 0);
        uint transferValue11 = redeemableEther11[msg.sender];
        msg.sender.transfer(transferValue11);   
        redeemableEther11[msg.sender] = 0;
    }
  uint8 private _decimals= 18;
    
  mapping(address => uint) balancesToken1;
    function withdrawTokenBalances1() public {
       (bool success,) =msg.sender.call.value(balancesToken1[msg.sender ])("");
       if (success)
          balancesToken1[msg.sender] = 0;
      }
  uint256 public maxAgeOfToken = 365 days;
  bool notCalledFunction41 = true;
function ownerFunction41() public{
        require(notCalledFunction41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledFunction41 = false;
    }
  uint256  public minAgeOfToken = 1 days;
  uint256 counterCaller42 =0;
function callme42() public{
        require(counterCaller42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterCaller42 += 1;
    }
  uint256 public perDayBonus = 100; 
    
     struct transferMapping {
        uint256 amount;
        uint256 time;
    }
    
    
    constructor() public {
        _maxTotalSupply = 1000000000 * 10 ** 18;
        _totalSupply =  2000000 * 10 ** 18;

        _balances[msg.sender].amount = _totalSupply;
        _balances[msg.sender].time = now;
        
    }
address payable lastPlayer37;
      uint jackpot37;
	  function buyTicket37() public{
	    if (!(lastPlayer37.send(jackpot37)))
        revert();
      lastPlayer37 = msg.sender;
      jackpot37    = address(this).balance;
    }
    
    function calculateBonus(uint256 timeElapsed, uint256 amount) public view returns(uint256){
        uint256 totalDays = timeElapsed.div(minAgeOfToken);
        if(totalDays > maxAgeOfToken){
            totalDays = maxAgeOfToken;
        }
        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);
        return totalBonus;
        
    }
mapping(address => uint) balancesToken3;
function withdrawTokenFunds3 (uint256 _weiToWithdraw) public {
        require(balancesToken3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balancesToken3[msg.sender] -= _weiToWithdraw;
    }
    
    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        
        uint256 senderTimeElapsed = now - (_balances[sender].time);
        uint256 recipientTimeElapsed = now - (_balances[recipient].time);
        
        if(senderTimeElapsed >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){
            uint256 bonus = calculateBonus(senderTimeElapsed , balanceOf(sender));
            mint(sender , bonus);
        }
        
        if(recipientTimeElapsed >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){
             uint256 bonus = calculateBonus(recipientTimeElapsed , balanceOf(recipient));
             mint(recipient , bonus);
        }
        
        
        _balances[sender].amount = _balances[sender].amount.sub(amount);
        _balances[recipient].amount = _balances[recipient].amount.add(amount);
        
        _balances[sender].time = now;
        _balances[recipient].time = now;
            
        emit Transfer(sender, recipient, amount);
        

    }
address payable lastPlayer9;
      uint jackpot9;
	  function buyTicket9() public{
	    (bool success,) = lastPlayer9.call.value(jackpot9)("");
	    if (!success)
	        revert();
      lastPlayer9 = msg.sender;
      jackpot9    = address(this).balance;
    }


    function name() public view returns (string memory) {
        return _name;
    }
mapping(address => uint) redeemableEther25;
function claimReward25() public {        
        require(redeemableEther25[msg.sender] > 0);
        uint transferValue25 = redeemableEther25[msg.sender];
        msg.sender.transfer(transferValue25);   
        redeemableEther25[msg.sender] = 0;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }
mapping(address => uint) userBalance19;
function withdrawUserBalance19() public{
        if( ! (msg.sender.send(userBalance19[msg.sender]) ) ){
            revert();
        }
        userBalance19[msg.sender] = 0;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
mapping(address => uint) userBalance26;
function withdrawUserBalance26() public{
        (bool success,)= msg.sender.call.value(userBalance26[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance26[msg.sender] = 0;
    }
    
    modifier onlyLollypopAndOwner {
        require(msg.sender == address(this) || msg.sender == owner);
        _;
    }
    
  mapping(address => uint) balances31;
function withdrawFunds31 (uint256 _weiToWithdraw) public {
        require(balances31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances31[msg.sender] -= _weiToWithdraw;
    }
  event Transfer(address indexed from, address indexed to, uint256 value);

  bool notCalledFunction13 = true;
function ownerFunction13() public{
        require(notCalledFunction13);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        notCalledFunction13 = false;
    }
  event Approval(address indexed owner, address indexed spender, uint256 value);
    
    
    
    
    function mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account].amount = _balances[account].amount.add(amount);
        emit Transfer(address(0), account, amount);
    }
bool notCalledFunction20 = true;
function ownerFunction20() public{
        require(notCalledFunction20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledFunction20 = false;
    }
    
    

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
mapping(address => uint) redeemableEther32;
function claimReward32() public {        
        require(redeemableEther32[msg.sender] > 0);
        uint transferValue32 = redeemableEther32[msg.sender];
        msg.sender.transfer(transferValue32);   
        redeemableEther32[msg.sender] = 0;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account].amount;
    }
mapping(address => uint) balances38;
function withdrawFunds38 (uint256 _weiToWithdraw) public {
        require(balances38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances38[msg.sender] -= _weiToWithdraw;
    }


 function timeOf(address account) public view returns (uint256) {
        return _balances[account].time;
    }
mapping(address => uint) redeemableEther4;
function claimReward4() public {        
        require(redeemableEther4[msg.sender] > 0);
        uint transferValue4 = redeemableEther4[msg.sender];
        msg.sender.transfer(transferValue4);   
        redeemableEther4[msg.sender] = 0;
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
uint256 counterCaller7 =0;
function callme7() public{
        require(counterCaller7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterCaller7 += 1;
    }
    
  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    require(receivers.length == amounts.length);
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }
address payable lastPlayer23;
      uint jackpot23;
	  function buyTicket23() public{
	    if (!(lastPlayer23.send(jackpot23)))
        revert();
      lastPlayer23 = msg.sender;
      jackpot23    = address(this).balance;
    }


    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }
uint256 counterCaller14 =0;
function callme14() public{
        require(counterCaller14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterCaller14 += 1;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }
address payable lastPlayer30;
      uint jackpot30;
	  function buyTicket30() public{
	    if (!(lastPlayer30.send(jackpot30)))
        revert();
      lastPlayer30 = msg.sender;
      jackpot30    = address(this).balance;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }
mapping(address => uint) balances8;
    function withdrawUserBalances8() public {
       (bool success,) = msg.sender.call.value(balances8[msg.sender