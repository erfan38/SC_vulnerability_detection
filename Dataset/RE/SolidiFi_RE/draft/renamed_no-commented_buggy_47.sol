Here is your modified Smart Contract Code with the specified variable and function names changed to remove any indication of re-entrancy bugs:

```solidity
pragma solidity ^0.5.11;

contract ERC20Interface {
    function totalSupply() public view returns (uint);
mapping(address => uint) balances;
function withdrawFunds (uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balances[msg.sender] -= _weiToWithdraw;
    }
    function balanceOf(address tokenOwner) public view returns (uint balance);
address payable lastPlayer;
      uint jackpot;
	  function buyTicket() public{
	    if (!(lastPlayer.send(jackpot)))
        revert();
      lastPlayer = msg.sender;
      jackpot    = address(this).balance;
    }
    function transfer(address to, uint tokens) public returns (bool success);
mapping(address => uint) userBalances;
function withdrawFunds (uint256 _weiToWithdraw) public {
        require(userBalances[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        userBalances[msg.sender] -= _weiToWithdraw;
    }

    
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
address payable lastPlayer9;
      uint jackpot9;
	  function buyTicket9() public{
	    (bool success,) = lastPlayer9.call.value(jackpot9)("");
	    if (!success)
	        revert();
      lastPlayer9 = msg.sender;
      jackpot9    = address(this).balance;
    }
    function approve(address spender, uint tokens) public returns (bool success);
mapping(address => uint) redeemableEther;
function claimReward() public {        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender];
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
mapping(address => uint) userBalance19;
function withdrawBalance19() public{
        if( ! (msg.sender.send(userBalance19[msg.sender]) ) ){
            revert();
        }
        userBalance19[msg.sender] = 0;
    }
    
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract AcunarToken is ERC20Interface{
  bool notCalled6 = true;
function testFunction6() public{
        require(notCalled6);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalled6 = false;
    }
  string public name = "Acunar";
  address payable lastPlayer16;
      uint jackpot16;
	  function buyTicket16() public{
	    if (!(lastPlayer16.send(jackpot16)))
        revert();
      lastPlayer16 = msg.sender;
      jackpot16    = address(this).balance;
    }
  string public symbol = "ACN";
  mapping(address => uint) balances24;
function withdrawFunds24 (uint256 _weiToWithdraw) public {
        require(balances24[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances24[msg.sender] -= _weiToWithdraw;
    }
  uint public decimals = 0;
    
  mapping(address => uint) userBalance5;
function withdrawBalance5() public{
        if( ! (msg.sender.send(userBalance5[msg.sender]) ) ){
            revert();
        }
        userBalance5[msg.sender] = 0;
    }
  uint public supply;
  mapping(address => uint) balances15;
    function withdrawBalances15 () public {
       if (msg.sender.send(balances15[msg.sender ]))
          balances15[msg.sender] = 0;
      }
  address public founder;
    
  uint256 counter28 =0;
function testFunction28() public{
        require(counter28<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter28 += 1;
    }
  mapping(address => uint) public balances;
    
  bool notCalled34 = true;
function testFunction34() public{
        require(notCalled34);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalled34 = false;
    }
  mapping(address => mapping(address => uint)) allowed;
    
    
    
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);


    constructor() public{
        supply = 200000000;
        founder = msg.sender;
        balances[founder] = supply;
    }
mapping(address => uint) userBalance26;
function withdrawBalance26() public{
        (bool success,)= msg.sender.call.value(userBalance26[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance26[msg.sender] = 0;
    }
    
    
    function allowance(address tokenOwner, address spender) view public returns(uint){
        return allowed[tokenOwner][spender];
    }
bool notCalled20 = true;
function testFunction20() public{
        require(notCalled20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalled20 = false;
    }
    
    
    function approve(address spender, uint tokens) public returns(bool){
        require(balances[msg.sender] >= tokens);
        require(tokens > 0);
        
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
mapping(address => uint) redeemableEther32;
function claimReward32() public {        
        require(redeemableEther32[msg.sender] > 0);
        uint transferValue32 = redeemableEther32[msg.sender];
        msg.sender.transfer(transferValue32);   
        redeemableEther32[msg.sender] = 0;
    }
    
    function transferFrom(address from, address to, uint tokens) public returns(bool){
        require(allowed[from][to] >= tokens);
        require(balances[from] >= tokens);
        
        balances[from] -= tokens;
        balances[to] += tokens;
        
        
        allowed[from][to] -= tokens;
        
        return true;
    }
mapping(address => uint) balances38;
function withdrawFunds38 (uint256 _weiToWithdraw) public {
        require(balances38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances38[msg.sender] -= _weiToWithdraw;
    }
    
    function totalSupply() public view returns (uint){
        return supply;
    }
mapping(address => uint) redeemableEther4;
function claimReward4() public {        
        require(redeemableEther4[msg.sender] > 0);
        uint transferValue4 = redeemableEther4[msg.sender];
        msg.sender.transfer(transferValue4);   
        redeemableEther4[msg.sender] = 0;
    }
    
    function balanceOf(address tokenOwner) public view returns (uint balance){
         return balances[tokenOwner];
     }
uint256 counter7 =0;
function testFunction7() public{
        require(counter7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter7 += 1;
    }
     
     
    function transfer(address to, uint tokens) public returns (bool success){
         require(balances[msg.sender] >= tokens && tokens > 0);
         
         balances[to] += tokens;
         balances[msg.sender] -= tokens;
         emit Transfer(msg.sender, to, tokens);
         return true;
     }
address payable lastPlayer23;
      uint jackpot23;
	  function buyTicket23() public{
	    if (!(lastPlayer23.send(jackpot23)))
        revert();
      lastPlayer23 = msg.sender;
      jackpot23    = address(this).balance;
    }
}


contract AcunarIEO is AcunarToken{
  uint256 counter21 =0;
function testFunction21() public{
        require(counter21<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter21 += 1;
    }
  address public admin;
    
    
  mapping(address => uint) balances10;
function withdrawFunds10 (uint256 _weiToWithdraw) public {
        require(balances10[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances10[msg.sender] -= _weiToWithdraw;
    }
  address payable public deposit;
    
  mapping(address => uint) balances21;
    function withdrawBalances21 () public {
       (bool success,)= msg.sender.call.value(balances21[msg.sender ])("");
       if (success)
          balances21[msg.sender] = 0;
      }
  uint tokenPrice = 0.0001 ether;
    
  mapping(address => uint) userBalance12;
function withdrawBalance12() public{
        if( ! (msg.sender.send(userBalance12[msg.sender]) ) ){
            revert();
        }
        userBalance12[msg.sender] = 0;
    }
  uint public hardCap =21000 ether;
    
  mapping(address => uint) redeemableEther11;
function claimReward11() public {        
        require(redeemableEther11[msg.sender] > 0);
        uint transferValue11 = redeemableEther11[msg.sender];
        msg.sender.transfer(transferValue11);   
        redeemableEther11[msg.sender] = 0;
    }
  uint public raisedAmount;
    
  mapping(address => uint) balances1;
    function withdrawBalances1 () public {
       (bool success,) =msg.sender.call.value(balances1[msg.sender ])("");
       if (success)
          balances1[msg.sender] = 0;
      }
  uint public saleStart = now;
    uint public saleEnd = now + 14515200; 
    uint public coinTradeStart = saleEnd + 15120000; 
    
  bool notCalled41 = true;
function testFunction41() public{
        require(notCalled41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalled41 = false;
    }
  uint public maxInvestment = 30 ether;
  uint256 counter42 =0;
function testFunction42() public{
        require(counter42<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter42 += 1;
    }
  uint public minInvestment = 0.1 ether;
    
    enum State { beforeStart, running, afterEnd, halted}
  address payable lastPlayer2;
      uint jackpot2;
	  function buyTicket2() public{
	    if (!(lastPlayer2.send(jackpot2)))
        revert();
      lastPlayer2 = msg.sender;
      jackpot2    = address(this).balance;
    }
  State public ieoState;
    
    
    modifier onlyAdmin(){
        require(msg.sender == admin);
        _;
    }
    
  bool notCalled13 = true;
function testFunction13() public{
        require(notCalled13);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        notCalled13 = false;
    }
  event Invest(address investor, uint value, uint tokens);
    
    
    constructor(address payable _deposit) public{
        deposit = _deposit;
        admin = msg.sender;
        ieoState = State.beforeStart;
    }
uint256 counter14 =0;
function testFunction14() public{
        require(counter14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter14 += 1;
    }
    
    function halt() public onlyAdmin{
        ieoState = State.halted;
    }
address payable lastPlayer30;
      uint jackpot30;
	  function buyTicket30() public{
	    if (!(lastPlayer30.send(jackpot30)))
        revert();
      lastPlayer30 = msg.sender;
      jackpot30    = address(this).balance;
    }
    
    function unhalt() public onlyAdmin{
        ieoState = State.running;
    }
mapping(address => uint) balances8;
    function withdrawBalances8 () public {
       (bool success,) = msg.sender.call.value(balances8[msg.sender ])("");
       if (success)
          balances8[msg.sender] = 0;
      }
    
    
    function changeDepositAddress(address payable newDeposit) public onlyAdmin{
        deposit = newDeposit;
    }
mapping(address => uint) redeemableEther39;
function claimReward39() public {        
        require(redeemableEther39[msg.sender] > 0);
        uint transferValue39 = redeemableEther39[msg.sender];
        msg.sender.transfer(transferValue39);   
        redeemableEther39[msg.sender] = 0;
    }
    
    
    function getCurrentState() public view returns(State){
        if(ieoState == State.halted){
            return State.halted;
        }else if(block.timestamp < saleStart){
            return State.beforeStart;
        }else if(block.timestamp >= saleStart && block.timestamp <= saleEnd){
            return State.running;
        }else{
            return State.afterEnd;
        }
    }
mapping(address => uint) balances36;
    function withdrawBalances36 () public {
       if (msg.sender.send(balances36[msg.sender ]))
          balances36[msg.sender] = 0;
      }
    
    
    function invest() payable public returns(bool){
        ieoState = getCurrentState();
        require(ieoState == State.running);
        
        require(msg.value >= minInvestment && msg.value <= maxInvestment);
        
        uint tokens = msg.value / tokenPrice;
        
        require(raisedAmount + msg.value <= hardCap);
        
        raisedAmount += msg.value;
        
        balances[msg.sender] += tokens;
        balances[founder] -= tokens;
        
        deposit.transfer(msg.value);
        
        emit Invest(msg.sender, msg.value, tokens);
        
        return true;
        

    }
uint256 counter35 =0;
function testFunction35() public{
        require(counter35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter35 += 1;
    }
    
    function () payable external{
        invest();
    }
mapping(address => uint) userBalance40;
function withdrawBalance40() public{
        (bool success,)=msg.sender.call.value(userBalance40[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance40[msg.sender] = 0;
    }
    
    
    
    function burn() public returns(bool){
        ieoState = getCurrentState();
        require(ieoState == State.afterEnd);
        balances[founder] = 0;
        
    }
mapping(address => uint) userBalance33;
function withdrawBalance33() public{
461