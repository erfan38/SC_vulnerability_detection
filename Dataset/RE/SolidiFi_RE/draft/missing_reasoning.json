[{
    "vulnerableLines": "53-58",
    "vulnerabilityReason": "The function callFunctionWithLimit() sends ether to msg.sender before incrementing the counterCallLimit. This can be exploited by reentrancy attacks.",
    "potentialSecurityRisk": "An attacker could bypass the limit by making reentrant calls, withdrawing more funds than allowed.",
    "fixedCode": "function callFunctionWithLimit() public { require(counterCallLimit <= 5); counterCallLimit += 1; require(msg.sender.send(10 ether)); }"
  },
  {
    "vulnerableLines": "74-81",
    "vulnerabilityReason": "The callFunctionWithLimitTwo() function sends ether before updating the counterCallLimitTwo, making it vulnerable to reentrancy.",
    "potentialSecurityRisk": "An attacker can exploit this by making multiple reentrant calls to withdraw more funds than intended.",
    "fixedCode": "function callFunctionWithLimitTwo() public { require(counterCallLimitTwo <= 5); counterCallLimitTwo += 1; require(msg.sender.send(10 ether)); }"
  },
  {
    "vulnerableLines": "83-90",
    "vulnerabilityReason": "The actionOnNotCalled() function sends ether to msg.sender before setting isNotCalledVariable to false. This creates a reentrancy vulnerability.",
    "potentialSecurityRisk": "A malicious contract could reenter this function before the isNotCalledVariable is set to false, potentially draining funds repeatedly.",
    "fixedCode": "function actionOnNotCalled() public { require(isNotCalledVariable); isNotCalledVariable = false; (bool success,) = msg.sender.call.value(1 ether)(''); require(success); }"
  },
  {
    "vulnerableLines": "107-113",
    "vulnerabilityReason": "The withdrawAllEther() function sends all the ether to the caller without checking or updating the balance state, making it vulnerable to reentrancy attacks.",
    "potentialSecurityRisk": "An attacker could exploit this vulnerability to withdraw all ether from the contract multiple times before the state is updated, resulting in a complete loss of funds.",
    "fixedCode": "function withdrawAllEther() public {uint amount = address(this).balance; require(msg.sender.send(amount));}"
  },
  {
    "vulnerableLines": "155-162",
    "vulnerabilityReason": "The callFunctionWithLimitThree() function sends ether to msg.sender before incrementing the counterCallLimitThree, allowing reentrancy attacks.",
    "potentialSecurityRisk": "An attacker could bypass the call limit by making multiple reentrant calls, draining the contract's funds.",
    "fixedCode": "function callFunctionWithLimitThree() public { require(counterCallLimitThree <= 5); counterCallLimitThree += 1; require(msg.sender.send(10 ether)); }"
  }
]