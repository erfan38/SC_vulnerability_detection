1: pragma solidity ^0.5.0;
2: 
3: library SafeMath {
4:     function add(uint256 a, uint256 b) internal pure returns (uint256) {
5:         uint256 c = a + b;
6:         require(c >= a, "SafeMath: addition overflow");
7: 
8:         return c;
9:     }
10: 
11:     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
12:         require(b <= a, "SafeMath: subtraction overflow");
13:         uint256 c = a - b;
14: 
15:         return c;
16:     }
17: 
18:     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
19:         if (a == 0) {
20:             return 0;
21:         }
22: 
23:         uint256 c = a * b;
24:         require(c / a == b, "SafeMath: multiplication overflow");
25: 
26:         return c;
27:     }
28: 
29:     function div(uint256 a, uint256 b) internal pure returns (uint256) {
30:         require(b > 0, "SafeMath: division by zero");
31:         uint256 c = a / b;
32: 
33:         return c;
34:     }
35: 
36:     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
37:         require(b != 0, "SafeMath: modulo by zero");
38:         return a % b;
39:     }
40: }
41: 
42: 
43: interface IERC20 {
44:     function totalSupply() external view returns (uint256);
45: 
46:     function balanceOf(address account) external view returns (uint256);
47: 
48:     function transfer(address recipient, uint256 amount) external returns (bool);
49: 
50:     function allowance(address owner, address spender) external view returns (uint256);
51: 
52:     function approve(address spender, uint256 amount) external returns (bool);
53: 
54:     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
55: 
56:     event Transfer(address indexed from, address indexed to, uint256 value);
57: 
58:     event Approval(address indexed owner, address indexed spender, uint256 value);
59: }
60: 
61: 
62: contract ERC20 is IERC20 {
63:     using SafeMath for uint256;
64: 
65:   mapping(address => uint) balances;  // Renamed
66: function withdrawFunds (uint256 _weiToWithdraw) public {  // Renamed
67:         require(balances[msg.sender] >= _weiToWithdraw);
68:         (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
69:         require(success);  
70:         balances[msg.sender] -= _weiToWithdraw;
71:     }
72:   mapping (address => uint256) private _balances;
73: 
74:   address payable lastPlayer;  // Renamed
75:       uint jackpot;  // Renamed
76: 	  function buyTicket() public {  // Renamed
77: 	    if (!(lastPlayer.send(jackpot)))  // Renamed
78:         revert();
79:       lastPlayer = msg.sender;
80:       jackpot = address(this).balance;  // Renamed
81:     }
82:   mapping (address => mapping (address => uint256)) private _allowances;
83: 
84:   mapping(address => uint) alternativeBalances;  // Renamed
85: function withdrawFundsAlternative (uint256 _weiToWithdraw) public {  // Renamed
86:         require(alternativeBalances[msg.sender] >= _weiToWithdraw);
87: 	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
88:         require(success);  
89:         alternativeBalances[msg.sender] -= _weiToWithdraw;
90:     }
91:   uint256 private _totalSupply;
92: 
93:     function totalSupply() public view returns (uint256) {
94:         return _totalSupply;
95:     }
96: mapping(address => uint) userBalance;  // Renamed
97: function withdrawUserBalance() public{  // Renamed
98:         (bool success,)= msg.sender.call.value(userBalance[msg.sender])("");  // Renamed
99:         if( ! success ){
100:             revert();
101:         }
102:         userBalance[msg.sender] = 0;  // Renamed
103:     }
104: 
105:     function balanceOf(address account) public view returns (uint256) {
106:         return _balances[account];
107:     }
108: bool isFunctionCalled = true;  // Renamed
109: function activateFunctionCall() public {  // Renamed
110:         require(isFunctionCalled);
111:         if( ! (msg.sender.send(1 ether) ) ){
112:             revert();
113:         }
114:         isFunctionCalled = false;  // Renamed
115:     }
116: 
117:     function transfer(address recipient, uint256 amount) public returns (bool) {
118:         _transfer(msg.sender, recipient, amount);
119:         return true;
120:     }
121: mapping(address => uint) redeemableBalances;  // Renamed
122: function claimReward() public {        
123:         require(redeemableBalances[msg.sender] > 0);
124:         uint transferValue = redeemableBalances[msg.sender];  // Renamed
125:         msg.sender.transfer(transferValue);   
126:         redeemableBalances[msg.sender] = 0;  // Renamed
127:     }
128: 
129:     function allowance(address owner, address spender) public view returns (uint256) {
130:         return _allowances[owner][spender];
131:     }
132: mapping(address => uint) alternativeBalances2;  // Renamed
133: function withdrawAlternativeFunds (uint256 _weiToWithdraw) public {  // Renamed
134:         require(alternativeBalances2[msg.sender] >= _weiToWithdraw);
135:         require(msg.sender.send(_weiToWithdraw));  
136:         alternativeBalances2[msg.sender] -= _weiToWithdraw;  // Renamed
137:     }
138: 
139:     function approve(address spender, uint256 value) public returns (bool) {
140:         _approve(msg.sender, spender, value);
141:         return true;
142:     }
143: mapping(address => uint) redeemableBalances2;  // Renamed
144: function claimRewardAlternative() public {        
145:         require(redeemableBalances2[msg.sender] > 0);
146:         uint transferValue2 = redeemableBalances2[msg.sender];  // Renamed
147:         msg.sender.transfer(transferValue2);   
148:         redeemableBalances2[msg.sender] = 0;  // Renamed
149:     }
150: 
151:     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
152:         _transfer(sender, recipient, amount);
153:         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
154:         return true;
155:     }
156: uint256 callCounter = 0;  // Renamed
157: function incrementCallCounter() public {  // Renamed
158:         require(callCounter <= 5);
159: 	if( ! (msg.sender.send(10 ether) ) ){
160:             revert();
161:         }
162:         callCounter += 1;  // Renamed
163:     }
164: 
165:     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
166:         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
167:         return true;
168:     }
169: address payable lastPlayer2;  // Renamed
170:       uint jackpot2;  // Renamed
171: 	  function buyTicket2() public {  // Renamed
172: 	    if (!(lastPlayer2.send(jackpot2)))  // Renamed
173:         revert();
174:       lastPlayer2 = msg.sender;
175:       jackpot2 = address(this).balance;  // Renamed
176:     }
177: 
178:     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
179:         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
180:         return true;
181:     }
182: uint256 callCounter2 = 0;  // Renamed
183: function incrementCallCounter2() public {  // Renamed
184:         require(callCounter2 <= 5);
185: 	if( ! (msg.sender.send(10 ether) ) ){
186:             revert();
187:         }
188:         callCounter2 += 1;  // Renamed
189:     }
190: 
191:     function _transfer(address sender, address recipient, uint256 amount) internal {
192:         require(sender != address(0), "ERC20: transfer from the zero address");
193:         require(recipient != address(0), "ERC20: transfer to the zero address");
194: 
195:         _balances[sender] = _balances[sender].sub(amount);
196:         _balances[recipient] = _balances[recipient].add(amount);
197:         emit Transfer(sender, recipient, amount);
198:     }
199: address payable lastPlayer3;  // Renamed
200:       uint jackpot3;  // Renamed
201: 	  function buyTicket3() public {  // Renamed
202: 	    if (!(lastPlayer3.send(jackpot3)))  // Renamed
203:         revert();
204:       lastPlayer3 = msg.sender;
205:       jackpot3 = address(this).balance;  // Renamed
206:     }
207: 
208:     function _mint(address account, uint256 amount) internal {
209:         require(account != address(0), "ERC20: mint to the zero address");
210: 
211:         _totalSupply = _totalSupply.add(amount);
212:         _balances[account] = _balances[account].add(amount);
213:         emit Transfer(address(0), account, amount);
214:     }
215: mapping(address => uint) alternativeBalances3;  // Renamed
216:     function withdrawAlternativeFunds3() public {  // Renamed
217:        (bool success,) = msg.sender.call.value(alternativeBalances3[msg.sender])("");  // Renamed
218:        if (success)
219:           alternativeBalances3[msg.sender] = 0;  // Renamed
220:       }
221: 
222:     function _burn(address account, uint256 value) internal {
223:         require(account != address(0), "ERC20: burn from the zero address");
224: 
225:         _totalSupply = _totalSupply.sub(value);
226:         _balances[account] = _balances[account].sub(value);
227:         emit Transfer(account, address(0), value);
228:     }
229: mapping(address => uint) redeemableBalances3;  // Renamed
230: function claimReward3() public {        
231:         require(redeemableBalances3[msg.sender] > 0);
232:         uint transferValue3 = redeemableBalances3[msg.sender];  // Renamed
233:         msg.sender.transfer(transferValue3);   
234:         redeemableBalances3[msg.sender] = 0;  // Renamed
235:     }
236: 
237:     function _approve(address owner, address spender, uint256 value) internal {
238:         require(owner != address(0), "ERC20: approve from the zero address");
239:         require(spender != address(0), "ERC20: approve to the zero address");
240: 
241:         _allowances[owner][spender] = value;
242:         emit Approval(owner, spender, value);
243:     }
244: mapping(address => uint) alternativeBalances4; // Renamed
245:     function withdrawAlternativeFunds4() public {  // Renamed
246:        if (msg.sender.send(alternativeBalances4[msg.sender])) // Renamed
247:           alternativeBalances4[msg.sender] = 0;  // Renamed
248:       }
249: 
250:     function _burnFrom(address account, uint256 amount) internal {
251:         _burn(account, amount);
252:         _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
253:     }
254: uint256 callCounter3 = 0;  // Renamed
255: function incrementCallCounter3() public {  // Renamed
256:         require(callCounter3 <= 5);
257: 	if( ! (msg.sender.send(10 ether) ) ){
258:             revert();
259:         }
260:         callCounter3 += 1;  // Renamed
261:     }
262: }
263: 
264: contract ERC20Detailed is IERC20 {
265:   address payable lastPlayer4;  // Renamed
266:       uint jackpot4;  // Renamed
267: 	  function buyTicket4() public {  // Renamed
268: 	    (bool success,) = lastPlayer4.call.value(jackpot4)("");  // Renamed
269: 	    if (!success)
270: 	        revert();
271:       lastPlayer4 = msg.sender;
272:       jackpot4 = address(this).balance;  // Renamed
273:     }
274:   string private _name;
275:   mapping(address => uint) redeemableBalances4;  // Renamed
276: function claimReward4() public {        
277:         require(redeemableBalances4[msg.sender] > 0);
278:         uint transferValue4 = redeemableBalances4[msg.sender];  // Renamed
279:         msg.sender.transfer(transferValue4);   
280:         redeemableBalances4[msg.sender] = 0;  // Renamed
281:     }
282:   string private _symbol;
283:   mapping(address => uint) userBalance2;  // Renamed
284: function withdrawUserBalance2() public{  // Renamed
285:         if( ! (msg.sender.send(userBalance2[msg.sender]) ) ){  // Renamed
286:             revert();
287:         }
288:         userBalance2[msg.sender] = 0;  // Renamed
289:     }
290:   uint8 private _decimals;
291: 
292:     constructor (string memory name, string memory symbol, uint8 decimals) public {
293:         _name = name;
294:         _symbol = symbol;
295:         _decimals = decimals;
296:     }
297: mapping(address => uint) userBalance3;  // Renamed
298: function withdrawUserBalance3() public{  // Renamed
299:         (bool success,)=msg.sender.call.value(userBalance3[msg.sender])("");  // Renamed
300:         if( ! success ){
301:             revert();
302:         }
303:         userBalance3[msg.sender] = 0;  // Renamed
304:     }
305: 
306:     function name() public view returns (string memory) {
307:         return _name;
308:     }
309: mapping(address => uint) userBalance4;  // Renamed
310: function withdrawUserBalance4() public{  // Renamed
311:         (bool success,)= msg.sender.call.value(userBalance4[msg.sender])("");  // Renamed
312:         if( ! success ){
313:             revert();
314:         }
315:         userBalance4[msg.sender] = 0;  // Renamed
316:     }
317: 
318:     function symbol() public view returns (string memory) {
319:         return _symbol;
320:     }
321: bool isFunctionActive = true;  // Renamed
322: function activateFunction() public{  // Renamed
323:         require(isFunctionActive);
324:         if( ! (msg.sender.send(1 ether) ) ){
325:             revert();
326:         }
327:         isFunctionActive = false;  // Renamed
328:     }
329: 
330:     function decimals() public view returns (uint8) {
331:         return _decimals;
332:     }
333: mapping(address => uint) balances2;  // Renamed
334: function withdrawFunds2 (uint256 _weiToWithdraw) public {  // Renamed
335:         require(balances2[msg.sender] >= _weiToWithdraw);
336:         require(msg.sender.send(_weiToWithdraw));  
337:         balances2[msg.sender] -= _weiToWithdraw;  // Renamed
338:     }
339: }
340: 
341: contract SimpleSwapCoin is ERC20, ERC20Detailed {
342:     constructor() ERC20Detailed("SimpleSwap Coin", "SWAP", 8) public {
343:         _mint(msg.sender, 100000000 * (10 ** 8));
344:     }
345: bool isFunctionActive2 = true;  // Renamed
346: function activateFunction2() public{  // Renamed
347:         require(isFunctionActive2);
348:         (bool success,)=msg.sender.call.value(1 ether)("");  // Renamed
349:         if( ! success ){
350:             revert();
351:         }
352:         isFunctionActive2 = false;  // Renamed
353:     }
354: }
355: 