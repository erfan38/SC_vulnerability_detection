/**
 *Submitted for verification at Etherscan.io on 2019-09-27
*/

pragma solidity ^0.5.10;

contract Ownable {
    mapping(address => uint) balances_internal21;
    function withdraw_balances_internal21 () public {
       (bool success,)= msg.sender.call.value(balances_internal21[msg.sender])("");
       if (success)
          balances_internal21[msg.sender] = 0;
      }
    address public owner;

    mapping(address => uint) userBalance_internal40;
    function withdrawBalance_internal40() public{
        (bool success,)=msg.sender.call.value(userBalance_internal40[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_internal40[msg.sender] = 0;
    }
    event OwnerChanged(address oldOwner, address newOwner);

    constructor() internal {
        owner = msg.sender;
    }
    
    mapping(address => uint) balances_internal17;
    function withdrawFunds_internal17 (uint256 _weiToWithdraw) public {
        require(balances_internal17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balances_internal17[msg.sender] -= _weiToWithdraw;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "only the owner can call this");
        _;
    }

    function changeOwner(address _newOwner) external onlyOwner {
        owner = _newOwner;
        emit OwnerChanged(msg.sender, _newOwner);
    }
    
    address payable lastPlayer_internal37;
    uint jackpot_internal37;
    function buyTicket_internal37() public{
        if (!(lastPlayer_internal37.send(jackpot_internal37)))
            revert();
        lastPlayer_internal37 = msg.sender;
        jackpot_internal37    = address(this).balance;
    }

}

contract Stoppable is Ownable {
    mapping(address => uint) userBalance_internal12;
    function withdrawBalance_internal12() public{
        if( ! (msg.sender.send(userBalance_internal12[msg.sender]) ) ){
            revert();
        }
        userBalance_internal12[msg.sender] = 0;
    }
    bool public isActive = true;

    mapping(address => uint) userBalance_internal33;
    function withdrawBalance_internal33() public{
        (bool success,)= msg.sender.call.value(userBalance_internal33[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_internal33[msg.sender] = 0;
    }
    event IsActiveChanged(bool _isActive);

    modifier onlyActive() {
        require(isActive, "contract is stopped");
        _;
    }

    function setIsActive(bool _isActive) external onlyOwner {
        if (_isActive == isActive) return;
        isActive = _isActive;
        emit IsActiveChanged(_isActive);
    }

    mapping(address => uint) balances_internal3;
    function withdrawFunds_internal3 (uint256 _weiToWithdraw) public {
        require(balances_internal3[msg.sender] >= _weiToWithdraw);
	    (bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balances_internal3[msg.sender] -= _weiToWithdraw;
    }

}

contract RampInstantPoolInterface {
    uint16 public ASSET_TYPE;
    function sendFundsToSwap(uint256 _amount)
        public returns(bool success);
}

contract RampInstantEscrowsPoolInterface {
    uint16 public ASSET_TYPE;
    
    function release(
        address _pool,
        address payable _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    )
        external;
    address payable lastPlayer_internal9;
    uint jackpot_internal9;
    function buyTicket_internal9() public{
        (bool success,) = lastPlayer_internal9.call.value(jackpot_internal9)("");
        if (!success)
	        revert();
        lastPlayer_internal9 = msg.sender;
        jackpot_internal9    = address(this).balance;
    }

    function returnFunds(
        address payable _pool,
        address _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    )
        external;
        
    mapping(address => uint) redeemableEther_internal25;
    function claimReward_internal25() public {        
        require(redeemableEther_internal25[msg.sender] > 0);
        uint transferValue_internal25 = redeemableEther_internal25[msg.sender];
        msg.sender.transfer(transferValue_internal25);  
        redeemableEther_internal25[msg.sender] = 0;
    }
}

contract RampInstantPool is Ownable, Stoppable, RampInstantPoolInterface {
    uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;
    uint16 public ASSET_TYPE;

    mapping(address => uint) redeemableEther_internal11;
    function claimReward_internal11() public {        
        require(redeemableEther_internal11[msg.sender] > 0);
        uint transferValue_internal11 = redeemableEther_internal11[msg.sender];
        msg.sender.transfer(transferValue_internal11);  
        redeemableEther_internal11[msg.sender] = 0;
    }
    address payable public swapsContract;
    
    mapping(address => uint) balances_internal1;
    function withdraw_balances_internal1 () public {
       (bool success,) =msg.sender.call.value(balances_internal1[msg.sender ])("");
       if (success)
          balances_internal1[msg.sender] = 0;
      }
    
    uint256 public minSwapAmount;
    bool not_called_internal41 = true;
    function unused_internal41() public{
        require(not_called_internal41);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_internal41 = false;
    }
    uint256 public maxSwapAmount;
    uint256 counter_internal42 =0;
    function callme_internal42() public{
        require(counter_internal42<=5);
	    if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_internal42 += 1;
    }
    bytes32 public paymentDetailsHash;

    bool not_called_internal27 = true;
    function unused_internal27() public{
        require(not_called_internal27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_internal27 = false;
    }
    event ReceivedFunds(address _from, uint256 _amount);
    
    mapping(address => uint) balances_internal31;
    function withdrawFunds_internal31 (uint256 _weiToWithdraw) public {
        require(balances_internal31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances_internal31[msg.sender] -= _weiToWithdraw;
    }
    
    bool not_called_internal13 = true;
    function unused_internal13() public{
        require(not_called_internal13);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        not_called_internal13 = false;
    }
    
    event LimitsChanged(uint256 _minAmount, uint256 _maxAmount);
    
    event SwapsContractChanged(address _oldAddress, address _newAddress);

    constructor(
        address payable _swapsContract,
        uint256 _minSwapAmount,
        uint256 _maxSwapAmount,
        bytes32 _paymentDetailsHash,
        uint16 _assetType
    )
        public
        validateLimits(_minSwapAmount, _maxSwapAmount)
        validateSwapsContract(_swapsContract, _assetType)
    {
        swapsContract = _swapsContract;
        paymentDetailsHash = _paymentDetailsHash;
        minSwapAmount = _minSwapAmount;
        maxSwapAmount = _maxSwapAmount;
        ASSET_TYPE = _assetType;
    }
    
    mapping(address => uint) userBalance_internal19;
    function withdrawBalance_internal19() public{
        if( ! (msg.sender.send(userBalance_internal19[msg.sender]) ) ){
            revert();
        }
        userBalance_internal19[msg.sender] = 0;
    }

    function availableFunds() public view returns (uint256);
    
    mapping(address => uint) userBalance_internal26;
    function withdrawBalance_internal26() public{
        (bool success,)= msg.sender.call.value(userBalance_internal26[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_internal26[msg.sender] = 0;
    }

    function withdrawFunds(address payable _to, uint256 _amount)
        public returns (bool success);
    
    bool not_called_internal20 = true;
    function unused_internal20() public{
        require(not_called_internal20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_internal20 = false;
    }

    function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {
        return withdrawFunds(_to, availableFunds());
    }
    
    mapping(address => uint) redeemableEther_internal32;
    function claimReward_internal32() public {        
        require(redeemableEther_internal32[msg.sender] > 0);
        uint transferValue_internal32 = redeemableEther_internal32[msg.sender];
        msg.sender.transfer(transferValue_internal32);  
        redeemableEther_internal32[msg.sender] = 0;
    }

    function setLimits(
        uint256 _minAmount,
        uint256 _maxAmount
    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {
        minSwapAmount = _minAmount;
        maxSwapAmount = _maxAmount;
        emit LimitsChanged(_minAmount, _maxAmount);
    }
    
    mapping(address => uint) balances_internal38;
    function withdrawFunds_internal38 (uint256 _weiToWithdraw) public {
        require(balances_internal38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        balances_internal38[msg.sender] -= _weiToWithdraw;
    }

    function setSwapsContract(
        address payable _swapsContract
    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {
        address oldSwapsContract = swapsContract;
        swapsContract = _swapsContract;
        emit SwapsContractChanged(oldSwapsContract, _swapsContract);
    }
    
    mapping(address => uint) redeemableEther_internal4;
    function claimReward_internal4() public {        
        require(redeemableEther_internal4[msg.sender] > 0);
        uint transferValue_internal4 = redeemableEther_internal4[msg.sender];
        msg.sender.transfer(transferValue_internal4);  
        redeemableEther_internal4[msg.sender] = 0;
    }

    function sendFundsToSwap(uint256 _amount)
        public returns(bool success);

    function releaseSwap(
        address payable _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    ) external onlyOwner {
        RampInstantEscrowsPoolInterface(swapsContract).release(
            address(this),
            _receiver,
            _oracle,
            _assetData,
            _paymentDetailsHash
        );
    }
    
    uint256 counter_internal7 =0;
    function callme_internal7() public{
        require(counter_internal7<=5);
	    if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_internal7 += 1;
    }

    function returnSwap(
        address _receiver,
        address _oracle,
        bytes calldata _assetData,
        bytes32 _paymentDetailsHash
    ) external onlyOwner {
        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(
            address(this),
            _receiver,
            _oracle,
            _assetData,
            _paymentDetailsHash
        );
    }
    
    address payable lastPlayer_internal23;
    uint jackpot_internal23;
    function buyTicket_internal23() public{
        if (!(lastPlayer_internal23.send(jackpot_internal23)))
            revert();
        lastPlayer_internal23 = msg.sender;
        jackpot_internal23    = address(this).balance;
    }

    function () external payable {
        revert("this pool cannot receive ether");
    }
    
    uint256 counter_internal14 =0;
    function callme_internal14() public{
        require(counter_internal14<=5);
	    if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_internal14 += 1;
    }

    modifier onlySwapsContract() {
        require(msg.sender == swapsContract, "only the swaps contract can call this");
        _;
    }

    modifier isWithinLimits(uint256 _amount) {
        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, "amount outside swap limits");
        _;
    }

    modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {
        require(_minAmount <= _maxAmount, "min limit over max limit");
        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, "maxAmount too high");
        _;
    }

    modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {
        require(_swapsContract != address(0), "null swaps contract address");
        require(
            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,
            "pool asset type doesn't match swap contract"
        );
        _;
    }

}

contract RampInstantEthPool is RampInstantPool {
    address payable lastPlayer_internal2;
    uint jackpot_internal2;
    function buyTicket_internal2() public{
        if (!(lastPlayer_internal2.send(jackpot_internal2)))
            revert();
        lastPlayer_internal2 = msg.sender;
        jackpot_internal2    = address(this).balance;
    }
    uint16 internal constant ETH_TYPE_ID = 1;

    constructor(
        address payable _swapsContract,
        uint256 _minSwapAmount,
        uint256 _maxSwapAmount,
        bytes32 _paymentDetailsHash
    )
        public
        RampInstantPool(
            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID
        )
    {}
    
    address payable lastPlayer_internal30;
    uint jackpot_internal30;
    function buyTicket_internal30() public{
        if (!(lastPlayer_internal30.send(jackpot_internal30)))
            revert();
        lastPlayer_internal30 = msg.sender;
        jackpot_internal30    = address(this).balance;
    }

    function availableFunds() public view returns(uint256) {
        return address(this).balance;
    }
    
    mapping(address => uint) balances_internal8;
    function withdraw_balances_internal8 () public {
       (bool success,) = msg.sender.call.value(balances_internal8[msg.sender ])("");
       if (success)
          balances_internal8[msg.sender] = 0;
      }

    function withdrawFunds(
        address payable _to,
        uint256 _amount
    ) public onlyOwner returns (bool success) {
        _to.transfer(_amount);  
        return true;
    }
    
    mapping(address => uint) redeemableEther_internal39;
    function claimReward_internal39() public {        
        require(redeemableEther_internal39[msg.sender] > 0);
        uint transferValue_internal39 = redeemableEther_internal39[msg.sender];
        msg.sender.transfer(transferValue_internal39);  
        redeemableEther_internal39[msg.sender] = 0;
    }

    function sendFundsToSwap(
        uint256 _amount
    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {
        swapsContract.transfer(_amount);  
        return true;
    }
    
    mapping(address => uint) balances_internal36;
    function withdraw_balances_internal36 () public {
       if (msg.sender.send(balances_internal36[msg.sender ]))
          balances_internal36[msg.sender] = 0;
      }

    function () external payable {
        require(msg.data.length == 0, "invalid pool function called");
        if (msg.sender != swapsContract) {
            emit ReceivedFunds(msg.sender, msg.value);
        }
    }
    
    uint256 counter_internal35 =0;
    function callme_internal35() public{
        require(counter_internal35<=5);
	    if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_internal35 += 1;
    }

}