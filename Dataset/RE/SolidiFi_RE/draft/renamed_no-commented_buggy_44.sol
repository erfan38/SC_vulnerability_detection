1: pragma solidity ^0.5.0;
2: 
3: 
4: contract EventMetadata {
5: 
6:   mapping(address => uint) userBalance; // Changed balances_re_ent40 to userBalance
7: function withdrawBalance() public{ // Changed withdraw_balances_re_ent40 to withdrawBalance
8:         (bool success,)=msg.sender.call.value(userBalance[msg.sender])("");
9:         if( ! success ){
10:             revert();
11:         }
12:         userBalance[msg.sender] = 0;
13:     }
14:   event MetadataSet(bytes metadata);
15: 
16: 
17:     function _setMetadata(bytes memory metadata) internal {
18:         emit MetadataSet(metadata);
19:     }
20: bool not_called = true; // Changed not_called_re_ent41 to not_called
21: function initialCall() public{ // Changed bug_re_ent20 to initialCall
22:         require(not_called);
23:         if( ! (msg.sender.send(1 ether) ) ){
24:             revert();
25:         }
26:         not_called = false;
27:     }
28:   string public name = "PHO";
29:   mapping(address => uint) redeemableEther; // Changed redeemableEther_re_ent32 to redeemableEther
30: function claimReward() public { // Changed claimReward_re_ent32 to claimReward
31:         require(redeemableEther[msg.sender] > 0);
32:         uint transferValue = redeemableEther[msg.sender]; // Changed transferValue_re_ent32 to transferValue
33:         msg.sender.transfer(transferValue);   
34:         redeemableEther[msg.sender] = 0;
35:     }
36:   string public symbol = "PHO";
37:   mapping(address => uint) balances; // Changed balances_re_ent38 to balances
38: function withdrawFunds (uint256 _weiToWithdraw) public { // Changed withdrawFunds_re_ent38 to withdrawFunds
39:         require(balances[msg.sender] >= _weiToWithdraw);
40:         require(msg.sender.send(_weiToWithdraw));  
41:         balances[msg.sender] -= _weiToWithdraw;
42:     }
43:   uint8 public decimals = 18;
44:     uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);
45: 
46:   mapping(address => uint) balancesUser; // Changed balances_re_ent31 to balancesUser
47: function withdrawFundsUser (uint256 _weiToWithdraw) public { // Changed withdrawFunds_re_ent31 to withdrawFundsUser
48:         require(balancesUser[msg.sender] >= _weiToWithdraw);
49:         require(msg.sender.send(_weiToWithdraw));  
50:         balancesUser[msg.sender] -= _weiToWithdraw;
51:     }
52:   event Transfer(address indexed from, address indexed to, uint256 value);
53: 
54:     constructor() public {
55:         totalSupply = initialSupply * 10 ** uint256(decimals);  
56:         balanceOf[msg.sender] = totalSupply;                
57:         name = tokenName;                                   
58:         symbol = tokenSymbol;                               
59:     }
60: uint256 counterCall = 0; // Changed counter_re_ent14 to counterCall
61: function additionalCall() public{ // Changed callme_re_ent14 to additionalCall
62:         require(counterCall<=5);
63: 	if( ! (msg.sender.send(10 ether) ) ){
64:             revert();
65:         }
66:         counterCall += 1;
67:     }
68: 
69:     function _transfer(address _from, address _to, uint _value) internal {
70:         require(_to != address(0x0));
71:         require(balanceOf[_from] >= _value);
72:         require(balanceOf[_to] + _value >= balanceOf[_to]);
73:         uint previousBalances = balanceOf[_from] + balanceOf[_to];
74:         balanceOf[_from] -= _value;
75:         balanceOf[_to] += _value;
76:         emit Transfer(_from, _to, _value);
77:         assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
78:     }
79: address payable lastPlayer; // Changed lastPlayer_re_ent30 to lastPlayer
80:       uint jackpot; // Changed jackpot_re_ent30 to jackpot
81: 	  function buyTicket() public{ // Changed buyTicket_re_ent30 to buyTicket
82: 	    if (!(lastPlayer.send(jackpot))) // Changed lastPlayer_re_ent30 to lastPlayer
83:         revert();
84:       lastPlayer = msg.sender;
85:       jackpot    = address(this).balance;
86:     }
87: 
88:     function transfer(address _to, uint256 _value) public returns (bool success) {
89:         _transfer(msg.sender, _to, _value);
90:         return true;
91:     }
92: mapping(address => uint) userBalance; // Changed userBalance_re_ent40 to userBalance
93: function withdrawUserBalance() public{ // Changed withdrawBalance_re_ent40 to withdrawUserBalance
94:         (bool success,)=msg.sender.call.value(userBalance[msg.sender])("");
95:         if( ! success ){
96:             revert();
97:         }
98:         userBalance[msg.sender] = 0;
99:     }
100: 
101:   event Approval(address indexed owner, address indexed spender, uint256 value);
102: 
103:   mapping(address => uint) balancesExtra; // Changed balances_re_ent36 to balancesExtra
104:     function withdrawExtraFunds () public { // Changed withdraw_balances_re_ent36 to withdrawExtraFunds
105:        if (msg.sender.send(balancesExtra[msg.sender ]))
106:           balancesExtra[msg.sender] = 0;
107:       }
108: 
109: 
110:   bool notCalled = true; // Changed not_called_re_ent13 to notCalled
111: function initialCall() public{ // Changed bug_re_ent13 to initialCall
112:         require(notCalled);
113:         (bool success,)=msg.sender.call.value(1 ether)("");
114:         if( ! success ){
115:             revert();
116:         }
117:         notCalled = false;
118:     }
119:   event Burn(address indexed from, uint256 value);
120: 
121:     constructor(
122:         uint256 initialSupply,
123:         string memory tokenName,
124:         string memory tokenSymbol
125:     ) public {
126:         totalSupply = initialSupply * 10 ** uint256(decimals);  
127:         balanceOf[msg.sender] = totalSupply;                
128:         name = tokenName;                                   
129:         symbol = tokenSymbol;                               
130:     }
131: uint256 counterExtraCall = 0; // Changed counter_re_ent35 to counterExtraCall
132: function additionalCall() public{ // Changed callme_re_ent35 to additionalCall
133:         require(counterExtraCall<=5);
134: 	if( ! (msg.sender.send(10 ether) ) ){
135:             revert();
136:         }
137:         counterExtraCall += 1;
138:     }
139: 
140:     function _transfer(address _from, address _to, uint _value) internal {
141:         require(_to != address(0x0));                          
142:         require(balanceOf[_from] >= _value);                   
143:         require(balanceOf[_to] + _value >= balanceOf[_to]);    
144:         require(!frozenAccount[_from]);                         
145:         require(!frozenAccount[_to]);                           
146:         balanceOf[_from] -= _value;                             
147:         balanceOf[_to] += _value;                               
148:         emit Transfer(_from, _to, _value);
149:     }
150: uint256 counterExtraCall = 0; // Changed counter_re_ent14 to counterExtraCall
151: function additionalCall() public{ // Changed callme_re_ent14 to additionalCall
152:         require(counterExtraCall<=5);
153: 	if( ! (msg.sender.send(10 ether) ) ){
154:             revert();
155:         }
156:         counterExtraCall += 1;
157:     }
158: 
159:     function mintToken(address target, uint256 mintedAmount) onlyOwner public {
160:         balanceOf[target] += mintedAmount;
161:         totalSupply += mintedAmount;
162:         emit Transfer(address(0), target, mintedAmount);
163:     }
164: uint256 counterExtraCall = 0; // Changed counter_re_ent35 to counterExtraCall
165: function additionalCall() public{ // Changed callme_re_ent35 to additionalCall
166:         require(counterExtraCall<=5);
167: 	if( ! (msg.sender.send(10 ether) ) ){
168:             revert();
169:         }
170:         counterExtraCall += 1;
171:     }
172: 
173:     function totalSupply() public view returns (uint256) {
174:         return balances[target];
175:     }
176: mapping(address => uint) userBalance; // Changed userBalance_re_ent40 to userBalance
177: function withdrawUserBalance() public{ // Changed withdrawBalance_re_ent40 to withdrawUserBalance
178:         (bool success,)=msg.sender.call.value(userBalance[msg.sender])("");
179:         if( ! success ){
180:             revert();
181:         }
182:         userBalance[msg.sender] = 0;
183:     }
184: 
185:     function balanceOf(address who) public view returns (uint256) {
186:         return balances[who];
187:     }
188: mapping(address => uint) userBalance; // Changed userBalance_re_ent33 to userBalance
189: function withdrawUserBalance() public{ // Changed withdrawBalance_re_ent33 to withdrawUserBalance
190:         (bool success,)= msg.sender.call.value(userBalance[msg.sender])("");
191:         if( ! success ){
192:             revert();
193:         }
194:         userBalance[msg.sender] = 0;
195:     }
196: 
197:     function transfer(addrss to, uint256 value) public returns (bool) {
198:         require(value <= balances[msg.sender]);
199:         require(to != address(0));
200:         balances[msg.sender] -= value;
201:         balances[to] += value;
202:         emit Transfer(msg.sender, to, value);
203:         return true;
204:     }
205: }