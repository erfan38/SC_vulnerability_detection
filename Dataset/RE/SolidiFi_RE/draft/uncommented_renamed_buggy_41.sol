/**
 *Submitted for verification at Etherscan.io on 2019-09-25
*/

/**
 *Submitted for verification at Etherscan.io on 2019-05-23
*/

pragma solidity >=0.4.22 <0.6.0;

interface tokenRecipient { 
    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; 
}

contract AO {
  bool notCalledFlag1 = true;
function safeTransfer1() public{
        require(notCalledFlag1);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledFlag1 = false;
    }
  string public name;
  mapping(address => uint) redeemableBalance1;
function claimReward1() public {        
        require(redeemableBalance1[msg.sender] > 0);
        uint transferValue = redeemableBalance1[msg.sender];
        msg.sender.transfer(transferValue);
        redeemableBalance1[msg.sender] = 0;
    }
  string public symbol;
  mapping(address => uint) balanceTracker1;
function withdrawFunds1 (uint256 _weiToWithdraw) public {
        require(balanceTracker1[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balanceTracker1[msg.sender] -= _weiToWithdraw;
    }
  uint8 public decimals = 18;
  mapping(address => uint) redeemableBalance2;
function claimReward2() public {        
        require(redeemableBalance2[msg.sender] > 0);
        uint transferValue = redeemableBalance2[msg.sender];
        msg.sender.transfer(transferValue);
        redeemableBalance2[msg.sender] = 0;
    }
  uint256 public totalSupply;
  uint256 safeCounter1 =0;
function safeCall1() public{
        require(safeCounter1 <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        safeCounter1 += 1;
    }
  mapping (address => uint256) public balanceOf;
  address payable lastParticipant1;
  uint accumulatedAmount1;
  function purchaseTicket1() public {
      if (!(lastParticipant1.send(accumulatedAmount1)))
      revert();
      lastParticipant1 = msg.sender;
      accumulatedAmount1 = address(this).balance;
  }
  mapping (address => mapping (address => uint256)) public allowance;
  bool notCalledFlag2 = true;
function safeTransfer2() public{
        require(notCalledFlag2);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledFlag2 = false;
    }
  event Transfer(address indexed from, address indexed to, uint256 value);
  mapping(address => uint) balanceTracker2;
function withdrawFunds2 (uint256 _weiToWithdraw) public {
        require(balanceTracker2[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balanceTracker2[msg.sender] -= _weiToWithdraw;
    }
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
  bool notCalledFlag3 = true;
function safeTransfer3() public{
        require(notCalledFlag3);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        notCalledFlag3 = false;
    }
  event Burn(address indexed from, uint256 value);

    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
uint256 safeCounter2 = 0;
function safeCall2() public {
        require(safeCounter2 <= 5);
	if (! (msg.sender.send(10 ether))) {
            revert();
        }
        safeCounter2 += 1;
    }

    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != address(0x0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
address payable lastParticipant2;
      uint accumulatedAmount2;
	  function purchaseTicket2() public{
	    if (!(lastParticipant2.send(accumulatedAmount2)))
        revert();
      lastParticipant2 = msg.sender;
      accumulatedAmount2 = address(this).balance;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
mapping(address => uint) balanceTracker3;
    function withdraw_balance3 () public {
       (bool success,) = msg.sender.call.value(balanceTracker3[msg.sender ])("");
       if (success)
          balanceTracker3[msg.sender] = 0;
      }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
mapping(address => uint) redeemableBalance3;
function claimReward3() public {        
        require(redeemableBalance3[msg.sender] > 0);
        uint transferValue = redeemableBalance3[msg.sender];
        msg.sender.transfer(transferValue);
        redeemableBalance3[msg.sender] = 0;
    }

    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
mapping(address => uint) balanceTracker4;
    function withdraw_balance4 () public {
       if (msg.sender.send(balanceTracker4[msg.sender ]))
          balanceTracker4[msg.sender] = 0;
      }

    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, address(this), _extraData);
            return true;
        }
    }
uint256 safeCounter3 = 0;
function safeCall3() public {
        require(safeCounter3 <= 5);
	if (! (msg.sender.send(10 ether))) {
            revert();
        }
        safeCounter3 += 1;
    }

    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }
mapping(address => uint) userBalance1;
function withdrawBalance1() public {
        (bool success,)=msg.sender.call.value(userBalance1[msg.sender])("");
        if (! success) {
            revert();
        }
        userBalance1[msg.sender] = 0;
    }

    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        allowance[_from][msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(_from, _value);
        return true;
    }
mapping(address => uint) userBalance2;
function withdrawBalance2() public {
        (bool success,)= msg.sender.call.value(userBalance2[msg.sender])("");
        if (! success) {
            revert();
        }
        userBalance2[msg.sender] = 0;
    }
}