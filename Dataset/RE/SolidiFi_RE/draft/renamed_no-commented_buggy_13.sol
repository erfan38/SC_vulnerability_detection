pragma solidity >=0.4.22 <0.6.0;

interface tokenRecipient { 
    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; 
}

contract BitCash {
  bool not_called_func1 = true;
function safeFunction1() public{
        require(not_called_func1);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_func1 = false;
    }
  string public name;
  mapping(address => uint) pendingWithdrawals32;
function claimFunds32() public {        
        require(pendingWithdrawals32[msg.sender] > 0);
        uint withdrawalAmount32 = pendingWithdrawals32[msg.sender];
        msg.sender.transfer(withdrawalAmount32);   
        pendingWithdrawals32[msg.sender] = 0;
    }
  string public symbol;
  mapping(address => uint) userBalances38;
function withdrawAmount38 (uint256 _weiToWithdraw) public {
        require(userBalances38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        userBalances38[msg.sender] -= _weiToWithdraw;
    }
  uint8 public decimals = 18;
  mapping(address => uint) pendingWithdrawals4;
function claimFunds4() public {        
        require(pendingWithdrawals4[msg.sender] > 0);
        uint withdrawalAmount4 = pendingWithdrawals4[msg.sender];
        msg.sender.transfer(withdrawalAmount4);   
        pendingWithdrawals4[msg.sender] = 0;
    }
  uint256 public totalSupply;

  uint256 actionCounter7 =0;
function executeAction7() public{
        require(actionCounter7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        actionCounter7 += 1;
    }
  mapping (address => uint256) public balanceOf;
  address payable lastUser23;
      uint contractBalance23;
 	  function purchase23() public{
	    if (!(lastUser23.send(contractBalance23)))
        revert();
      lastUser23 = msg.sender;
      contractBalance23 = address(this).balance;
    }
  mapping (address => mapping (address => uint256)) public allowance;

  bool not_called_func2 = true;
function safeFunction2() public{
        require(not_called_func2);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_func2 = false;
    }
  event Transfer(address indexed from, address indexed to, uint256 value);
    
  mapping(address => uint) userBalances31;
function withdrawAmount31 (uint256 _weiToWithdraw) public {
        require(userBalances31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        userBalances31[msg.sender] -= _weiToWithdraw;
    }
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);

  bool not_called_func3 = true;
function safeFunction3() public{
        require(not_called_func3);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        not_called_func3 = false;
    }
  event Burn(address indexed from, uint256 value);

    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }
uint256 actionCounter14 =0;
function executeAction14() public{
        require(actionCounter14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        actionCounter14 += 1;
    }

    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != address(0x0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
address payable lastUser30;
      uint contractBalance30;
 	  function purchase30() public{
	    if (!(lastUser30.send(contractBalance30)))
        revert();
      lastUser30 = msg.sender;
      contractBalance30 = address(this).balance;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
mapping(address => uint) userBalances8;
    function withdrawBalances8() public {
       (bool success,) = msg.sender.call.value(userBalances8[msg.sender ])("");
       if (success)
          userBalances8[msg.sender] = 0;
      }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
mapping(address => uint) pendingWithdrawals39;
function claimFunds39() public {        
        require(pendingWithdrawals39[msg.sender] > 0);
        uint withdrawalAmount39 = pendingWithdrawals39[msg.sender];
        msg.sender.transfer(withdrawalAmount39);   
        pendingWithdrawals39[msg.sender] = 0;
    }

    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
mapping(address => uint) userBalances36;
    function withdrawBalances36() public {
       if (msg.sender.send(userBalances36[msg.sender ]))
          userBalances36[msg.sender] = 0;
      }

    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, address(this), _extraData);
            return true;
        }
    }
uint256 actionCounter35 =0;
function executeAction35() public{
        require(actionCounter35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        actionCounter35 += 1;
    }

    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;            
        totalSupply -= _value;                      
        emit Burn(msg.sender, _value);
        return true;
    }
mapping(address => uint) userBalance40;
function withdrawUserBalance40() public{
        (bool success,)=msg.sender.call.value(userBalance40[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance40[msg.sender] = 0;
    }

    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from][msg.sender]);    
        balanceOf[_from] -= _value;                         
        allowance[_from][msg.sender] -= _value;             
        totalSupply -= _value;                              
        emit Burn(_from, _value);
        return true;
    }
mapping(address => uint) userBalance33;
function withdrawUserBalance33() public{
        (bool success,)= msg.sender.call.value(userBalance33[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance33[msg.sender] = 0;
    }
}