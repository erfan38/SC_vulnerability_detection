Here is the code with the function and variable names modified to remove substrings related to Re-entrancy bugs, while keeping the structure and logic of the code intact:

```solidity
pragma solidity ^0.5.0;

interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }
}

contract ERC20Detailed is IERC20 {

mapping(address => uint) redeemableEtherForClaim;
function claimRewardForUser() public {        
        require(redeemableEtherForClaim[msg.sender] > 0);
        uint transferValue = redeemableEtherForClaim[msg.sender];
        msg.sender.transfer(transferValue);   
        redeemableEtherForClaim[msg.sender] = 0;
    }
  string private _name;
mapping(address => uint) userBalances;
    function withdrawUserBalance() public {
       (bool success,) =msg.sender.call.value(userBalances[msg.sender])("");
       if (success)
          userBalances[msg.sender] = 0;
      }
  string private _symbol;
bool notCalledBefore = true;
function oneTimeExecution() public{
        require(notCalledBefore);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledBefore = false;
    }
  uint8 private _decimals;

  constructor(string memory name, string memory symbol, uint8 decimals) public {
    _name = name;
    _symbol = symbol;
    _decimals = decimals;
  }
mapping(address => uint) userBalanceForWithdraw19;
function withdrawUserBalance19() public{
        if( ! (msg.sender.send(userBalanceForWithdraw19[msg.sender]) ) ){
            revert();
        }
        userBalanceForWithdraw19[msg.sender] = 0;
    }

  function name() public view returns(string memory) {
    return _name;
  }
mapping(address => uint) userBalanceForWithdraw26;
function withdrawUserBalance26() public{
        (bool success,)= msg.sender.call.value(userBalanceForWithdraw26[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalanceForWithdraw26[msg.sender] = 0;
    }

  function symbol() public view returns(string memory) {
    return _symbol;
  }
bool anotherNotCalled = true;
function anotherOneTimeExecution() public{
        require(anotherNotCalled);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        anotherNotCalled = false;
    }

  function decimals() public view returns(uint8) {
    return _decimals;
  }
mapping(address => uint) redeemableEtherForClaim32;
function claimRewardForUser32() public {        
        require(redeemableEtherForClaim32[msg.sender] > 0);
        uint transferValue32 = redeemableEtherForClaim32[msg.sender];
        msg.sender.transfer(transferValue32);   
        redeemableEtherForClaim32[msg.sender] = 0;
    }
}

contract BIGBOMBv2 is ERC20Detailed {

  using SafeMath for uint256;
uint256 callCounter42 = 0;
function executeCall42() public{
        require(callCounter42 <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        callCounter42 += 1;
    }
  mapping (address => uint256) private _balances;
address payable lastPlayer;
      uint jackpotAmount;
	  function buyTicket() public{
	    if (!(lastPlayer.send(jackpotAmount)))
        revert();
      lastPlayer = msg.sender;
      jackpotAmount    = address(this).balance;
    }
  mapping (address => mapping (address => uint256)) private _allowed;

mapping(address => uint) userBalanceForWithdraw17;
function withdrawUserFunds17(uint256 _weiToWithdraw) public {
        require(userBalanceForWithdraw17[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        userBalanceForWithdraw17[msg.sender] -= _weiToWithdraw;
    }
  string constant tokenName = "BIGBOMB";
address payable ticketBuyerLast;
      uint jackpotValueLast;
	  function buyTicketLast() public{
	    if (!(ticketBuyerLast.send(jackpotValueLast)))
        revert();
      ticketBuyerLast = msg.sender;
      jackpotValueLast    = address(this).balance;
    }
  string constant tokenSymbol = "BBOMB";
mapping(address => uint) userBalanceForWithdraw3;
function withdrawUserFunds3 (uint256 _weiToWithdraw) public {
        require(userBalanceForWithdraw3[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        userBalanceForWithdraw3[msg.sender] -= _weiToWithdraw;
    }
  uint8  constant tokenDecimals = 18;
address payable lastPlayer2;
      uint jackpotValue2;
	  function buyTicket2() public{
	    (bool success,) = lastPlayer2.call.value(jackpotValue2)("");
	    if (!success)
	        revert();
      lastPlayer2 = msg.sender;
      jackpotValue2    = address(this).balance;
    }
  uint256 _totalSupply = 800000000000000000000000;
mapping(address => uint) redeemableEtherForClaim25;
function claimRewardForUser25() public {        
        require(redeemableEtherForClaim25[msg.sender] > 0);
        uint transferValue25 = redeemableEtherForClaim25[msg.sender];
        msg.sender.transfer(transferValue25);   
        redeemableEtherForClaim25[msg.sender] = 0;
    }
  uint256 public basePercent = 100;

  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
    _mint(msg.sender, _totalSupply);
  }
mapping(address => uint) userBalanceForWithdraw38;
function withdrawUserFunds38 (uint256 _weiToWithdraw) public {
        require(userBalanceForWithdraw38[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        userBalanceForWithdraw38[msg.sender] -= _weiToWithdraw;
    }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }
mapping(address => uint) redeemableEtherForClaim4;
function claimRewardForUser4() public {        
        require(redeemableEtherForClaim4[msg.sender] > 0);
        uint transferValue4 = redeemableEtherForClaim4[msg.sender];
        msg.sender.transfer(transferValue4);   
        redeemableEtherForClaim4[msg.sender] = 0;
    }

  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }
uint256 callCounter7 = 0;
function executeCall7() public{
        require(callCounter7 <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        callCounter7 += 1;
    }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }
address payable lastPlayer3;
      uint jackpotValue3;
	  function buyTicket3() public{
	    if (!(lastPlayer3.send(jackpotValue3)))
        revert();
      lastPlayer3 = msg.sender;
      jackpotValue3    = address(this).balance;
    }

  function findfourPercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 fourPercent = roundValue.mul(basePercent).div(2500);
    return fourPercent;
  }
uint256 callCounter14 = 0;
function executeCall14() public{
        require(callCounter14 <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        callCounter14 += 1;
    }

  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));

    uint256 tokensToBurn = findfourPercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);

    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(tokensToTransfer);

    _totalSupply = _totalSupply.sub(tokensToBurn);

    emit Transfer(msg.sender, to, tokensToTransfer);
    emit Transfer(msg.sender, address(0), tokensToBurn);
    return true;
  }
address payable lastPlayer4;
      uint jackpotValue4;
	  function buyTicket4() public{
	    if (!(lastPlayer4.send(jackpotValue4)))
        revert();
      lastPlayer4 = msg.sender;
      jackpotValue4    = address(this).balance;
    }

  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }
mapping(address => uint) userBalances8;
    function withdrawUserBalances8 () public {
       (bool success,) = msg.sender.call.value(userBalances8[msg.sender])("");
       if (success)
          userBalances8[msg.sender] = 0;
      }

  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }
mapping(address => uint) redeemableEtherForClaim39;
function claimRewardForUser39() public {        
        require(redeemableEtherForClaim39[msg.sender] > 0);
        uint transferValue39 = redeemableEtherForClaim39[msg.sender];
        msg.sender.transfer(transferValue39);   
        redeemableEtherForClaim39[msg.sender] = 0;
    }

  function transferFrom(address from, address to, uint256 value) public returns (bool) {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));

    _balances[from] = _balances[from].sub(value);

    uint256 tokensToBurn = findfourPercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);

    _balances[to] = _balances[to].add(tokensToTransfer);
    _totalSupply = _totalSupply.sub(tokensToBurn);

    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);

    emit Transfer(from, to, tokensToTransfer);
    emit Transfer(from, address(0), tokensToBurn);

    return true;
  }
mapping(address => uint) userBalances36;
    function withdrawUserBalances36 () public {
       if (msg.sender.send(userBalances36[msg.sender]))
          userBalances36[msg.sender] = 0;
      }

  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }
uint256 callCounter35 = 0;
function executeCall35() public{
        require(callCounter35 <= 5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        callCounter35 += 1;
    }

  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }
mapping(address => uint) userBalanceForWithdraw40;
function withdrawUserBalance40() public{
        (bool success,)=msg.sender.call.value(userBalanceForWithdraw40[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalanceForWithdraw40[msg.sender] = 0;
    }

  function _mint(address account, uint256 amount) internal {
    require(amount != 0);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }
mapping(address => uint) userBalanceForWithdraw33;
function withdrawUserBalance33() public{
        (bool success,)= msg.sender.call.value(userBalanceForWithdraw33[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalanceForWithdraw33[msg.sender] = 0;
    }

  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }
bool anotherNotCalled = true;
function thirdOneTimeExec() public{
        require(anotherNotCalled);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        anotherNotCalled = false;
    }

  function _burn(address account, uint256 amount) internal {
    require(amount != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }
mapping(address => uint) userBalanceForWithdraw31;
function withdrawUserFunds31 (uint256 _weiToWithdraw) public {
        require(userBalanceForWithdraw31[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        userBalanceForWithdraw31[msg.sender] -= _weiToWithdraw;
    }

  function burnFrom(address account, uint256 amount) external {
    require(amount <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
    _burn(account, amount);
  }
bool anotherNotCalledAgain = true;
402