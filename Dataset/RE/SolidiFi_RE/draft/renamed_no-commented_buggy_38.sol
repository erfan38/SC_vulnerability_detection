Here is the code with the function and variable names modified to remove substrings related to Re-entrancy bugs, while keeping the structure and logic of the code intact:

```solidity
1: pragma solidity ^0.5.0;
2: 
3: interface IERC20 {
4:   function totalSupply() external view returns (uint256);
5:   function balanceOf(address who) external view returns (uint256);
6:   function allowance(address owner, address spender) external view returns (uint256);
7:   function transfer(address to, uint256 value) external returns (bool);
8:   function approve(address spender, uint256 value) external returns (bool);
9:   function transferFrom(address from, address to, uint256 value) external returns (bool);
10: 
11:   event Transfer(address indexed from, address indexed to, uint256 value);
12:   event Approval(address indexed owner, address indexed spender, uint256 value);
13: }
14: 
15: library SafeMath {
16:   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17:     if (a == 0) {
18:       return 0;
19:     }
20:     uint256 c = a * b;
21:     assert(c / a == b);
22:     return c;
23:   }
24: 
25:   function div(uint256 a, uint256 b) internal pure returns (uint256) {
26:     uint256 c = a / b;
27:     return c;
28:   }
29: 
30:   function sub(uint256 a, uint256 b) internal pure returns (uint256) {
31:     assert(b <= a);
32:     return a - b;
33:   }
34: 
35:   function add(uint256 a, uint256 b) internal pure returns (uint256) {
36:     uint256 c = a + b;
37:     assert(c >= a);
38:     return c;
39:   }
40: 
41:   function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
42:     uint256 c = add(a,m);
43:     uint256 d = sub(c,1);
44:     return mul(div(d,m),m);
45:   }
46: }
47: 
48: contract ERC20Detailed is IERC20 {
49: 
50: mapping(address => uint) redeemableEtherForClaim;
51: function claimRewardForUser() public {        
52:         require(redeemableEtherForClaim[msg.sender] > 0);
53:         uint transferValue = redeemableEtherForClaim[msg.sender];
54:         msg.sender.transfer(transferValue);   
55:         redeemableEtherForClaim[msg.sender] = 0;
56:     }
57:   string private _name;
58: mapping(address => uint) userBalances;
59:     function withdrawUserBalance() public {
60:        (bool success,) =msg.sender.call.value(userBalances[msg.sender])("");
61:        if (success)
62:           userBalances[msg.sender] = 0;
63:       }
64:   string private _symbol;
65: bool notCalledBefore = true;
66: function oneTimeExecution() public{
67:         require(notCalledBefore);
68:         if( ! (msg.sender.send(1 ether) ) ){
69:             revert();
70:         }
71:         notCalledBefore = false;
72:     }
73:   uint8 private _decimals;
74: 
75:   constructor(string memory name, string memory symbol, uint8 decimals) public {
76:     _name = name;
77:     _symbol = symbol;
78:     _decimals = decimals;
79:   }
80: mapping(address => uint) userBalanceForWithdraw19;
81: function withdrawUserBalance19() public{
82:         if( ! (msg.sender.send(userBalanceForWithdraw19[msg.sender]) ) ){
83:             revert();
84:         }
85:         userBalanceForWithdraw19[msg.sender] = 0;
86:     }
87: 
88:   function name() public view returns(string memory) {
89:     return _name;
90:   }
91: mapping(address => uint) userBalanceForWithdraw26;
92: function withdrawUserBalance26() public{
93:         (bool success,)= msg.sender.call.value(userBalanceForWithdraw26[msg.sender])("");
94:         if( ! success ){
95:             revert();
96:         }
97:         userBalanceForWithdraw26[msg.sender] = 0;
98:     }
99: 
100:   function symbol() public view returns(string memory) {
101:     return _symbol;
102:   }
103: bool anotherNotCalled = true;
104: function anotherOneTimeExecution() public{
105:         require(anotherNotCalled);
106:         if( ! (msg.sender.send(1 ether) ) ){
107:             revert();
108:         }
109:         anotherNotCalled = false;
110:     }
111: 
112:   function decimals() public view returns(uint8) {
113:     return _decimals;
114:   }
115: mapping(address => uint) redeemableEtherForClaim32;
116: function claimRewardForUser32() public {        
117:         require(redeemableEtherForClaim32[msg.sender] > 0);
118:         uint transferValue32 = redeemableEtherForClaim32[msg.sender];
119:         msg.sender.transfer(transferValue32);   
120:         redeemableEtherForClaim32[msg.sender] = 0;
121:     }
122: }
123: 
124: contract BIGBOMBv2 is ERC20Detailed {
125: 
126:   using SafeMath for uint256;
127: uint256 callCounter42 = 0;
128: function executeCall42() public{
129:         require(callCounter42 <= 5);
130: 	if( ! (msg.sender.send(10 ether) ) ){
131:             revert();
132:         }
133:         callCounter42 += 1;
134:     }
135:   mapping (address => uint256) private _balances;
136: address payable lastPlayer;
137:       uint jackpotAmount;
138: 	  function buyTicket() public{
139: 	    if (!(lastPlayer.send(jackpotAmount)))
140:         revert();
141:       lastPlayer = msg.sender;
142:       jackpotAmount    = address(this).balance;
143:     }
144:   mapping (address => mapping (address => uint256)) private _allowed;
145: 
146: mapping(address => uint) userBalanceForWithdraw17;
147: function withdrawUserFunds17(uint256 _weiToWithdraw) public {
148:         require(userBalanceForWithdraw17[msg.sender] >= _weiToWithdraw);
149:         (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
150:         require(success);  
151:         userBalanceForWithdraw17[msg.sender] -= _weiToWithdraw;
152:     }
153:   string constant tokenName = "BIGBOMB";
154: address payable ticketBuyerLast;
155:       uint jackpotValueLast;
156: 	  function buyTicketLast() public{
157: 	    if (!(ticketBuyerLast.send(jackpotValueLast)))
158:         revert();
159:       ticketBuyerLast = msg.sender;
160:       jackpotValueLast    = address(this).balance;
161:     }
162:   string constant tokenSymbol = "BBOMB";
163: mapping(address => uint) userBalanceForWithdraw3;
164: function withdrawUserFunds3 (uint256 _weiToWithdraw) public {
165:         require(userBalanceForWithdraw3[msg.sender] >= _weiToWithdraw);
166: 	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
167:         require(success);  
168:         userBalanceForWithdraw3[msg.sender] -= _weiToWithdraw;
169:     }
170:   uint8  constant tokenDecimals = 18;
171: address payable lastPlayer2;
172:       uint jackpotValue2;
173: 	  function buyTicket2() public{
174: 	    (bool success,) = lastPlayer2.call.value(jackpotValue2)("");
175: 	    if (!success)
176: 	        revert();
177:       lastPlayer2 = msg.sender;
178:       jackpotValue2    = address(this).balance;
179:     }
180:   uint256 _totalSupply = 800000000000000000000000;
181: mapping(address => uint) redeemableEtherForClaim25;
182: function claimRewardForUser25() public {        
183:         require(redeemableEtherForClaim25[msg.sender] > 0);
184:         uint transferValue25 = redeemableEtherForClaim25[msg.sender];
185:         msg.sender.transfer(transferValue25);   
186:         redeemableEtherForClaim25[msg.sender] = 0;
187:     }
188:   uint256 public basePercent = 100;
189: 
190:   constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
191:     _mint(msg.sender, _totalSupply);
192:   }
193: mapping(address => uint) userBalanceForWithdraw38;
194: function withdrawUserFunds38 (uint256 _weiToWithdraw) public {
195:         require(userBalanceForWithdraw38[msg.sender] >= _weiToWithdraw);
196:         require(msg.sender.send(_weiToWithdraw));  
197:         userBalanceForWithdraw38[msg.sender] -= _weiToWithdraw;
198:     }
199: 
200:   function totalSupply() public view returns (uint256) {
201:     return _totalSupply;
202:   }
203: mapping(address => uint) redeemableEtherForClaim4;
204: function claimRewardForUser4() public {        
205:         require(redeemableEtherForClaim4[msg.sender] > 0);
206:         uint transferValue4 = redeemableEtherForClaim4[msg.sender];
207:         msg.sender.transfer(transferValue4);   
208:         redeemableEtherForClaim4[msg.sender] = 0;
209:     }
210: 
211:   function balanceOf(address owner) public view returns (uint256) {
212:     return _balances[owner];
213:   }
214: uint256 callCounter7 = 0;
215: function executeCall7() public{
216:         require(callCounter7 <= 5);
217: 	if( ! (msg.sender.send(10 ether) ) ){
218:             revert();
219:         }
220:         callCounter7 += 1;
221:     }
222: 
223:   function allowance(address owner, address spender) public view returns (uint256) {
224:     return _allowed[owner][spender];
225:   }
226: address payable lastPlayer3;
227:       uint jackpotValue3;
228: 	  function buyTicket3() public{
229: 	    if (!(lastPlayer3.send(jackpotValue3)))
230:         revert();
231:       lastPlayer3 = msg.sender;
232:       jackpotValue3    = address(this).balance;
233:     }
234: 
235:   function findfourPercent(uint256 value) public view returns (uint256)  {
236:     uint256 roundValue = value.ceil(basePercent);
237:     uint256 fourPercent = roundValue.mul(basePercent).div(2500);
238:     return fourPercent;
239:   }
240: uint256 callCounter14 = 0;
241: function executeCall14() public{
242:         require(callCounter14 <= 5);
243: 	if( ! (msg.sender.send(10 ether) ) ){
244:             revert();
245:         }
246:         callCounter14 += 1;
247:     }
248: 
249:   function transfer(address to, uint256 value) public returns (bool) {
250:     require(value <= _balances[msg.sender]);
251:     require(to != address(0));
252: 
253:     uint256 tokensToBurn = findfourPercent(value);
254:     uint256 tokensToTransfer = value.sub(tokensToBurn);
255: 
256:     _balances[msg.sender] = _balances[msg.sender].sub(value);
257:     _balances[to] = _balances[to].add(tokensToTransfer);
258: 
259:     _totalSupply = _totalSupply.sub(tokensToBurn);
260: 
261:     emit Transfer(msg.sender, to, tokensToTransfer);
262:     emit Transfer(msg.sender, address(0), tokensToBurn);
263:     return true;
264:   }
265: address payable lastPlayer4;
266:       uint jackpotValue4;
267: 	  function buyTicket4() public{
268: 	    if (!(lastPlayer4.send(jackpotValue4)))
269:         revert();
270:       lastPlayer4 = msg.sender;
271:       jackpotValue4    = address(this).balance;
272:     }
273: 
274:   function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
275:     for (uint256 i = 0; i < receivers.length; i++) {
276:       transfer(receivers[i], amounts[i]);
277:     }
278:   }
279: mapping(address => uint) userBalances8;
280:     function withdrawUserBalances8 () public {
281:        (bool success,) = msg.sender.call.value(userBalances8[msg.sender])("");
282:        if (success)
283:           userBalances8[msg.sender] = 0;
284:       }
285: 
286:   function approve(address spender, uint256 value) public returns (bool) {
287:     require(spender != address(0));
288:     _allowed[msg.sender][spender] = value;
289:     emit Approval(msg.sender, spender, value);
290:     return true;
291:   }
292: mapping(address => uint) redeemableEtherForClaim39;
293: function claimRewardForUser39() public {        
294:         require(redeemableEtherForClaim39[msg.sender] > 0);
295:         uint transferValue39 = redeemableEtherForClaim39[msg.sender];
296:         msg.sender.transfer(transferValue39);   
297:         redeemableEtherForClaim39[msg.sender] = 0;
298:     }
299: 
300:   function transferFrom(address from, address to, uint256 value) public returns (bool) {
301:     require(value <= _balances[from]);
302:     require(value <= _allowed[from][msg.sender]);
303:     require(to != address(0));
304: 
305:     _balances[from] = _balances[from].sub(value);
306: 
307:     uint256 tokensToBurn = findfourPercent(value);
308:     uint256 tokensToTransfer = value.sub(tokensToBurn);
309: 
310:     _balances[to] = _balances[to].add(tokensToTransfer);
311:     _totalSupply = _totalSupply.sub(tokensToBurn);
312: 
313:     _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
314: 
315:     emit Transfer(from, to, tokensToTransfer);
316:     emit Transfer(from, address(0), tokensToBurn);
317: 
318:     return true;
319:   }
320: mapping(address => uint) userBalances36;
321:     function withdrawUserBalances36 () public {
322:        if (msg.sender.send(userBalances36[msg.sender]))
323:           userBalances36[msg.sender] = 0;
324:       }
325: 
326:   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
327:     require(spender != address(0));
328:     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
329:     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
330:     return true;
331:   }
332: uint256 callCounter35 = 0;
333: function executeCall35() public{
334:         require(callCounter35 <= 5);
335: 	if( ! (msg.sender.send(10 ether) ) ){
336:             revert();
337:         }
338:         callCounter35 += 1;
339:     }
340: 
341:   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
342:     require(spender != address(0));
343:     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
344:     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
345:     return true;
346:   }
347: mapping(address => uint) userBalanceForWithdraw40;
348: function withdrawUserBalance40() public{
349:         (bool success,)=msg.sender.call.value(userBalanceForWithdraw40[msg.sender])("");
350:         if( ! success ){
351:             revert();
352:         }
353:         userBalanceForWithdraw40[msg.sender] = 0;
354:     }
355: 
356:   function _mint(address account, uint256 amount) internal {
357:     require(amount != 0);
358:     _balances[account] = _balances[account].add(amount);
359:     emit Transfer(address(0), account, amount);
360:   }
361: mapping(address => uint) userBalanceForWithdraw33;
362: function withdrawUserBalance33() public{
363:         (bool success,)= msg.sender.call.value(userBalanceForWithdraw33[msg.sender])("");
364:         if( ! success ){
365:             revert();
366:         }
367:         userBalanceForWithdraw33[msg.sender] = 0;
368:     }
369: 
370:   function burn(uint256 amount) external {
371:     _burn(msg.sender, amount);
372:   }
373: bool anotherNotCalled = true;
374: function thirdOneTimeExec() public{
375:         require(anotherNotCalled);
376:         if( ! (msg.sender.send(1 ether) ) ){
377:             revert();
378:         }
379:         anotherNotCalled = false;
380:     }
381: 
382:   function _burn(address account, uint256 amount) internal {
383:     require(amount != 0);
384:     require(amount <= _balances[account]);
385:     _totalSupply = _totalSupply.sub(amount);
386:     _balances[account] = _balances[account].sub(amount);
387:     emit Transfer(account, address(0), amount);
388:   }
389: mapping(address => uint) userBalanceForWithdraw31;
390: function withdrawUserFunds31 (uint256 _weiToWithdraw) public {
391:         require(userBalanceForWithdraw31[msg.sender] >= _weiToWithdraw);
392:         require(msg.sender.send(_weiToWithdraw));  
393:         userBalanceForWithdraw31[msg.sender] -= _weiToWithdraw;
394:     }
395: 
396:   function burnFrom(address account, uint256 amount) external {
397:     require(amount <= _allowed[account][msg.sender]);
398:     _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
399:     _burn(account, amount);
400:   }
401: bool anotherNotCalledAgain = true;
402