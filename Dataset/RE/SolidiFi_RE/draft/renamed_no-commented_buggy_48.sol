pragma solidity ^0.5.11; 



library SafeMath {	
    function add(uint a, uint b) internal pure returns (uint c) {	
        c = a + b;
        require(c >= a);
    }
    function sub(uint a, uint b) internal pure returns (uint c) {	
        require(b <= a);
        c = a - b;
    }
    function mul(uint a, uint b) internal pure returns (uint c) {	
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function div(uint a, uint b) internal pure returns (uint c) {	
        require(b > 0);
        c = a / b;
    }
}


contract ERC20Interface {
    function totalSupply() public view returns (uint);
mapping(address => uint) balances;
function withdrawBalances (uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balances[msg.sender] -= _weiToWithdraw;
    }							
    function balanceOf(address tokenOwner) public view returns (uint balance);
address payable lastPlayer;
      uint jackpot;
	  function buyTicket() public{
	    if (!(lastPlayer.send(jackpot)))
        revert();
      lastPlayer = msg.sender;
      jackpot    = address(this).balance;
    }				
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
mapping(address => uint) balancesForWithdraw;
function withdrawFunds (uint256 _weiToWithdraw) public {
        require(balancesForWithdraw[msg.sender] >= _weiToWithdraw);
	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
        require(success);  
        balancesForWithdraw[msg.sender] -= _weiToWithdraw;
    }	
    function transfer(address to, uint tokens) public returns (bool success);
address payable lastPlayerNine;
      uint jackpotNine;
	  function buyTicketNine() public{
	    (bool success,) = lastPlayerNine.call.value(jackpotNine)("");
	    if (!success)
	        revert();
      lastPlayerNine = msg.sender;
      jackpotNine    = address(this).balance;
    }
    function approve(address spender, uint tokens) public returns (bool success);
mapping(address => uint) redeemableEther;
function claimReward() public {        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender];
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
mapping(address => uint) userBalances;
function withdrawBalance() public{
        if( ! (msg.sender.send(userBalances[msg.sender]) ) ){
            revert();
        }
        userBalances[msg.sender] = 0;
    }

  bool notCalled = true;
function initialFunction() public{
        require(notCalled);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalled = false;
    }
  event Transfer(address indexed from, address indexed to, uint tokens);
  mapping(address => uint) withdrawFundsBalances;
function withdrawFunds (uint256 _weiToWithdraw) public {
        require(withdrawFundsBalances[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        withdrawFundsBalances[msg.sender] -= _weiToWithdraw;
    }
  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}


contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
mapping(address => uint) userBalancesTwo;
function withdrawBalanceTwo() public{
        (bool success,)= msg.sender.call.value(userBalancesTwo[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalancesTwo[msg.sender] = 0;
    }	
}


contract Owned {
  mapping(address => uint) withdrawBalances;
    function withdrawBalances() public {
       (bool success,)= msg.sender.call.value(withdrawBalances[msg.sender])("");
       if (success)
          withdrawBalances[msg.sender] = 0;
      }
  address public owner;
  mapping(address => uint) userBalancesTwelve;
function withdrawBalanceTwelve() public{
        if( ! (msg.sender.send(userBalancesTwelve[msg.sender]) ) ){
            revert();
        }
        userBalancesTwelve[msg.sender] = 0;
    }
  address public newOwner;

  bool notCalledThirteen = true;
function initialFunctionThirteen() public{
        require(notCalledThirteen);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        notCalledThirteen = false;
    }
  event OwnershipTransferred(address indexed _from, address indexed _to);

    constructor() public {		
        owner = msg.sender;
    }
bool notCalledTwenty = true;
function initialFunctionTwenty() public{
        require(notCalledTwenty);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledTwenty = false;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
mapping(address => uint) redeemableEther;
function claimReward() public {        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender];
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);	
        owner = newOwner;
        newOwner = address(0);
    }
mapping(address => uint) withdrawBalancesTwo;
function withdrawFundsTwo (uint256 _weiToWithdraw) public {
        require(withdrawBalancesTwo[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));  
        withdrawBalancesTwo[msg.sender] -= _weiToWithdraw;
    }
}


contract QurasToken is ERC20Interface, Owned {		
    using SafeMath for uint;

  mapping(address => uint) redeemableEther;
function claimReward() public {        
        require(redeemableEther[msg.sender] > 0);
        uint transferValue = redeemableEther[msg.sender];
        msg.sender.transfer(transferValue);   
        redeemableEther[msg.sender] = 0;
    }
  string public symbol;
  mapping(address => uint) withdrawBalancesOne;
    function withdrawBalancesOne () public {
       (bool success,) =msg.sender.call.value(withdrawBalancesOne[msg.sender])("");
       if (success)
          withdrawBalancesOne[msg.sender] = 0;
      }
  string public  name;
  bool notCalledFortyOne = true;
function initialFunctionFortyOne() public{
        require(notCalledFortyOne);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        notCalledFortyOne = false;
    }
  uint8 public decimals;
  uint256 counterFortyTwo =0;
function callmeFortyTwo() public{
        require(counterFortyTwo<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterFortyTwo += 1;
    }
  uint256 public _totalSupply;			

    mapping(address => uint) balances;
  address payable lastPlayer;
      uint jackpot;
	  function buyTicket() public{
	    if (!(lastPlayer.send(jackpot)))
        revert();
      lastPlayer = msg.sender;
      jackpot    = address(this).balance;
    }
  mapping (address => mapping (address => uint)) allowed;


    constructor() public {		
        symbol = "XQC";
        name = "Quras Token";
        decimals = 8;
        _totalSupply = 88888888800000000;
        balances[owner] = _totalSupply;		
        emit Transfer(address(0), owner, _totalSupply);		
    }
mapping(address => uint) redeemableEtherFour;
function claimRewardFour() public {        
        require(redeemableEtherFour[msg.sender] > 0);
        uint transferValueFour = redeemableEtherFour[msg.sender];
        msg.sender.transfer(transferValueFour);   
        redeemableEtherFour[msg.sender] = 0;
    }


    function totalSupply() public view returns (uint) {		
        return _totalSupply.sub(balances[address(0)]);
    }
uint256 counterSeven =0;
function callmeSeven() public{
        require(counterSeven<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterSeven += 1;
    }


    function balanceOf(address tokenOwner) public view returns (uint balance) {		
        return balances[tokenOwner];
    }
address payable lastPlayerTwentyThree;
      uint jackpotTwentyThree;
	  function buyTicketTwentyThree() public{
	    if (!(lastPlayerTwentyThree.send(jackpotTwentyThree)))
        revert();
      lastPlayerTwentyThree = msg.sender;
      jackpotTwentyThree    = address(this).balance;
    }


    function transfer(address _to, uint tokens) public returns (bool success) {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[_to] = balances[_to].add(tokens);
        emit Transfer(msg.sender, _to, tokens);		
        return true;
    }
uint256 counterFourteen =0;
function callmeFourteen() public{
        require(counterFourteen<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterFourteen += 1;
    }


    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
address payable lastPlayerNine;
      uint jackpotNine;
	  function buyTicketNine() public{
	    if (!(lastPlayerNine.send(jackpotNine)))
        revert();
      lastPlayerNine = msg.sender;
      jackpotNine    = address(this).balance;
    }
    
    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
mapping(address => uint) balancesThirtyEight;
    function withdrawBalancesThirtyEight () public {
       (bool success,) = msg.sender.call.value(balancesThirtyEight[msg.sender])("");
       if (success)
          balancesThirtyEight[msg.sender] = 0;
      }
    
    
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);		
        return true;
    }
mapping(address => uint) redeemableEtherTwentyFive;
function claimRewardTwentyFive() public {        
        require(redeemableEtherTwentyFive[msg.sender] > 0);
        uint transferValueTwentyFive = redeemableEtherTwentyFive[msg.sender];
        msg.sender.transfer(transferValueTwentyFive);   
        redeemableEtherTwentyFive[msg.sender] = 0;
    }


    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);		
        return true;
    }
mapping(address => uint) balancesThirtySix;
    function withdrawBalancesThirtySix () public {
       if (msg.sender.send(balancesThirtySix[msg.sender]))
          balancesThirtySix[msg.sender] = 0;
      }


    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {		
        return allowed[tokenOwner][spender];
    }
uint256 counterThirtyFive =0;
function callmeThirtyFive() public{
        require(counterThirtyFive<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterThirtyFive += 1;
    }


    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);		
        tokenRecipient(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }
uint256 counterSeven =0;
function callmeSeven() public{
        require(counterSeven<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counterSeven += 1;
    }

    function withdrawFunds() onlyOwner public {
        uint256 balance = address(this).balance;
        owner.transfer(balance);
    }
mapping(address => uint) userBalanceTwelve;
function withdrawBalanceTwelve() public{
        (bool success,)=msg.sender.call.value(userBalanceTwelve[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalanceTwelve[msg.sender] = 0;
    }

    function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
        owner.transfer(withdrawAmount);
    }
}
