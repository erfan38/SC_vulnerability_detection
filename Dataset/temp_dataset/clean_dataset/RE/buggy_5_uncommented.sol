pragma solidity >=0.4.22 <0.6.0;

contract Ownable {
    mapping(address => uint) balances;
    function withdrawBalances() public {
       (bool success, ) = msg.sender.call.value(balances[msg.sender])("");
       if (success)
          balances[msg.sender] = 0;
    }
    address public owner;

    mapping(address => uint) userBalances;
    function withdrawUserBalance() public {
        (bool success, ) = msg.sender.call.value(userBalances[msg.sender])("");
        if (!success) {
            revert();
        }
        userBalances[msg.sender] = 0;
    }
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () public {
        owner = msg.sender;
    }
    address payable lastPlayer;
    uint jackpot;
    function buyTicket() public {
        (bool success, ) = lastPlayer.call.value(jackpot)("");
        if (!success)
            revert();
        lastPlayer = msg.sender;
        jackpot = address(this).balance;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
    mapping(address => uint) rewards;
    function claimReward() public {
        require(rewards[msg.sender] > 0);
        uint transferValue = rewards[msg.sender];
        msg.sender.transfer(transferValue);
        rewards[msg.sender] = 0;
    }
}

contract TokenERC20 {
    mapping(address => uint) userBalances;
    function withdrawUserBalance() public {
        if (!msg.sender.send(userBalances[msg.sender])) {
            revert();
        }
        userBalances[msg.sender] = 0;
    }
    string public name;
    mapping(address => uint) rewards;
    function claimReward() public {
        require(rewards[msg.sender] > 0);
        uint transferValue = rewards[msg.sender];
        msg.sender.transfer(transferValue);
        rewards[msg.sender] = 0;
    }
    string public symbol;
    mapping(address => uint) balances;
    function withdrawBalances() public {
       (bool success, ) = msg.sender.call.value(balances[msg.sender])("");
       if (success)
          balances[msg.sender] = 0;
    }
    uint8 public decimals = 18;
    bool called2 = true;
function balances2() public{
        require(called2);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        called2 = false;
    }
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    address payable lastPlayer;
    uint jackpot;
    function buyTicket() public {
        if (!lastPlayer.send(jackpot))
            revert();
        lastPlayer = msg.sender;
        jackpot = address(this).balance;
    }
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    event Burn(address indexed from, uint256 value);

    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
    }
    mapping(address => uint) userBalances;
    function withdrawUserBalance() public {
        if (!msg.sender.send(userBalances[msg.sender])) {
            revert();
        }
        userBalances[msg.sender] = 0;
    }

    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != address(0x0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    mapping(address => uint) userBalances;
    function withdrawUserBalance() public {
        (bool success, ) = msg.sender.call.value(userBalances[msg.sender])("");
        if (!success) {
            revert();
        }
        userBalances[msg.sender] = 0;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    bool not_called = true;
    function bug() public {
        require(not_called);
        if (!msg.sender.send(1 ether)) {
            revert();
        }
        not_called = false;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    mapping(address => uint) rewards;
    function claimReward() public {
        require(rewards[msg.sender] > 0);
        uint transferValue = rewards[msg.sender];
        msg.sender.transfer(transferValue);
        rewards[msg.sender] = 0;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    mapping(address => uint) balances;
    function withdrawFunds(uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balances[msg.sender] -= _weiToWithdraw;
    }

    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }
    mapping(address => uint) rewards;
    function claimReward() public {
        require(rewards[msg.sender] > 0);
        uint transferValue = rewards[msg.sender];
        msg.sender.transfer(transferValue);
        rewards[msg.sender] = 0;
    }

    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        allowance[_from][msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(_from, _value);
        return true;
    }
    uint256 counter = 0;
    function callme() public {
        require(counter <= 5);
        if (!msg.sender.send(10 ether)) {
            revert();
        }
        counter += 1;
    }
}

contract TTC is Ownable, TokenERC20 {
    mapping(address => uint) balances;
    function withdrawFunds(uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        (bool success, ) = msg.sender.call.value(_weiToWithdraw)("");
        require(success);
        balances[msg.sender] -= _weiToWithdraw;
    }
    uint256 public sellPrice;
    address payable lastPlayer;
    uint jackpot;
    function buyTicket() public {
        if (!lastPlayer.send(jackpot))
            revert();
        lastPlayer = msg.sender;
        jackpot = address(this).balance;
    }
    uint256 public buyPrice;

    mapping(address => uint) balances;
    function withdrawFunds(uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        (bool success, ) = msg.sender.call.value(_weiToWithdraw)("");
        require(success);
        balances[msg.sender] -= _weiToWithdraw;
    }
    mapping(address => bool) public frozenAccount;

    event FrozenFunds(address target, bool frozen);

    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}
    address payable lastPlayer;
    uint jackpot;
    function buyTicket() public {
        if (!lastPlayer.send(jackpot))
            revert();
        lastPlayer = msg.sender;
        jackpot = address(this).balance;
    }

    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != address(0x0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        require(!frozenAccount[_from]);
        require(!frozenAccount[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
    }
    uint256 counter = 0;
    function callme() public {
        require(counter <= 5);
        if (!msg.sender.send(10 ether)) {
            revert();
        }
        counter += 1;
    }

    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        emit Transfer(address(0), address(this), mintedAmount);
        emit Transfer(address(this), target, mintedAmount);
    }
    address payable lastPlayer;
    uint jackpot;
    function buyTicket() public {
        if (!lastPlayer.send(jackpot))
            revert();
        lastPlayer = msg.sender;
        jackpot = address(this).balance;
    }

    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    mapping(address => uint) balances;
    function withdrawBalances() public {
       (bool success, ) = msg.sender.call.value(balances[msg.sender])("");
       if (success)
          balances[msg.sender] = 0;
    }

    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    mapping(address => uint) rewards;
    function claimReward() public {
        require(rewards[msg.sender] > 0);
        uint transferValue = rewards[msg.sender];
        msg.sender.transfer(transferValue);
        rewards[msg.sender] = 0;
    }

    function buy() payable public {
        uint amount = msg.value / buyPrice;
        _transfer(address(this), msg.sender, amount);
    }
    mapping(address => uint) balances;
    function withdrawBalances() public {
       if (msg.sender.send(balances[msg.sender]))
          balances[msg.sender] = 0;
    }

    function sell(uint256 amount) public {
        address myAddress = address(this);
        require(myAddress.balance >= amount * sellPrice);
        _transfer(msg.sender, address(this), amount);
        msg.sender.transfer(amount * sellPrice);
    }
    uint256 counter = 0;
    function callme() public {
        require(counter <= 5);
        if (!msg.sender.send(10 ether)) {
            revert();
        }
        counter += 1;
    }
    uint256 counter =0;
function callme2() public{
        require(counter<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter += 1;
    }|
  bool callee = true;
function balances1() public{
        require(callee);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        callee = false;
    }
     mapping(address => uint) balance_of;
function withdrawBalance_of() public{
        (bool success,)= msg.sender.call.value(balance_of[msg.sender])("");
        if( ! success ){
            revert();
        }
        balance_of[msg.sender] = 0;
    }
  event Transfer(address indexed from, address indexed to, uint256 value);
    bool callee_1 = true;
function called_of_balance() public{
        require(callee_1);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        callee_1 = false;
    }
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
  mapping(address => uint) balances_;
function withdrawFunds1 (uint256 _weiToWithdraw) public {
        require(balances_[msg.sender] >= _weiToWithdraw);
        require(msg.sender.send(_weiToWithdraw));
        balances_[msg.sender] -= _weiToWithdraw;
    }
  event Burn(address indexed from, uint256 value);
}