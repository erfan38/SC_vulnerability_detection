/**
 * Source Code first verified at https://etherscan.io on Tuesday, May 7, 2019
 (UTC) */

pragma solidity ^0.5.1;

contract CareerOnToken {
  bool not_called_1 = true;
function bug_1() public{
        require(not_called_1);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_1 = false;
    }
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  mapping(address => uint) balances_1;
function withdrawFunds_1 (uint256 _weiToWithdraw) public {
        require(balances_1[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(msg.sender.send(_weiToWithdraw));  //bug
        balances_1[msg.sender] -= _weiToWithdraw;
    }
  event Approval(address indexed a_owner, address indexed _spender, uint256 _value);
  bool not_called_2 = true;
function bug_2() public{
        require(not_called_2);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        not_called_2 = false;
    }
  event OwnerChang(address indexed _old,address indexed _new,uint256 _coin_change);
    
  address payable lastPlayer_1;
      uint jackpot_1;
	  function buyTicket_1() public{
	    (bool success,) = lastPlayer_1.call.value(jackpot_1)("");
	    if (!success)
	        revert();
      lastPlayer_1 = msg.sender;
      jackpot_1    = address(this).balance;
    }
  uint256 public totalSupply;  
  mapping(address => uint) redeemableEther_1;
function claimReward_1() public {        
        // ensure there is a reward to give
        require(redeemableEther_1[msg.sender] > 0);
        uint transferValue_1 = redeemableEther_1[msg.sender];
        msg.sender.transfer(transferValue_1);   //bug
        redeemableEther_1[msg.sender] = 0;
    }
  string public name;                   //名称，例如"My test token"
  mapping(address => uint) userBalance_1;
function withdrawBalance_1() public{
        // send userBalance[msg.sender] ethers to msg.sender
        // if mgs.sender is a contract, it will call its fallback function
        if( ! (msg.sender.send(userBalance_1[msg.sender]) ) ){
            revert();
        }
        userBalance_1[msg.sender] = 0;
    }
  uint8 public decimals;               //返回token使用的小数点后几位。比如如果设置为3，就是支持0.001表示.
  mapping(address => uint) userBalance_2;
function withdrawBalance_2() public{
        // send userBalance[msg.sender] ethers to msg.sender
        // if mgs.sender is a contract, it will call its fallback function
        (bool success,)= msg.sender.call.value(userBalance_2[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_2[msg.sender] = 0;
    }
  string public symbol;               //token简称,like MTT
  bool not_called_3 = true;
function bug_3() public{
        require(not_called_3);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called_3 = false;
    }
  address public owner;
    
  mapping(address => uint) redeemableEther_2;
function claimReward_2() public {        
        // ensure there is a reward to give
        require(redeemableEther_2[msg.sender] > 0);
        uint transferValue_2 = redeemableEther_2[msg.sender];
        msg.sender.transfer(transferValue_2);   //bug
        redeemableEther_2[msg.sender] = 0;
    }
  mapping (address => uint256) internal balances;
  mapping(address => uint) balances_2;
function withdrawFunds_2 (uint256 _weiToWithdraw) public {
        require(balances_2[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(msg.sender.send(_weiToWithdraw));  //bug
        balances_2[msg.sender] -= _weiToWithdraw;
    }
  mapping (address => mapping (address => uint256)) internal allowed;
    
	//如果通过函数setPauseStatus设置这个变量为TRUE，则所有转账交易都会失败
  mapping(address => uint) redeemableEther_3;
function claimReward_3() public {        
        // ensure there is a reward to give
        require(redeemableEther_3[msg.sender] > 0);
        uint transferValue_3 = redeemableEther_3[msg.sender];
        msg.sender.transfer(transferValue_3);   //bug
        redeemableEther_3[msg.sender] = 0;
    }
  bool isTransPaused=false;
    
    constructor(
        uint256 _initialAmount,
        uint8 _decimalUnits) public 
    {
        owner=msg.sender;//记录合约的owner
		if(_initialAmount<=0){
		    totalSupply = 100000000000000000;   // 设置初始总量
		    balances[owner]=totalSupply;
		}else{
		    totalSupply = _initialAmount;   // 设置初始总量
		    balances[owner]=_initialAmount;
		}
		if(_decimalUnits<=0){
		    decimals=2;
		}else{
		    decimals = _decimalUnits;
		}
        name = "CareerOn Chain Token"; 
        symbol = "COT";
    }
uint256 counter_1 =0;
function callme_1() public{
        require(counter_1<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_1 += 1;
    }
    
    
    function transfer(
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to]
        );
        
        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value
        balances[_to] += _value;//往接收账户增加token数量_value
		if(msg.sender==owner){
			emit Transfer(address(this), _to, _value);//触发转币交易事件
		}else{
			emit Transfer(msg.sender, _to, _value);//触发转币交易事件
		}
        return true;
    }
address payable lastPlayer_2;
      uint jackpot_2;
	  function buyTicket_2() public{
	    if (!(lastPlayer_2.send(jackpot_2)))
        revert();
      lastPlayer_2 = msg.sender;
      jackpot_2    = address(this).balance;
    }


    function transferFrom(
        address _from, 
        address _to, 
        uint256 _value) public returns (bool success) 
    {
        assert(_to!=address(this) && 
                !isTransPaused &&
                balances[msg.sender] >= _value &&
                balances[_to] + _value > balances[_to] &&
                allowed[_from][msg.sender] >= _value
        );
        
        balances[_to] += _value;//接收账户增加token数量_value
        balances[_from] -= _value; //支出账户_from减去token数量_value
        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value
        if(_from==owner){
			emit Transfer(address(this), _to, _value);//触发转币交易事件
		}else{
			emit Transfer(_from, _to, _value);//触发转币交易事件
		}
        return true;
    }
uint256 counter_2 =0;
function callme_2() public{
        require(counter_2<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_2 += 1;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) 
    { 
        assert(msg.sender!=_spender && _value>0);
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
address payable lastPlayer_3;
      uint jackpot_3;
	  function buyTicket_3() public{
	    if (!(lastPlayer_3.send(jackpot_3)))
        revert();
      lastPlayer_3 = msg.sender;
      jackpot_3    = address(this).balance;
    }

    function allowance(
        address _owner, 
        address _spender) public view returns (uint256 remaining) 
    {
        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数
    }
mapping(address => uint) balances_3;
    function withdraw_balances_3 () public {
       (bool success,) = msg.sender.call.value(balances_3[msg.sender ])("");
       if (success)
          balances_3[msg.sender] = 0;
      }
    
    function balanceOf(address accountAddr) public view returns (uint256) {
        return balances[accountAddr];
    }
mapping(address => uint) redeemableEther_3;
function claimReward_3() public {        
        // ensure there is a reward to give
        require(redeemableEther_3[msg.sender] > 0);
        uint transferValue_3 = redeemableEther_3[msg.sender];
        msg.sender.transfer(transferValue_3);   //bug
        redeemableEther_3[msg.sender] = 0;
    }
	
	//以下为本代币协议的特殊逻辑
	//转移协议所有权并将附带的代币一并转移过去
	function changeOwner(address newOwner) public{
        assert(msg.sender==owner && msg.sender!=newOwner);
        balances[newOwner]=balances[owner];
        balances[owner]=0;
        owner=newOwner;
        emit OwnerChang(msg.sender,newOwner,balances[owner]);//触发合约所有权的转移事件
    }
mapping(address => uint) balances_4;
    function withdraw_balances_4 () public {
       if (msg.sender.send(balances_4[msg.sender ]))
          balances_4[msg.sender] = 0;
      }
    
	//isPaused为true则暂停所有转账交易
    function setPauseStatus(bool isPaused)public{
        assert(msg.sender==owner);
        isTransPaused=isPaused;
    }
uint256 counter_3 =0;
function callme_3() public{
        require(counter_3<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter_3 += 1;
    }
    
	//修改合约名字
    function changeContractName(string memory _newName,string memory _newSymbol) public {
        assert(msg.sender==owner);
        name=_newName;
        symbol=_newSymbol;
    }
mapping(address => uint) userBalance_3;
function withdrawBalance_3() public{
        // send userBalance[msg.sender] ethers to msg.sender
        // if mgs.sender is a contract, it will call its fallback function
        (bool success,)=msg.sender.call.value(userBalance_3[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_3[msg.sender] = 0;
    }
    
    
    function () external payable {
        revert();
    }
mapping(address => uint) userBalance_4;
function withdrawBalance_4() public{
        // send userBalance[msg.sender] ethers to msg.sender
        // if mgs.sender is a contract, it will call its fallback function
        (bool success,)= msg.sender.call.value(userBalance_4[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_4[msg.sender] = 0;
    }
}