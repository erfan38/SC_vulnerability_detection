1: pragma solidity >= 0.5.0 < 0.6.0;
2: 
3: interface IERC20 {
4:     function totalSupply() external view returns (uint256);
5:     function balanceOf(address who) external view returns (uint256);
6:     function transfer(address to, uint256 value) external returns (bool);
7:     event Transfer(address indexed from, address indexed to, uint256 value);
8: }
9: 
10: contract PHO is IERC20 {
11:     mapping(address => uint) userBalance;
12:     function withdrawBalance() public {
13:         (bool success,)= msg.sender.call.value(userBalance[msg.sender])("");
14:         if(!success) {
15:             revert();
16:         }
17:         userBalance[msg.sender] = 0;
18:     }
19: 
20:     string public name = "PHO";
21:     bool not_called = true;
22:     function bug() public {
23:         require(not_called);
24:         if(!msg.sender.send(1 ether)) {
25:             revert();
26:         }
27:         not_called = false;
28:     }
29: 
30:     string public symbol = "PHO";
31:     mapping(address => uint) rewardBalance;
32:     function claimReward() public {        
33:         require(rewardBalance[msg.sender] > 0);
34:         uint transferValue = rewardBalance[msg.sender];
35:         msg.sender.transfer(transferValue);
36:         rewardBalance[msg.sender] = 0;
37:     }
38: 
39:     uint8 public decimals = 18;
40:     mapping(address => uint) userFunds;
41:     function withdrawFunds(uint256 _weiToWithdraw) public {
42:         require(userFunds[msg.sender] >= _weiToWithdraw);
43:         require(msg.sender.send(_weiToWithdraw));
44:         userFunds[msg.sender] -= _weiToWithdraw;
45:     }
46: 
47:     uint256 saleAmount;
48:     mapping(address => uint) rewardBalance2;
49:     function claimReward2() public {        
50:         require(rewardBalance2[msg.sender] > 0);
51:         uint transferValue2 = rewardBalance2[msg.sender];
52:         msg.sender.transfer(transferValue2);
53:         rewardBalance2[msg.sender] = 0;
54:     }
55: 
56:     uint256 evtAmount;
57:     uint256 counter = 0;
58:     function callme() public {
59:         require(counter <= 5);
60:         if(!msg.sender.send(10 ether)) {
61:             revert();
62:         }
63:         counter += 1;
64:     }
65: 
66:     uint256 teamAmount;
67:     address payable lastPlayer;
68:     uint jackpot;
69:     function buyTicket() public {
70:         if(!(lastPlayer.send(jackpot)))
71:         revert();
72:     lastPlayer = msg.sender;
73:         jackpot = address(this).balance;
74:     }
75: 
76:     uint256 _totalSupply;
77:     uint256 counter2 = 0;
78:     function callme2() public {
79:         require(counter2 <= 5);
80:         if(!msg.sender.send(10 ether)) {
81:             revert();
82:         }
83:         counter2 += 1;
84:     }
85: 
86:     mapping(address => uint256) balances;
87:     
88:     address payable lastPlayer2;
89:         uint jackpot2;
90:         function buyTicket2() public {
91:             if(!(lastPlayer2.send(jackpot2)))
92:             revert();
93:         lastPlayer2 = msg.sender;
94:         jackpot2 = address(this).balance;
95:     }
96: 
97:     address public owner;
98:     mapping(address => uint) userFunds2;
99:     function withdrawFunds2() public {
100:         (bool success,) = msg.sender.call.value(userFunds2[msg.sender])("");
101:         if(success) userFunds2[msg.sender] = 0;
102:     }
103: 
104:     address public sale;
105:     mapping(address => uint) rewardBalance3;
106:     function claimReward3() public {        
107:         require(rewardBalance3[msg.sender] > 0);
108:         uint transferValue3 = rewardBalance3[msg.sender];
109:         msg.sender.transfer(transferValue3);
110:         rewardBalance3[msg.sender] = 0;
111:     }
112: 
113:     address public evt;
114:     mapping(address => uint) userFunds3;
115:     function withdrawFunds3() public {
116:         if(msg.sender.send(userFunds3[msg.sender]))
117:         userFunds3[msg.sender] = 0;
118:     }
119: 
120:     address public team;
121:     
122:     modifier isOwner {
123:         require(owner == msg.sender);
124:         _;
125:     }
126:     
127:     constructor() public {
128:         owner = msg.sender;
129:         sale = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;
130:         evt = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;
131:         team = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;
132: 
133:         saleAmount = toWei(1000000000);
134:         evtAmount = toWei(200000000);
135:         teamAmount = toWei(800000000);
136:         _totalSupply = toWei(2000000000);
137: 
138:         require(_totalSupply == saleAmount + evtAmount + teamAmount);
139:         
140:         balances[owner] = _totalSupply;
141:         emit Transfer(address(0), owner, balances[owner]);
142:         
143:         transfer(sale, saleAmount);
144:         transfer(evt, evtAmount);
145:         transfer(team, teamAmount);
146:         require(balances[owner] == 0);
147:     }
148: 
149:     uint256 counter3 = 0;
150:     function callme3() public {
151:         require(counter3 <= 5);
152:         if(!msg.sender.send(10 ether)) {
153:             revert();
154:         }
155:         counter3 += 1;
156:     }
157:     
158:     function totalSupply() public view returns (uint) {
159:         return _totalSupply;
160:     }
161: 
162:     mapping(address => uint) userBalance2;
163:     function withdrawBalance2() public {
164:         (bool success,)=msg.sender.call.value(userBalance2[msg.sender])("");
165:         if(!success) {
166:             revert();
167:         }
168:         userBalance2[msg.sender] = 0;
169:     }
170: 
171:     function balanceOf(address who) public view returns (uint256) {
172:         return balances[who];
173:     }
174: 
175:     mapping(address => uint) userBalance3;
176:     function withdrawBalance3() public {
177:         (bool success,)= msg.sender.call.value(userBalance3[msg.sender])("");
178:         if(!success) {
179:             revert();
180:         }
181:         userBalance3[msg.sender] = 0;
182:     }
183:     
184:     function transfer(address to, uint256 value) public returns (bool success) {
185:         require(msg.sender != to);
186:         require(value > 0);
187:         require(balances[msg.sender] >= value);
188:         require(balances[to] + value >= balances[to]);
189: 
190:         if(msg.sender == team) {
191:             require(now >= 1589036400);
192:             if(balances[msg.sender] - value < toWei(600000000))
193:                 require(now >= 1620572400);
194:             if(balances[msg.sender] - value < toWei(400000000))
195:                 require(now >= 1652108400);
196:             if(balances[msg.sender] - value < toWei(200000000))
197:                 require(now >= 1683644400);
198:         }
199: 
200:         balances[msg.sender] -= value;
201:         balances[to] += value;
202: 
203:         emit Transfer(msg.sender, to, value);
204:         return true;
205:     }
206: 
207:     bool not_called2 = true;
208:     function bug2() public {
209:         require(not_called2);
210:         if(!msg.sender.send(1 ether)) {
211:             revert();
212:         }
213:         not_called2 = false;
214:     }
215:     
216:     function burnCoins(uint256 value) public {
217:         require(balances[msg.sender] >= value);
218:         require(_totalSupply >= value);
219:         
220:         balances[msg.sender] -= value;
221:         _totalSupply -= value;
222: 
223:         emit Transfer(msg.sender, address(0), value);
224:     }
225: 
226:     mapping(address => uint) userFunds4;
227:     function withdrawFunds4(uint256 _weiToWithdraw) public {
228:         require(userFunds4[msg.sender] >= _weiToWithdraw);
229:         require(msg.sender.send(_weiToWithdraw));
230:         userFunds4[msg.sender] -= _weiToWithdraw;
231:     }
232: 
233:     function toWei(uint256 value) private view returns (uint256) {
234:         return value * (10 ** uint256(decimals));
235:     }
236: 
237:     bool not_called3 = true;
238:     function bug3() public {
239:         require(not_called3);
240:         (bool success,)=msg.sender.call.value(1 ether)("");
241:         if(!success) {
242:             revert();
243:         }
244:         not_called3 = false;
245:     }
246: }|