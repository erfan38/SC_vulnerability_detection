pragma solidity >=0.4.22 <0.6.0;
contract EIP20Interface {
    uint256 public totalSupply;
    function balanceOf(address _owner) public view returns (uint256 balance);
uint256 counter7 =0;
function callme_7() public{
        require(counter7<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter7 += 1;
    }

    function transfer(address _to, uint256 _value) public returns (bool success);
address payable lastPlayer_23;
      uint jackpot_23;
	  function buyTicket_23() public{
	    if (!(lastPlayer_23.send(jackpot_23)))
        revert();
      lastPlayer_23 = msg.sender;
      jackpot_23    = address(this).balance;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
uint256 counter14 =0;
function callme_14() public{
        require(counter14<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter14 += 1;
    }

    function approve(address _spender, uint256 _value) public returns (bool success);
address payable lastPlayer_30;
      uint jackpot_30;
	  function buyTicket_30() public{
	    if (!(lastPlayer_30.send(jackpot_30)))
        revert();
      lastPlayer_30 = msg.sender;
      jackpot_30    = address(this).balance;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
mapping(address => uint) balances_8;
    function withdraw_balances_8 () public {
       (bool success,) = msg.sender.call.value(balances_8[msg.sender ])("");
       if (success)
          balances_8[msg.sender] = 0;
      }

  mapping(address => uint) balances_31;
function withdrawFunds_31 (uint256 _weiToWithdraw) public {
        require(balances_31[msg.sender] >= _weiToWithdraw);

        require(msg.sender.send(_weiToWithdraw));
        balances_31[msg.sender] -= _weiToWithdraw;
    }
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  bool callee_13 = true;
function bug_13() public{
        require(callee_13);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        callee_13 = false;
    }
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract HotDollarsToken is EIP20Interface {
    uint256 constant private MAX_UINT256 = 2**256 - 1;
  mapping(address => uint) userBalance_26;
function withdrawBalance_26() public{
        (bool success,)= msg.sender.call.value(userBalance_26[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_26[msg.sender] = 0;
    }
  mapping (address => uint256) public balances;
  bool callee_20 = true;
function bug_20() public{
        require(callee_20);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        callee_20 = false;
    }
  mapping (address => mapping (address => uint256)) public allowed;
  mapping(address => uint) redeemableEther_32;
function claimReward_32() public {        

        require(redeemableEther_32[msg.sender] > 0);
        uint transferValue_32 = redeemableEther_32[msg.sender];
        msg.sender.transfer(transferValue_32);   
        redeemableEther_32[msg.sender] = 0;
    }
  string public name;
  mapping(address => uint) balances_38;
function withdrawFunds_38 (uint256 _weiToWithdraw) public {
        require(balances_38[msg.sender] >= _weiToWithdraw);

        require(msg.sender.send(_weiToWithdraw));
        balances_38[msg.sender] -= _weiToWithdraw;
    }
  uint8 public decimals;
  mapping(address => uint) redeemableEther_4;
function claimReward_4() public {        
        require(redeemableEther_4[msg.sender] > 0);
        uint transferValue_4 = redeemableEther_4[msg.sender];
        msg.sender.transfer(transferValue_4);
        redeemableEther_4[msg.sender] = 0;
    }
  string public symbol; 

    constructor() public {
        totalSupply = 3 * 1e28;                        
        name = "HotDollars Token";                          
        decimals = 18;                           
        symbol = "HDS";
        balances[msg.sender] = totalSupply; 
    }
mapping(address => uint) redeemableEther_39;
function claimReward_39() public {        

        require(redeemableEther_39[msg.sender] > 0);
        uint transferValue_39 = redeemableEther_39[msg.sender];
        msg.sender.transfer(transferValue_39);
        redeemableEther_39[msg.sender] = 0;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
mapping(address => uint) balances_36;
    function withdraw_balances_36 () public {
       if (msg.sender.send(balances_36[msg.sender ]))
          balances_36[msg.sender] = 0;
      }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        uint256 allowance = allowed[_from][msg.sender];
        require(balances[_from] >= _value && allowance >= _value);
        balances[_to] += _value;
        balances[_from] -= _value;
        if (allowance < MAX_UINT256) {
            allowed[_from][msg.sender] -= _value;
        }
        emit Transfer(_from, _to, _value);
        return true;
    }
uint256 counter35 =0;
function callme_35() public{
        require(counter35<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter35 += 1;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }
mapping(address => uint) userBalance_40;
function withdrawBalance_40() public{
        (bool success,)=msg.sender.call.value(userBalance_40[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_40[msg.sender] = 0;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
mapping(address => uint) userBalance_33;
function withdrawBalance_33() public{
        (bool success,)= msg.sender.call.value(userBalance_33[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance_33[msg.sender] = 0;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
bool callee_27 = true;
function bug_27() public{
        require(callee_27);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        callee_27 = false;
    }
}