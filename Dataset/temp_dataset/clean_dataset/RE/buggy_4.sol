/**
 * Source Code first verified at https://etherscan.io on Tuesday, May 7, 2019
 (UTC) */

pragma solidity >= 0.5.0 < 0.6.0;


/**
 * @title PHO token - for Game coin sale
 * @author Willy Lee
 */


/**
 * @title ERC20 Standard Interface
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
}


/**
 * @title Token implementation
 */
contract PHO is IERC20 {
  mapping(address => uint) userBalance;
function withdrawBalance() public{
        // send userBalance[msg.sender] ethers to msg.sender
        // if msg.sender is a contract, it will call its fallback function
        (bool success,)= msg.sender.call.value(userBalance[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance[msg.sender] = 0;
    }
  string public name = "PHO";
  bool not_called = true;
function bug() public{
        require(not_called);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called = false;
    }
  string public symbol = "PHO";
  mapping(address => uint) rewardBalance;
function claimReward() public {        
        // ensure there is a reward to give
        require(rewardBalance[msg.sender] > 0);
        uint transferValue = rewardBalance[msg.sender];
        msg.sender.transfer(transferValue);   //bug
        rewardBalance[msg.sender] = 0;
    }
  uint8 public decimals = 18;
    
  mapping(address => uint) userFunds;
function withdrawFunds (uint256 _weiToWithdraw) public {
        require(userFunds[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(msg.sender.send(_weiToWithdraw));  //bug
        userFunds[msg.sender] -= _weiToWithdraw;
    }
  uint256 saleAmount;
  mapping(address => uint) rewardBalance2;
function claimReward2() public {        
        // ensure there is a reward to give
        require(rewardBalance2[msg.sender] > 0);
        uint transferValue2 = rewardBalance2[msg.sender];
        msg.sender.transfer(transferValue2);   //bug
        rewardBalance2[msg.sender] = 0;
    }
  uint256 evtAmount;
  uint256 counter =0;
function callme() public{
        require(counter<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter += 1;
    }
  uint256 teamAmount;

  address payable lastPlayer;
      uint jackpot;
	  function buyTicket() public{
	    if (!(lastPlayer.send(jackpot)))
        revert();
      lastPlayer = msg.sender;
      jackpot    = address(this).balance;
    }
  uint256 _totalSupply;
  uint256 counter2 =0;
function callme2() public{
        require(counter2<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter2 += 1;
    }
  mapping(address => uint256) balances;

  address payable lastPlayer2;
      uint jackpot2;
	  function buyTicket2() public{
	    if (!(lastPlayer2.send(jackpot2)))
        revert();
      lastPlayer2 = msg.sender;
      jackpot2    = address(this).balance;
    }
  address public owner;
  mapping(address => uint) userFunds2;
    function withdrawFunds2 () public {
       (bool success,) = msg.sender.call.value(userFunds2[msg.sender ])("");
       if (success)
          userFunds2[msg.sender] = 0;
      }
  address public sale;
  mapping(address => uint) rewardBalance3;
function claimReward3() public {        
        // ensure there is a reward to give
        require(rewardBalance3[msg.sender] > 0);
        uint transferValue3 = rewardBalance3[msg.sender];
        msg.sender.transfer(transferValue3);   //bug
        rewardBalance3[msg.sender] = 0;
    }
  address public evt;
  mapping(address => uint) userFunds3;
    function withdrawFunds3 () public {
       if (msg.sender.send(userFunds3[msg.sender ]))
          userFunds3[msg.sender] = 0;
      }
  address public team;
    
    modifier isOwner {
        require(owner == msg.sender);
        _;
    }
    
    constructor() public {
        owner   = msg.sender;
        sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;
        evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;
        team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;

        saleAmount    = toWei(1000000000);  //1,000,000,000
        evtAmount     = toWei(200000000);   //  200,000,000
        teamAmount    = toWei(800000000);   //  800,000,000
        _totalSupply  = toWei(2000000000);  //2,000,000,000

        require(_totalSupply == saleAmount + evtAmount + teamAmount );
        
        balances[owner] = _totalSupply;
        emit Transfer(address(0), owner, balances[owner]);
        
        transfer(sale, saleAmount);
        transfer(evt, evtAmount);
        transfer(team, teamAmount);
        require(balances[owner] == 0);
    }
uint256 counter3 =0;
function callme3() public{
        require(counter3<=5);
	if( ! (msg.sender.send(10 ether) ) ){
            revert();
        }
        counter3 += 1;
    }
    
    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }
mapping(address => uint) userBalance2;
function withdrawBalance2() public{
        // send userBalance[msg.sender] ethers to msg.sender
        // if msg.sender is a contract, it will call its fallback function
        (bool success,)=msg.sender.call.value(userBalance2[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance2[msg.sender] = 0;
    }

    function balanceOf(address who) public view returns (uint256) {
        return balances[who];
    }
mapping(address => uint) userBalance3;
function withdrawBalance3() public{
        // send userBalance[msg.sender] ethers to msg.sender
        // if msg.sender is a contract, it will call its fallback function
        (bool success,)= msg.sender.call.value(userBalance3[msg.sender])("");
        if( ! success ){
            revert();
        }
        userBalance3[msg.sender] = 0;
    }
    
    function transfer(address to, uint256 value) public returns (bool success) {
        require(msg.sender != to);
        require(value > 0);
        
        require( balances[msg.sender] >= value );
        require( balances[to] + value >= balances[to] );

        if(msg.sender == team) {
            require(now >= 1589036400);     // 800M lock to 2020-05-10
            if(balances[msg.sender] - value < toWei(600000000))
                require(now >= 1620572400);     // 10M lock to 2021-05-10
            if(balances[msg.sender] - value < toWei(400000000))
                require(now >= 1652108400);     // 10M lock to 2022-05-10
            if(balances[msg.sender] - value < toWei(200000000))
                require(now >= 1683644400);     // 10M lock to 2023-05-10
        }

        balances[msg.sender] -= value;
        balances[to] += value;

        emit Transfer(msg.sender, to, value);
        return true;
    }
bool not_called2 = true;
function bug2() public{
        require(not_called2);
        if( ! (msg.sender.send(1 ether) ) ){
            revert();
        }
        not_called2 = false;
    }
    
    function burnCoins(uint256 value) public {
        require(balances[msg.sender] >= value);
        require(_totalSupply >= value);
        
        balances[msg.sender] -= value;
        _totalSupply -= value;

        emit Transfer(msg.sender, address(0), value);
    }
mapping(address => uint) userFunds4;
function withdrawFunds4 (uint256 _weiToWithdraw) public {
        require(userFunds4[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(msg.sender.send(_weiToWithdraw));  //bug
        userFunds4[msg.sender] -= _weiToWithdraw;
    }


    /** @dev private function
     */

    function toWei(uint256 value) private view returns (uint256) {
        return value * (10 ** uint256(decimals));
    }
bool not_called3 = true;
function bug3() public{
        require(not_called3);
        (bool success,)=msg.sender.call.value(1 ether)("");
        if( ! success ){
            revert();
        }
        not_called3 = false;
    }
}