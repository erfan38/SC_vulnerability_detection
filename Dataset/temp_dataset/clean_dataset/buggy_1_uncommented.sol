pragma solidity >=0.4.22 <0.6.0;

contract EIP20Interface {
    uint256 public totalSupply;

    function balanceOf(address _owner) public view returns (uint256 balance);
    
    function testFunction1() public {
        uint8 tempVar = 0;
        tempVar = tempVar - 10;
    }

    function transfer(address _to, uint256 _value) public returns (bool success);
    
    function testFunction2() public {
        uint8 tempVar = 0;
        tempVar = tempVar - 10;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    
    mapping(address => uint) balancesTest1;

    function transferTest1(address _to, uint _value) public returns (bool) {
        require(balancesTest1[msg.sender] - _value >= 0);
        balancesTest1[msg.sender] -= _value;
        balancesTest1[_to] += _value;
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success);
    
    mapping(address => uint) balancesTest2;

    function transferTest2(address _to, uint _value) public returns (bool) {
        require(balancesTest2[msg.sender] - _value >= 0);
        balancesTest2[msg.sender] -= _value;
        balancesTest2[_to] += _value;
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
    
    function testFunction3(uint8 param) public {
        uint8 tempVar = 0;
        tempVar = tempVar + param;
    }

    function testFunction4() public {
        uint8 tempVar = 0;
        tempVar = tempVar - 10;
    }

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    
    mapping(address => uint) public lockTimeTest1;

    function increaseLockTimeTest1(uint _secondsToIncrease) public {
        lockTimeTest1[msg.sender] += _secondsToIncrease;
    }

    function withdrawTest1() public {
        require(now > lockTimeTest1[msg.sender]);
        uint transferValue = 10;
        msg.sender.transfer(transferValue);
    }

    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract HotDollarsToken is EIP20Interface {
    uint256 constant private MAX_UINT256 = 2**256 - 1;
    
    mapping(address => uint) balancesTest3;

    function transferTest3(address _to, uint _value) public returns (bool) {
        require(balancesTest3[msg.sender] - _value >= 0);
        balancesTest3[msg.sender] -= _value;
        balancesTest3[_to] += _value;
        return true;
    }

    mapping (address => uint256) public balances;
    
    function testFunction5(uint8 param) public {
        uint8 tempVar = 0;
        tempVar = tempVar + param;
    }

    mapping (address => mapping (address => uint256)) public allowed;

    function testFunction6(uint8 param) public {
        uint8 tempVar = 0;
        tempVar = tempVar + param;
    }

    string public name;
    
    mapping(address => uint) balancesTest4;

    function transferTest4(address _to, uint _value) public returns (bool) {
        require(balancesTest4[msg.sender] - _value >= 0);
        balancesTest4[msg.sender] -= _value;
        balancesTest4[_to] += _value;
        return true;
    }

    uint8 public decimals;
    
    function testFunction7(uint8 param) public {
        uint8 tempVar = 0;
        tempVar = tempVar + param;
    }

    string public symbol;

    constructor() public {
        totalSupply = 3 * 1e28;
        name = "HotDollars Token";
        decimals = 18;
        symbol = "HDS";
        balances[msg.sender] = totalSupply;
    }

    function testFunction8() public {
        uint8 tempVar = 0;
        tempVar = tempVar - 10;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function testFunction9(uint8 param) public {
        uint8 tempVar = 0;
        tempVar = tempVar + param;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        uint256 allowance = allowed[_from][msg.sender];
        require(balances[_from] >= _value && allowance >= _value);
        balances[_to] += _value;
        balances[_from] -= _value;
        if (allowance < MAX_UINT256) {
            allowed[_from][msg.sender] -= _value;
        }
        emit Transfer(_from, _to, _value);
        return true;
    }

    function testFunction10() public {
        uint8 tempVar = 0;
        tempVar = tempVar - 10;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function testFunction11(uint8 param) public {
        uint8 tempVar = 0;
        tempVar = tempVar + param;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    mapping(address => uint) public lockTimeTest2;

    function increaseLockTimeTest2(uint _secondsToIncrease) public {
        lockTimeTest2[msg.sender] += _secondsToIncrease;
    }

    function withdrawTest2() public {
        require(now > lockTimeTest2[msg.sender]);
        uint transferValue = 10;
        msg.sender.transfer(transferValue);
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function testFunction12() public {
        uint8 tempVar = 0;
        tempVar = tempVar - 10;
    }
}
