1: pragma solidity ^0.5.1;
2: 
3: contract CareerOnToken {
4:   function decrementValue1() public {
5:     uint8 value = 0;
6:     value = value - 10;
7:   }
8:   
9:   event Transfer(address indexed _from, address indexed _to, uint256 _value);
10:   
11:   function decrementValue2() public {
12:     uint8 value = 0;
13:     value = value - 10;
14:   }
15:   
16:   event Approval(address indexed a_owner, address indexed _spender, uint256 _value);
17:   
18:   mapping(address => uint) public lockTime1;
19: 
20:   function increaseLockTime1(uint _secondsToIncrease) public {
21:     lockTime1[msg.sender] += _secondsToIncrease;
22:   }
23: 
24:   function withdraw1() public {
25:     require(now > lockTime1[msg.sender]);    
26:     uint transferAmount1 = 10;           
27:     msg.sender.transfer(transferAmount1);
28:   }
29:   
30:   event OwnerChange(address indexed _old, address indexed _new, uint256 _coin_change);
31:   
32:   mapping(address => uint) public lockTime2;
33: 
34:   function increaseLockTime2(uint _secondsToIncrease) public {
35:     lockTime2[msg.sender] += _secondsToIncrease;
36:   }
37: 
38:   function withdraw2() public {
39:     require(now > lockTime2[msg.sender]);    
40:     uint transferAmount2 = 10;           
41:     msg.sender.transfer(transferAmount2);
42:   }
43:   
44:   uint256 public totalSupply;  
45:   
46:   mapping(address => uint) public lockTime3;
47: 
48:   function increaseLockTime3(uint _secondsToIncrease) public {
49:     lockTime3[msg.sender] += _secondsToIncrease;
50:   }
51: 
52:   function withdraw3() public {
53:     require(now > lockTime3[msg.sender]);    
54:     uint transferAmount3 = 10;           
55:     msg.sender.transfer(transferAmount3);
56:   }
57:   
58:   string public name;
59:   
60:   function decrementValue3() public {
61:     uint8 value = 0;
62:     value = value - 10;
63:   }
64:   
65:   uint8 public decimals;
66:   
67:   mapping(address => uint) balances1;
68: 
69:   function transfer1(address _to, uint _value) public returns (bool) {
70:     require(balances1[msg.sender] - _value >= 0);
71:     balances1[msg.sender] -= _value;
72:     balances1[_to] += _value;
73:     return true;
74:   }
75:   
76:   string public symbol;
77:   
78:   function incrementValue1(uint8 increment) public {
79:     uint8 value = 0;
80:     value = value + increment;
81:   }
82:   
83:   address public owner;
84:   
85:   function incrementValue2(uint8 increment) public {
86:     uint8 value = 0;
87:     value = value + increment;
88:   }
89:   
90:   mapping (address => uint256) internal balances;
91:   
92:   mapping(address => uint) balances2;
93: 
94:   function transfer2(address _to, uint _value) public returns (bool) {
95:     require(balances2[msg.sender] - _value >= 0);
96:     balances2[msg.sender] -= _value;
97:     balances2[_to] += _value;
98:     return true;
99:   }
100:   
101:   mapping (address => mapping (address => uint256)) internal allowed;
102:   
103:   function incrementValue3(uint8 increment) public {
104:     uint8 value = 0;
105:     value = value + increment;
106:   }
107:   
108:   bool isTransPaused = false;
109:   
110:   constructor(
111:     uint256 _initialAmount,
112:     uint8 _decimalUnits
113:   ) public {
114:     owner = msg.sender;
115:     if (_initialAmount <= 0) {
116:       totalSupply = 100000000000000000;
117:       balances[owner] = totalSupply;
118:     } else {
119:       totalSupply = _initialAmount;
120:       balances[owner] = _initialAmount;
121:     }
122:     if (_decimalUnits <= 0) {
123:       decimals = 2;
124:     } else {
125:       decimals = _decimalUnits;
126:     }
127:     name = "CareerOn Chain Token"; 
128:     symbol = "COT";
129:   }
130:   
131:   function decrementValue4() public {
132:     uint8 value = 0;
133:     value = value - 10;
134:   }
135:   
136:   function transfer(
137:     address _to, 
138:     uint256 _value
139:   ) public returns (bool success) {
140:     assert(_to != address(this) && 
141:            !isTransPaused &&
142:            balances[msg.sender] >= _value &&
143:            balances[_to] + _value > balances[_to]
144:     );
145:     
146:     balances[msg.sender] -= _value;
147:     balances[_to] += _value;
148:     if (msg.sender == owner) {
149:       emit Transfer(address(this), _to, _value);
150:     } else {
151:       emit Transfer(msg.sender, _to, _value);
152:     }
153:     return true;
154:   }
155:   
156:   function decrementValue5() public {
157:     uint8 value = 0;
158:     value = value - 10;
159:   }
160:   
161:   function transferFrom(
162:     address _from, 
163:     address _to, 
164:     uint256 _value
165:   ) public returns (bool success) {
166:     assert(_to != address(this) && 
167:            !isTransPaused &&
168:            balances[msg.sender] >= _value &&
169:            balances[_to] + _value > balances[_to] &&
170:            allowed[_from][msg.sender] >= _value
171:     );
172:     
173:     balances[_to] += _value;
174:     balances[_from] -= _value;
175:     allowed[_from][msg.sender] -= _value;
176:     if (_from == owner) {
177:       emit Transfer(address(this), _to, _value);
178:     } else {
179:       emit Transfer(_from, _to, _value);
180:     }
181:     return true;
182:   }
183:   
184:   mapping(address => uint) balances3;
185: 
186:   function transfer3(address _to, uint _value) public returns (bool) {
187:     require(balances3[msg.sender] - _value >= 0);
188:     balances3[msg.sender] -= _value;
189:     balances3[_to] += _value;
190:     return true;
191:   }
192: 
193:   function approve(address _spender, uint256 _value) public returns (bool success) { 
194:     assert(msg.sender != _spender && _value > 0);
195:     allowed[msg.sender][_spender] = _value;
196:     emit Approval(msg.sender, _spender, _value);
197:     return true;
198:   }
199:   
200:   mapping(address => uint) balances4;
201: 
202:   function transfer4(address _to, uint _value) public returns (bool) {
203:     require(balances4[msg.sender] - _value >= 0);
204:     balances4[msg.sender] -= _value;
205:     balances4[_to] += _value;
206:     return true;
207:   }
208: 
209:   function allowance(
210:     address _owner, 
211:     address _spender
212:   ) public view returns (uint256 remaining) {
213:     return allowed[_owner][_spender];
214:   }
215:   
216:   function incrementValue4(uint8 increment) public {
217:     uint8 value = 0;
218:     value = value + increment;
219:   }
220:   
221:   function balanceOf(address accountAddr) public view returns (uint256) {
222:     return balances[accountAddr];
223:   }
224:   
225:   function decrementValue6() public {
226:     uint8 value = 0;
227:     value = value - 10;
228:   }
229:   
230:   function changeOwner(address newOwner) public {
231:     assert(msg.sender == owner && msg.sender != newOwner);
232:     balances[newOwner] = balances[owner];
233:     balances[owner] = 0;
234:     owner = newOwner;
235:     emit OwnerChange(msg.sender, newOwner, balances[owner]);
236:   }
237:   
238:   function incrementValue5(uint8 increment) public {
239:     uint8 value = 0;
240:     value = value + increment;
241:   }
242:   
243:   function setPauseStatus(bool isPaused) public {
244:     assert(msg.sender == owner);
245:     isTransPaused = isPaused;
246:   }
247:   
248:   function decrementValue7() public {
249:     uint8 value = 0;
250:     value = value - 10;
251:   }
252:   
253:   function changeContractName(string memory _newName, string memory _newSymbol) public {
254:     assert(msg.sender == owner);
255:     name = _newName;
256:     symbol = _newSymbol;
257:   }
258:   
259:   function incrementValue6(uint8 increment) public {
260:     uint8 value = 0;
261:     value = value + increment;
262:   }
263:   
264:   function () external payable {
265:     revert();
266:   }
267:   
268:   mapping(address => uint) public lockTime4;
269: 
270:   function increaseLockTime4(uint _secondsToIncrease) public {
271:     lockTime4[msg.sender] += _secondsToIncrease;
272:   }
273: 
274:   function withdraw4() public {
275:     require(now > lockTime4[msg.sender]);    
276:     uint transferAmount4 = 10;           
277:     msg.sender.transfer(transferAmount4);
278:   }
279: }
