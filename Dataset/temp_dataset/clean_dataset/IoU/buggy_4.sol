/**
 * Source Code first verified at https://etherscan.io on Tuesday, May 7, 2019
 (UTC) */

pragma solidity >= 0.5.0 < 0.6.0;


/**
 * @title PHO token - for Game coin sale
 * @author Willy Lee
 */


/**
 * @title ERC20 Standard Interface
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
}


/**
 * @title Token implementation
 */
contract PHO is IERC20 {
  mapping(address => uint) balancesA;

function transferA(address _to, uint _value) public returns (bool) {
    require(balancesA[msg.sender] - _value >= 0);  //bug
    balancesA[msg.sender] -= _value;  //bug
    balancesA[_to] += _value;  //bug
    return true;
  }
  string public name = "PHO";
  function incrementA(uint8 p_incrementA) public{
    uint8 tempVar1=0;
    tempVar1 = tempVar1 + p_incrementA;   // overflow bug
}
  string public symbol = "PHO";
  function incrementB(uint8 p_incrementB) public{
    uint8 tempVar2=0;
    tempVar2 = tempVar2 + p_incrementB;   // overflow bug
}
  uint8 public decimals = 18;
    
  mapping(address => uint) balancesB;

function transferB(address _to, uint _value) public returns (bool) {
    require(balancesB[msg.sender] - _value >= 0);  //bug
    balancesB[msg.sender] -= _value;  //bug
    balancesB[_to] += _value;  //bug
    return true;
  }
  uint256 saleAmount;
  function incrementC(uint8 p_incrementC) public{
    uint8 tempVar3=0;
    tempVar3 = tempVar3 + p_incrementC;   // overflow bug
}
  uint256 evtAmount;
  function decrementA() public{
    uint8 tempVar4 =0;
    tempVar4 = tempVar4 -10;   // underflow bug
}
  uint256 teamAmount;

  function decrementB() public{
    uint8 tempVar5 =0;
    tempVar5 = tempVar5 -10;   // underflow bug
}
  uint256 _totalSupply;
  mapping(address => uint) balancesC;

function transferC(address _to, uint _value) public returns (bool) {
    require(balancesC[msg.sender] - _value >= 0);  //bug
    balancesC[msg.sender] -= _value;  //bug
    balancesC[_to] += _value;  //bug
    return true;
  }
  mapping(address => uint256) balances;

  mapping(address => uint) balancesD;

function transferD(address _to, uint _value) public returns (bool) {
    require(balancesD[msg.sender] - _value >= 0);  //bug
    balancesD[msg.sender] -= _value;  //bug
    balancesD[_to] += _value;  //bug
    return true;
  }
  address public owner;
  function incrementD(uint8 p_incrementD) public{
    uint8 tempVar6=0;
    tempVar6 = tempVar6 + p_incrementD;   // overflow bug
}
  address public sale;
  function decrementC() public{
    uint8 tempVar7 =0;
    tempVar7 = tempVar7 -10;   // underflow bug
}
  address public evt;
  function incrementE(uint8 p_incrementE) public{
    uint8 tempVar8=0;
    tempVar8 = tempVar8 + p_incrementE;   // overflow bug
}
  address public team;
    
    modifier isOwner {
        require(owner == msg.sender);
        _;
    }
    
    constructor() public {
        owner   = msg.sender;
        sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;
        evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;
        team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;

        saleAmount    = toWei(1000000000);  //1,000,000,000
        evtAmount     = toWei(200000000);   //  200,000,000
        teamAmount    = toWei(800000000);   //  800,000,000
        _totalSupply  = toWei(2000000000);  //2,000,000,000

        require(_totalSupply == saleAmount + evtAmount + teamAmount );
        
        balances[owner] = _totalSupply;
        emit Transfer(address(0), owner, balances[owner]);
        
        transfer(sale, saleAmount);
        transfer(evt, evtAmount);
        transfer(team, teamAmount);
        require(balances[owner] == 0);
    }
function decrementD() public{
    uint8 tempVar9 =0;
    tempVar9 = tempVar9 -10;   // underflow bug
}
    
    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }
function incrementF(uint8 p_incrementF) public{
    uint8 tempVar10=0;
    tempVar10 = tempVar10 + p_incrementF;   // overflow bug
}

    function balanceOf(address who) public view returns (uint256) {
        return balances[who];
    }
mapping(address => uint) public lockTimeA;

function increaseLockTimeA(uint _secondsToIncrease) public {
        lockTimeA[msg.sender] += _secondsToIncrease;  //overflow
    }
function withdrawA() public {
        require(now > lockTimeA[msg.sender]);    
        uint transferValueA = 10;           
        msg.sender.transfer(transferValueA);
    }
    
    function transfer(address to, uint256 value) public returns (bool success) {
        require(msg.sender != to);
        require(value > 0);
        
        require( balances[msg.sender] >= value );
        require( balances[to] + value >= balances[to] );

        if(msg.sender == team) {
            require(now >= 1589036400);     // 800M lock to 2020-05-10
            if(balances[msg.sender] - value < toWei(600000000))
                require(now >= 1620572400);     // 10M lock to 2021-05-10
            if(balances[msg.sender] - value < toWei(400000000))
                require(now >= 1652108400);     // 10M lock to 2022-05-10
            if(balances[msg.sender] - value < toWei(200000000))
                require(now >= 1683644400);     // 10M lock to 2023-05-10
        }

        balances[msg.sender] -= value;
        balances[to] += value;

        emit Transfer(msg.sender, to, value);
        return true;
    }
function decrementE() public{
    uint8 tempVar11 =0;
    tempVar11 = tempVar11 -10;   // underflow bug
}
    
    function burnCoins(uint256 value) public {
        require(balances[msg.sender] >= value);
        require(_totalSupply >= value);
        
        balances[msg.sender] -= value;
        _totalSupply -= value;

        emit Transfer(msg.sender, address(0), value);
    }
function decrementF() public{
    uint8 tempVar12 =0;
    tempVar12 = tempVar12 -10;   // underflow bug
}


    /** @dev private function
     */

    function toWei(uint256 value) private view returns (uint256) {
        return value * (10 ** uint256(decimals));
    }
mapping(address => uint) public lockTimeB;

function increaseLockTimeB(uint _secondsToIncrease) public {
        lockTimeB[msg.sender] += _secondsToIncrease;  //overflow
    }
function withdrawB() public {
        require(now > lockTimeB[msg.sender]);    
        uint transferValueB = 10;           
        msg.sender.transfer(transferValueB);
    }
}
