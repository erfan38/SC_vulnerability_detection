{
  "4-7": {
    "vulnerabilityReason": "An unsigned integer (uint8) underflows when subtraction of 10 is performed on tempVar initialized to 0.",
    "potentialSecurityRisk": "This causes tempVar to wrap around to its maximum value (255), leading to unexpected behavior or potential exploits."
  },
  "9-12": {
    "vulnerabilityReason": "An unsigned integer (uint8) underflows when subtraction of 10 is performed on tempVar initialized to 0.",
    "potentialSecurityRisk": "This causes tempVar to wrap around to its maximum value (255), leading to unexpected behavior or potential exploits."
  },
  "14-23": {
    "vulnerabilityReason": "No validation is done after incrementing the lockTime1 mapping values. This can cause an overflow.",
    "potentialSecurityRisk": "An attacker can keep incrementing the lockTime1 to reach an overflow state, potentially avoiding the lock time."
  },
  "26-35": {
    "vulnerabilityReason": "No validation is done after incrementing the lockTime2 mapping values. This can cause an overflow.",
    "potentialSecurityRisk": "An attacker can keep incrementing the lockTime2 to reach an overflow state, potentially avoiding the lock time."
  },
  "37-40": {
    "vulnerabilityReason": "An unsigned integer (uint8) underflows when subtraction of 10 is performed on tempVar initialized to 0.",
    "potentialSecurityRisk": "This causes tempVar to wrap around to its maximum value (255), leading to unexpected behavior or potential exploits."
  },
  "42-49": {
    "vulnerabilityReason": "No check is in place to ensure that balances1[msg.sender] subtraction does not underflow.",
    "potentialSecurityRisk": "msg.sender can transfer more tokens than they own, causing balances1[msg.sender] to wrap around to a large value, resulting in incorrect balances."
  },
  "51-54": {
    "vulnerabilityReason": "No overflow check is performed when adding a param value to tempVar.",
    "potentialSecurityRisk": "If param is large enough, the addition can overflow, causing tempVar to wrap around to 0, leading to unexpected behavior or vulnerabilities."
  },
  "56-59": {
    "vulnerabilityReason": "No overflow check is performed when adding a param value to tempVar.",
    "potentialSecurityRisk": "If param is large enough, the addition can overflow, causing tempVar to wrap around to 0, leading to unexpected behavior or vulnerabilities."
  },
  "61-68": {
    "vulnerabilityReason": "No check is in place to ensure that balances2[msg.sender] subtraction does not underflow.",
    "potentialSecurityRisk": "msg.sender can transfer more tokens than they own, causing balances2[msg.sender] to wrap around to a large value, resulting in incorrect balances."
  },
  "70-73": {
    "vulnerabilityReason": "No overflow check is performed when adding a param value to tempVar.",
    "potentialSecurityRisk": "If param is large enough, the addition can overflow, causing tempVar to wrap around to 0, leading to unexpected behavior or vulnerabilities."
  },
  "76-79": {
    "vulnerabilityReason": "An unsigned integer (uint8) underflows when subtraction of 10 is performed on tempVar initialized to 0.",
    "potentialSecurityRisk": "This causes tempVar to wrap around to its maximum value (255), leading to unexpected behavior or potential exploits."
  },
  "102-105": {
    "vulnerabilityReason": "An unsigned integer (uint8) underflows when subtraction of 10 is performed on tempVar initialized to 0.",
    "potentialSecurityRisk": "This causes tempVar to wrap around to its maximum value (255), leading to unexpected behavior or potential exploits."
  },
  "126-133": {
    "vulnerabilityReason": "No check is in place to ensure that balances3[msg.sender] subtraction does not underflow.",
    "potentialSecurityRisk": "msg.sender can transfer more tokens than they own, causing balances3[msg.sender] to wrap around to a large value, resulting in incorrect balances."
  },
  "157-164": {
    "vulnerabilityReason": "No check is in place to ensure that balances4[msg.sender] subtraction does not underflow.",
    "potentialSecurityRisk": "msg.sender can transfer more tokens than they own, causing balances4[msg.sender] to wrap around to a large value, resulting in incorrect balances."
  },
  "173-176": {
    "vulnerabilityReason": "No overflow check is performed when adding a param value to tempVar.",
    "potentialSecurityRisk": "If param is large enough, the addition can overflow, causing tempVar to wrap around to 0, leading to unexpected behavior or vulnerabilities."
  },
  "184-187": {
    "vulnerabilityReason": "An unsigned integer (uint8) underflows when subtraction of 10 is performed on tempVar initialized to 0.",
    "potentialSecurityRisk": "This causes tempVar to wrap around to its maximum value (255), leading to unexpected behavior or potential exploits."
  },
  "196-199": {
    "vulnerabilityReason": "No overflow check is performed when adding a param value to tempVar.",
    "potentialSecurityRisk": "If param is large enough, the addition can overflow, causing tempVar to wrap around to 0, leading to unexpected behavior or vulnerabilities."
  },
  "205-208": {
    "vulnerabilityReason": "An unsigned integer (uint8) underflows when subtraction of 10 is performed on tempVar initialized to 0.",
    "potentialSecurityRisk": "This causes tempVar to wrap around to its maximum value (255), leading to unexpected behavior or potential exploits."
  },
  "215-218": {
    "vulnerabilityReason": "No overflow check is performed when adding a param value to tempVar.",
    "potentialSecurityRisk": "If param is large enough, the addition can overflow, causing tempVar to wrap around to 0, leading to unexpected behavior or vulnerabilities."
  },
  "223-232": {
    "vulnerabilityReason": "No validation is done after incrementing the lockTime3 mapping values. This can cause an overflow.",
    "potentialSecurityRisk": "An attacker can keep incrementing the lockTime3 to reach an overflow state, potentially avoiding the lock time."
  }
}