pragma solidity >=0.4.22 <0.6.0;
contract Ownable {
    mapping(address => uint) public lockTimeUser21;
    function increaseLockTime21(uint _secondsToIncrease) public {
        lockTimeUser21[msg.sender] += _secondsToIncrease;  
    }
    function withdraw21() public {
        require(now > lockTimeUser21[msg.sender]);    
        uint transferValue21 = 10;           
        msg.sender.transfer(transferValue21);
    }
    address public owner;
    function incrementCounter40(uint8 incrementValue40) public {
        uint8 counter1 = 0;
        counter1 = counter1 + incrementValue40;   
    }
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () public {
        owner = msg.sender;
    }
    mapping(address => uint) public lockTimeUser9;
    function increaseLockTime9(uint _secondsToIncrease) public {
        lockTimeUser9[msg.sender] += _secondsToIncrease;  
    }
    function withdraw9() public {
        require(now > lockTimeUser9[msg.sender]);    
        uint transferValue9 = 10;           
        msg.sender.transfer(transferValue9);
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
    mapping(address => uint) public lockTimeUser25;
    function increaseLockTime25(uint _secondsToIncrease) public {
        lockTimeUser25[msg.sender] += _secondsToIncrease;  
    }
    function withdraw25() public {
        require(now > lockTimeUser25[msg.sender]);    
        uint transferValue25 = 10;           
        msg.sender.transfer(transferValue25);
    }
}
contract TokenERC20 {
    mapping(address => uint) balancesUser10;
    function transfer10(address _to, uint _value) public returns (bool) {
        require(balancesUser10[msg.sender] - _value >= 0);  
        balancesUser10[msg.sender] -= _value;  
        balancesUser10[_to] += _value;  
        return true;
    }
    string public name;
    mapping(address => uint) balancesUser22;
    function transfer22(address _to, uint _value) public returns (bool) {
        require(balancesUser22[msg.sender] - _value >= 0);  
        balancesUser22[msg.sender] -= _value;  
        balancesUser22[_to] += _value;  
        return true;
    }
    string public symbol;
    function incrementCounter12(uint8 incrementValue12) public {
        uint8 counter1 = 0;
        counter1 = counter1 + incrementValue12;   
    }
    uint8 public decimals = 18;
    function decrementCounter11() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
    uint256 public totalSupply;
    mapping(address => uint) public lockTimeUser1;
    function increaseLockTime1(uint _secondsToIncrease) public {
        lockTimeUser1[msg.sender] += _secondsToIncrease;  
    }
    function withdrawOverflow1() public {
        require(now > lockTimeUser1[msg.sender]);    
        uint transferValue1 = 10;           
        msg.sender.transfer(transferValue1);
    }
    mapping (address => uint256) public balanceOf;
    mapping(address => uint) balancesUser2;
    function transferUnderflow2(address _to, uint _value) public returns (bool) {
        require(balancesUser2[msg.sender] - _value >= 0);  
        balancesUser2[msg.sender] -= _value;  
        balancesUser2[_to] += _value;  
        return true;
    }
    mapping (address => mapping (address => uint256)) public allowance;
    mapping(address => uint) public lockTimeUser33;
    function increaseLockTime33(uint _secondsToIncrease) public {
        lockTimeUser33[msg.sender] += _secondsToIncrease;  
    }
    function withdraw33() public {
        require(now > lockTimeUser33[msg.sender]);    
        uint transferValue33 = 10;           
        msg.sender.transfer(transferValue33);
    }
    event Transfer(address indexed from, address indexed to, uint256 value);
    function decrementCounter27() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    function decrementCounter31() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
    event Burn(address indexed from, uint256 value);
    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                    
        name = tokenName;                                       
        symbol = tokenSymbol;                                   
    }
    function decrementCounter19() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != address(0x0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    mapping(address => uint) balancesUser26;
    function transfer26(address _to, uint _value) public returns (bool) {
        require(balancesUser26[msg.sender] - _value >= 0);  
        balancesUser26[msg.sender] -= _value;  
        balancesUser26[_to] += _value;  
        return true;
    }
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    function incrementCounter20(uint8 incrementValue20) public {
        uint8 counter1 = 0;
        counter1 = counter1 + incrementValue20;   
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function incrementCounter32(uint8 incrementValue32) public {
        uint8 counter1 = 0;
        counter1 = counter1 + incrementValue32;   
    }
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    mapping(address => uint) balancesUser38;
    function transfer38(address _to, uint _value) public returns (bool) {
        require(balancesUser38[msg.sender] - _value >= 0);  
        balancesUser38[msg.sender] -= _value;  
        balancesUser38[_to] += _value;  
        return true;
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;            
        totalSupply -= _value;                      
        emit Burn(msg.sender, _value);
        return true;
    }
    function incrementCounter4(uint8 incrementValue4) public {
        uint8 counter1 = 0;
        counter1 = counter1 + incrementValue4;   
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from][msg.sender]);    
        balanceOf[_from] -= _value;                         
        allowance[_from][msg.sender] -= _value;             
        totalSupply -= _value;                              
        emit Burn(_from, _value);
        return true;
    }
    function decrementCounter7() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
}
contract TTC is Ownable, TokenERC20 {
    mapping(address => uint) public lockTimeUser17;
    function increaseLockTime17(uint _secondsToIncrease) public {
        lockTimeUser17[msg.sender] += _secondsToIncrease;  
    }
    function withdraw17() public {
        require(now > lockTimeUser17[msg.sender]);    
        uint transferValue17 = 10;           
        msg.sender.transfer(transferValue17);
    }
    uint256 public sellPrice;
    mapping(address => uint) public lockTimeUser37;
    function increaseLockTime37(uint _secondsToIncrease) public {
        lockTimeUser37[msg.sender] += _secondsToIncrease;  
    }
    function withdraw37() public {
        require(now > lockTimeUser37[msg.sender]);    
        uint transferValue37 = 10;           
        msg.sender.transfer(transferValue37);
    }
    uint256 public buyPrice;
    function decrementCounter3() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
    mapping (address => bool) public frozenAccount;
    mapping(address => uint) public lockTimeUser13;
    function increaseLockTime13(uint _secondsToIncrease) public {
        lockTimeUser13[msg.sender] += _secondsToIncrease;  
    }
    function withdraw13() public {
        require(now > lockTimeUser13[msg.sender]);    
        uint transferValue13 = 10;           
        msg.sender.transfer(transferValue13);
    }
    event FrozenFunds(address target, bool frozen);
    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}
    function decrementCounter23() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != address(0x0));                          
        require (balanceOf[_from] >= _value);                   
        require (balanceOf[_to] + _value >= balanceOf[_to]);    
        require(!frozenAccount[_from]);                         
        require(!frozenAccount[_to]);                           
        balanceOf[_from] -= _value;                             
        balanceOf[_to] += _value;                               
        emit Transfer(_from, _to, _value);
    }
    mapping(address => uint) balancesUser14;
    function transfer14(address _to, uint _value) public returns (bool) {
        require(balancesUser14[msg.sender] - _value >= 0);  
        balancesUser14[msg.sender] -= _value;  
        balancesUser14[_to] += _value;  
        return true;
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        emit Transfer(address(0), address(this), mintedAmount);
        emit Transfer(address(this), target, mintedAmount);
    }
    mapping(address => uint) balancesUser30;
    function transfer30(address _to, uint _value) public returns (bool) {
        require(balancesUser30[msg.sender] - _value >= 0);  
        balancesUser30[msg.sender] -= _value;  
        balancesUser30[_to] += _value;  
        return true;
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    function incrementCounter8(uint8 incrementValue8) public {
        uint8 counter1 = 0;
        counter1 = counter1 + incrementValue8;   
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function decrementCounter39() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
    function buy() payable public {
        uint amount = msg.value / buyPrice;                 
        _transfer(address(this), msg.sender, amount);       
    }
    function incrementCounter36(uint8 incrementValue36) public {
        uint8 counter1 = 0;
        counter1 = counter1 + incrementValue36;   
    }
    function sell(uint256 amount) public {
        address myAddress = address(this);
        require(myAddress.balance >= amount * sellPrice);   
        _transfer(msg.sender, address(this), amount);       
        msg.sender.transfer(amount * sellPrice);            
    }
    function decrementCounter35() public {
        uint8 counter = 0;
        counter = counter - 10;   
    }
}

I want to remove comments from a .sol file in python. Can you help me write the code?
Details: There is a .sol file with format"buggy_{number}.sol" and there is a linked csv file BugLog_{number}.csv

The csv file has a "loc" column in which lines of the sol code are mentioned. 

Target:
1- I want to remove comments, so having new sol file without comment
2- Having new csv file that the line numbers are transferred. For example if a line is 10, it means that in the original file, line 10 is highlighted. By removing some lines due to being comments, the content of line 10 now changed. I want this new line number.

Clear? if not let me know
