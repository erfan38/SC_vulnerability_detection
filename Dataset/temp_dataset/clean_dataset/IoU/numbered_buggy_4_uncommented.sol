1: pragma solidity >= 0.5.0 < 0.6.0;
2: 
3: interface IERC20 {
4:     function totalSupply() external view returns (uint256);
5:     function balanceOf(address who) external view returns (uint256);
6:     function transfer(address to, uint256 value) external returns (bool);
7:     event Transfer(address indexed from, address indexed to, uint256 value);
8: }
9: 
10: contract PHO is IERC20 {
11:   mapping(address => uint) balancesA;
12: 
13: function transferA(address _to, uint _value) public returns (bool) {
14:     require(balancesA[msg.sender] - _value >= 0);
15:     balancesA[msg.sender] -= _value;
16:     balancesA[_to] += _value;
17:     return true;
18:   }
19:   string public name = "PHO";
20:   function incrementA(uint8 p_incrementA) public{
21:     uint8 tempVar1=0;
22:     tempVar1 = tempVar1 + p_incrementA;
23: }
24:   string public symbol = "PHO";
25:   function incrementB(uint8 p_incrementB) public{
26:     uint8 tempVar2=0;
27:     tempVar2 = tempVar2 + p_incrementB;
28: }
29:   uint8 public decimals = 18;
30:     
31:   mapping(address => uint) balancesB;
32: 
33: function transferB(address _to, uint _value) public returns (bool) {
34:     require(balancesB[msg.sender] - _value >= 0);
35:     balancesB[msg.sender] -= _value;
36:     balancesB[_to] += _value;
37:     return true;
38:   }
39:   uint256 saleAmount;
40:   function incrementC(uint8 p_incrementC) public{
41:     uint8 tempVar3=0;
42:     tempVar3 = tempVar3 + p_incrementC;
43: }
44:   uint256 evtAmount;
45:   function decrementA() public{
46:     uint8 tempVar4 =0;
47:     tempVar4 = tempVar4 -10;
48: }
49:   uint256 teamAmount;
50: 
51:   function decrementB() public{
52:     uint8 tempVar5 =0;
53:     tempVar5 = tempVar5 -10;
54: }
55:   uint256 _totalSupply;
56:   mapping(address => uint) balancesC;
57: 
58: function transferC(address _to, uint _value) public returns (bool) {
59:     require(balancesC[msg.sender] - _value >= 0);
60:     balancesC[msg.sender] -= _value;
61:     balancesC[_to] += _value;
62:     return true;
63:   }
64:   mapping(address => uint256) balances;
65: 
66:   mapping(address => uint) balancesD;
67: 
68: function transferD(address _to, uint _value) public returns (bool) {
69:     require(balancesD[msg.sender] - _value >= 0);
70:     balancesD[msg.sender] -= _value;
71:     balancesD[_to] += _value;
72:     return true;
73:   }
74:   address public owner;
75:   function incrementD(uint8 p_incrementD) public{
76:     uint8 tempVar6=0;
77:     tempVar6 = tempVar6 + p_incrementD;
78: }
79:   address public sale;
80:   function decrementC() public{
81:     uint8 tempVar7 =0;
82:     tempVar7 = tempVar7 -10;
83: }
84:   address public evt;
85:   function incrementE(uint8 p_incrementE) public{
86:     uint8 tempVar8=0;
87:     tempVar8 = tempVar8 + p_incrementE;
88: }
89:   address public team;
90:     
91:     modifier isOwner {
92:         require(owner == msg.sender);
93:         _;
94:     }
95:     
96:     constructor() public {
97:         owner   = msg.sender;
98:         sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;
99:         evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;
100:         team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;
101: 
102:         saleAmount    = toWei(1000000000);
103:         evtAmount     = toWei(200000000);
104:         teamAmount    = toWei(800000000);
105:         _totalSupply  = toWei(2000000000);
106: 
107:         require(_totalSupply == saleAmount + evtAmount + teamAmount );
108:         
109:         balances[owner] = _totalSupply;
110:         emit Transfer(address(0), owner, balances[owner]);
111:         
112:         transfer(sale, saleAmount);
113:         transfer(evt, evtAmount);
114:         transfer(team, teamAmount);
115:         require(balances[owner] == 0);
116:     }
117: function decrementD() public{
118:     uint8 tempVar9 =0;
119:     tempVar9 = tempVar9 -10;
120: }
121:     
122:     function totalSupply() public view returns (uint) {
123:         return _totalSupply;
124:     }
125: function incrementF(uint8 p_incrementF) public{
126:     uint8 tempVar10=0;
127:     tempVar10 = tempVar10 + p_incrementF;
128: }
129: 
130:     function balanceOf(address who) public view returns (uint256) {
131:         return balances[who];
132:     }
133: mapping(address => uint) public lockTimeA;
134: 
135: function increaseLockTimeA(uint _secondsToIncrease) public {
136:         lockTimeA[msg.sender] += _secondsToIncrease;
137:     }
138: function withdrawA() public {
139:         require(now > lockTimeA[msg.sender]);
140:         uint transferValueA = 10;
141:         msg.sender.transfer(transferValueA);
142:     }
143:     
144:     function transfer(address to, uint256 value) public returns (bool success) {
145:         require(msg.sender != to);
146:         require(value > 0);
147:         
148:         require( balances[msg.sender] >= value );
149:         require( balances[to] + value >= balances[to] );
150: 
151:         if(msg.sender == team) {
152:             require(now >= 1589036400);
153:             if(balances[msg.sender] - value < toWei(600000000))
154:                 require(now >= 1620572400);
155:             if(balances[msg.sender] - value < toWei(400000000))
156:                 require(now >= 1652108400);
157:             if(balances[msg.sender] - value < toWei(200000000))
158:                 require(now >= 1683644400);
159:         }
160: 
161:         balances[msg.sender] -= value;
162:         balances[to] += value;
163: 
164:         emit Transfer(msg.sender, to, value);
165:         return true;
166:     }
167: function decrementE() public{
168:     uint8 tempVar11 =0;
169:     tempVar11 = tempVar11 -10;
170: }
171:     
172:     function burnCoins(uint256 value) public {
173:         require(balances[msg.sender] >= value);
174:         require(_totalSupply >= value);
175:         
176:         balances[msg.sender] -= value;
177:         _totalSupply -= value;
178: 
179:         emit Transfer(msg.sender, address(0), value);
180:     }
181: function decrementF() public{
182:     uint8 tempVar12 =0;
183:     tempVar12 = tempVar12 -10;
184: }
185: 
186:     function toWei(uint256 value) private view returns (uint256) {
187:         return value * (10 ** uint256(decimals));
188:     }
189: mapping(address => uint) public lockTimeB;
190: 
191: function increaseLockTimeB(uint _secondsToIncrease) public {
192:         lockTimeB[msg.sender] += _secondsToIncrease;
193:     }
194: function withdrawB() public {
195:         require(now > lockTimeB[msg.sender]);
196:         uint transferValueB = 10;
197:         msg.sender.transfer(transferValueB);
198:     }
199: }
