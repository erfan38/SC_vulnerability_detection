/**
 * Source Code first verified at https://etherscan.io on Tuesday, May 7, 2019
 (UTC) */

pragma solidity >=0.4.22 <0.6.0;

contract EIP20Interface {
    /// total amount of tokens
    uint256 public totalSupply;

    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) public view returns (uint256 balance);
    address lastWinner;
    function playGame(uint startTime) public {
        uint currentTime = block.timestamp;
        if (startTime + (5 * 1 days) == currentTime) {
            lastWinner = msg.sender;
        }
    }

    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint256 _value) public returns (bool success);
    function playLottery() public payable {
        uint lastBlockTime;
        require(msg.value == 10 ether); // must send 10 ether to play
        require(now != lastBlockTime); // only 1 transaction per block
        lastBlockTime = now;
        if (now % 15 == 0) { // winner
            msg.sender.transfer(address(this).balance);
        }
    }

    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    address recentWinner;
    function playAnotherGame(uint startTime) public {
        uint currentTime = block.timestamp;
        if (startTime + (5 * 1 days) == currentTime) {
            recentWinner = msg.sender;
        }
    }

    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of tokens to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint256 _value) public returns (bool success);
    function playAnotherLottery() public payable {
        uint lastBlockTime;
        require(msg.value == 10 ether); // must send 10 ether to play
        require(now != lastBlockTime); // only 1 transaction per block
        lastBlockTime = now;
        if (now % 15 == 0) { // winner
            msg.sender.transfer(address(this).balance);
        }
    }

    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
    function isPastDate() view public returns (bool) {
        return block.timestamp >= 1546300800;
    }

    // solhint-disable-next-line no-simple-event-func-name
    uint256 eventTimestamp1 = block.timestamp;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    uint256 eventTimestamp2 = block.timestamp;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract HotDollarsToken is EIP20Interface {
    uint256 constant private MAX_UINT256 = 2**256 - 1;
    address gameWinner;
    function playGame1(uint startTime) public {
        uint currentTime = block.timestamp;
        if (startTime + (5 * 1 days) == currentTime) {
            gameWinner = msg.sender;
        }
    }
    mapping (address => uint256) public balances;
    address anotherGameWinner;
    function playGame2(uint startTime) public {
        uint currentTime = block.timestamp;
        if (startTime + (5 * 1 days) == currentTime) {
            anotherGameWinner = msg.sender;
        }
    }
    mapping (address => mapping (address => uint256)) public allowed;
    /*
    NOTE:
    The following variables are OPTIONAL vanities. One does not have to include them.
    They allow one to customise the token contract & in no way influences the core functionality.
    Some wallets/interfaces might not even bother to look at this information.
    */
    address yetAnotherGameWinner;
    function playGame3(uint startTime) public {
        if (startTime + (5 * 1 days) == block.timestamp) {
            yetAnotherGameWinner = msg.sender;
        }
    }
    string public name;                   //fancy name: eg Simon Bucks
    address finalGameWinner;
    function playGame4(uint startTime) public {
        if (startTime + (5 * 1 days) == block.timestamp) {
            finalGameWinner = msg.sender;
        }
    }
    uint8 public decimals;                //How many decimals to show.
    function playFinalLottery() public payable {
        uint lastBlockTime;
        require(msg.value == 10 ether); // must send 10 ether to play
        require(now != lastBlockTime); // only 1 transaction per block
        lastBlockTime = now;
        if (now % 15 == 0) { // winner
            msg.sender.transfer(address(this).balance);
        }
    }
    string public symbol;                 //An identifier: eg SBX

    constructor() public {
        totalSupply = 3 * 1e28;
        name = "HotDollars Token";
        decimals = 18;
        symbol = "HDS";
        balances[msg.sender] = totalSupply;
    }
    address anotherFinalGameWinner;
    function playGame5(uint startTime) public {
        uint currentTime = block.timestamp;
        if (startTime + (5 * 1 days) == currentTime) {
            anotherFinalGameWinner = msg.sender;
        }
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars
        return true;
    }
    address finalGameWinner2;
    function playGame6(uint startTime) public {
        uint currentTime = block.timestamp;
        if (startTime + (5 * 1 days) == currentTime) {
            finalGameWinner2 = msg.sender;
        }
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        uint256 allowance = allowed[_from][msg.sender];
        require(balances[_from] >= _value && allowance >= _value);
        balances[_to] += _value;
        balances[_from] -= _value;
        if (allowance < MAX_UINT256) {
            allowed[_from][msg.sender] -= _value;
        }
        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars
        return true;
    }
    function isPastDate2() view public returns (bool) {
        return block.timestamp >= 1546300800;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }
    uint256 eventTimestamp3 = block.timestamp;

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars
        return true;
    }
    uint256 eventTimestamp4 = block.timestamp;

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
    uint256 eventTimestamp5 = block.timestamp;
}