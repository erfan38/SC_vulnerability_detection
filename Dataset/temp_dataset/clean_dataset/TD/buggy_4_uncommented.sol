/**
 * Source Code first verified at https://etherscan.io on Tuesday, May 7, 2019
 (UTC) */

pragma solidity >= 0.5.0 < 0.6.0;


/**
 * @title PHO token - for Game coin sale
 * @author Willy Lee
 */


/**
 * @title ERC20 Standard Interface
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
}


/**
 * @title Token implementation
 */
contract PHO is IERC20 {
  function playGame() public payable {
	uint lastBlockTime;
	require(msg.value == 10 ether);
        require(now != lastBlockTime);
        lastBlockTime = now;
        if(now % 15 == 0) {
            msg.sender.transfer(address(this).balance);
        }
    }
  string public name = "PHO";
  address recentWinner1;
function playGame1(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner1 = msg.sender;}}
  string public symbol = "PHO";
  address recentWinner2;
function playGame2(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner2 = msg.sender;}}
  uint8 public decimals = 18;
    
  address recentWinner3;
function playGame3(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		recentWinner3 = msg.sender;}}
  uint256 saleAmount;
  address recentWinner4;
function playGame4(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		recentWinner4 = msg.sender;}}
  uint256 evtAmount;
  function playGame5() public payable {
	uint lastBlockTime;
	require(msg.value == 10 ether);
        require(now != lastBlockTime);
        lastBlockTime = now;
        if(now % 15 == 0) {
            msg.sender.transfer(address(this).balance);
        }
    }
  uint256 teamAmount;

  address recentWinner5;
function playGame5(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner5 = msg.sender;}}
  uint256 _totalSupply;
  function playGame6() public payable {
	uint lastBlockTime;
	require(msg.value == 10 ether);
        require(now != lastBlockTime);
        lastBlockTime = now;
        if(now % 15 == 0) {
            msg.sender.transfer(address(this).balance);
        }
    }
  mapping(address => uint256) balances;

  address recentWinner6;
function playGame6(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner6 = msg.sender;}}
  address public owner;
  function playGame7() public payable {
	uint lastBlockTime;
	require(msg.value == 10 ether);
        require(now != lastBlockTime);
        lastBlockTime = now;
        if(now % 15 == 0) {
            msg.sender.transfer(address(this).balance);
        }
    }
  address public sale;
  function checkTimestamp() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
  address public evt;
  address recentWinner7;
function playGame7(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner7 = msg.sender;}}
  address public team;
    
    modifier isOwner {
        require(owner == msg.sender);
        _;
    }
uint256 bugv_timestamp1 = block.timestamp;
    
    constructor() public {
        owner   = msg.sender;
        sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;
        evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;
        team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;

        saleAmount    = toWei(1000000000);
        evtAmount     = toWei(200000000);
        teamAmount    = toWei(800000000);
        _totalSupply  = toWei(2000000000);

        require(_totalSupply == saleAmount + evtAmount + teamAmount );
        
        balances[owner] = _totalSupply;
        emit Transfer(address(0), owner, balances[owner]);
        
        transfer(sale, saleAmount);
        transfer(evt, evtAmount);
        transfer(team, teamAmount);
        require(balances[owner] == 0);
    }
address recentWinner8;
function playGame8(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner8 = msg.sender;}}
    
    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }
function checkTimestamp2() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }

    function balanceOf(address who) public view returns (uint256) {
        return balances[who];
    }
uint256 bugv_timestamp2 = block.timestamp;
    
    function transfer(address to, uint256 value) public returns (bool success) {
        require(msg.sender != to);
        require(value > 0);
        
        require( balances[msg.sender] >= value );
        require( balances[to] + value >= balances[to] );

        if(msg.sender == team) {
            require(now >= 1589036400);
            if(balances[msg.sender] - value < toWei(600000000))
                require(now >= 1620572400);
            if(balances[msg.sender] - value < toWei(400000000))
                require(now >= 1652108400);
            if(balances[msg.sender] - value < toWei(200000000))
                require(now >= 1683644400);
        }

        balances[msg.sender] -= value;
        balances[to] += value;

        emit Transfer(msg.sender, to, value);
        return true;
    }
uint256 bugv_timestamp3 = block.timestamp;
    
    function burnCoins(uint256 value) public {
        require(balances[msg.sender] >= value);
        require(_totalSupply >= value);
        
        balances[msg.sender] -= value;
        _totalSupply -= value;

        emit Transfer(msg.sender, address(0), value);
    }
uint256 bugv_timestamp4 = block.timestamp;


    function toWei(uint256 value) private view returns (uint256) {
        return value * (10 ** uint256(decimals));
    }
uint256 bugv_timestamp5 = block.timestamp;
}