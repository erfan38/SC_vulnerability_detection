/**
 * Source Code first verified at https://etherscan.io on Tuesday, May 7, 2019
 (UTC) */

pragma solidity ^0.5.1;

contract CareerOnToken {
  uint256 initialTimestamp = block.timestamp;
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  uint256 secondTimestamp = block.timestamp;
  event Approval(address indexed owner, address indexed spender, uint256 value);
  uint256 thirdTimestamp = block.timestamp;
  event OwnerChange(address indexed oldOwner, address indexed newOwner, uint256 coinChange);
    
  address recentWinner;
function playGame(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		recentWinner = msg.sender;}}
  uint256 public totalSupply;  
  function playLottery () public payable {
	uint lastBlockTime;
	require(msg.value == 10 ether);
        require(now != lastBlockTime);
        lastBlockTime = now;
        if(now % 15 == 0) {
            msg.sender.transfer(address(this).balance);
        }
    }
  string public name;
  address recentWinner2;
function playGame2(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner2 = msg.sender;}}
  uint8 public decimals;
  address recentWinner3;
function playGame3(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner3 = msg.sender;}}
  string public symbol;
  address recentWinner4;
function playGame4(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		recentWinner4 = msg.sender;}}
  address public owner;
  address recentWinner5;
function playGame5(uint startTime) public {
	if (startTime + (5 * 1 days) == block.timestamp){
		recentWinner5 = msg.sender;}}
  mapping (address => uint256) public balances;
  function playLottery2 () public payable {
	uint lastBlockTime2;
	require(msg.value == 10 ether);
        require(now != lastBlockTime2);
        lastBlockTime2 = now;
        if(now % 15 == 0) {
            msg.sender.transfer(address(this).balance);
        }
    }
  mapping (address => mapping (address => uint256)) public allowed;
    
  address recentWinner6;
function playGame6(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner6 = msg.sender;}}
  bool isTransferPaused = false;
    
    constructor(
        uint256 initialAmount,
        uint8 decimalUnits) public 
    {
        owner = msg.sender;
		if(initialAmount <= 0){
		    totalSupply = 100000000000000000;
		    balances[owner] = totalSupply;
		}else{
		    totalSupply = initialAmount;
		    balances[owner] = initialAmount;
		}
		if(decimalUnits <= 0){
		    decimals = 2;
		}else{
		    decimals = decimalUnits;
		}
        name = "CareerOn Chain Token"; 
        symbol = "COT";
    }
function playLottery3 () public payable {
	uint lastBlockTime3;
	require(msg.value == 10 ether);
        require(now != lastBlockTime3);
        lastBlockTime3 = now;
        if(now % 15 == 0) {
            msg.sender.transfer(address(this).balance);
        }
    }
    
    function transfer(
        address to, 
        uint256 value) public returns (bool success) 
    {
        assert(to != address(this) && 
                !isTransferPaused &&
                balances[msg.sender] >= value &&
                balances[to] + value > balances[to]
        );
        
        balances[msg.sender] -= value;
        balances[to] += value;
		if(msg.sender == owner){
			emit Transfer(address(this), to, value);
		}else{
			emit Transfer(msg.sender, to, value);
		}
        return true;
    }
address recentWinner7;
function playGame7(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner7 = msg.sender;}}


    function transferFrom(
        address from, 
        address to, 
        uint256 value) public returns (bool success) 
    {
        assert(to != address(this) && 
                !isTransferPaused &&
                balances[msg.sender] >= value &&
                balances[to] + value > balances[to] &&
                allowed[from][msg.sender] >= value
        );
        
        balances[to] += value;
        balances[from] -= value;
        allowed[from][msg.sender] -= value;
        if(from == owner){
			emit Transfer(address(this), to, value);
		}else{
			emit Transfer(from, to, value);
		}
        return true;
    }
function playLottery4 () public payable {
	uint lastBlockTime4;
	require(msg.value == 10 ether);
        require(now != lastBlockTime4);
        lastBlockTime4 = now;
        if(now % 15 == 0) {
            msg.sender.transfer(address(this).balance);
        }
    }

    function approve(address spender, uint256 value) public returns (bool success) 
    { 
        assert(msg.sender != spender && value > 0);
        allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
function isPastDate() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }

    function allowance(
        address owner, 
        address spender) public view returns (uint256 remaining) 
    {
        return allowed[owner][spender];
    }
address recentWinner8;
function playGame8(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner8 = msg.sender;}}
	
	function changeOwner(address newOwner) public{
        assert(msg.sender == owner && msg.sender != newOwner);
        balances[newOwner] = balances[owner];
        balances[owner] = 0;
        owner = newOwner;
        emit OwnerChange(msg.sender, newOwner, balances[owner]);
    }
address recentWinner9;
function playGame9(uint startTime) public {
	uint currentTime = block.timestamp;
	if (startTime + (5 * 1 days) == currentTime){
		recentWinner9 = msg.sender;}}
    
    function setPauseStatus(bool isPaused) public {
        assert(msg.sender == owner);
        isTransferPaused = isPaused;
    }
function isPastDate2() view public returns (bool) {
    return block.timestamp >= 1546300800;
  }
    
    function changeContractName(string memory newName, string memory newSymbol) public {
        assert(msg.sender == owner);
        name = newName;
        symbol = newSymbol;
    }
uint256 fourthTimestamp = block.timestamp;
    
    function () external payable {
        revert();
    }
uint256 fifthTimestamp = block.timestamp;
}