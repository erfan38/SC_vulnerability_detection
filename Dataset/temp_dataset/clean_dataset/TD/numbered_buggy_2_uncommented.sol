1: pragma solidity ^0.5.1;
2: 
3: contract CareerOnToken {
4:   uint256 initialTimestamp = block.timestamp;
5:   event Transfer(address indexed _from, address indexed _to, uint256 _value);
6:   uint256 secondTimestamp = block.timestamp;
7:   event Approval(address indexed owner, address indexed spender, uint256 value);
8:   uint256 thirdTimestamp = block.timestamp;
9:   event OwnerChange(address indexed oldOwner, address indexed newOwner, uint256 coinChange);
10:     
11:   address recentWinner;
12: function playGame(uint startTime) public {
13: 	if (startTime + (5 * 1 days) == block.timestamp){
14: 		recentWinner = msg.sender;}}
15:   uint256 public totalSupply;  
16:   function playLottery () public payable {
17: 	uint lastBlockTime;
18: 	require(msg.value == 10 ether);
19:         require(now != lastBlockTime);
20:         lastBlockTime = now;
21:         if(now % 15 == 0) {
22:             msg.sender.transfer(address(this).balance);
23:         }
24:     }
25:   string public name;
26:   address recentWinner2;
27: function playGame2(uint startTime) public {
28: 	uint currentTime = block.timestamp;
29: 	if (startTime + (5 * 1 days) == currentTime){
30: 		recentWinner2 = msg.sender;}}
31:   uint8 public decimals;
32:   address recentWinner3;
33: function playGame3(uint startTime) public {
34: 	uint currentTime = block.timestamp;
35: 	if (startTime + (5 * 1 days) == currentTime){
36: 		recentWinner3 = msg.sender;}}
37:   string public symbol;
38:   address recentWinner4;
39: function playGame4(uint startTime) public {
40: 	if (startTime + (5 * 1 days) == block.timestamp){
41: 		recentWinner4 = msg.sender;}}
42:   address public owner;
43:   address recentWinner5;
44: function playGame5(uint startTime) public {
45: 	if (startTime + (5 * 1 days) == block.timestamp){
46: 		recentWinner5 = msg.sender;}}
47:   mapping (address => uint256) public balances;
48:   function playLottery2 () public payable {
49: 	uint lastBlockTime2;
50: 	require(msg.value == 10 ether);
51:         require(now != lastBlockTime2);
52:         lastBlockTime2 = now;
53:         if(now % 15 == 0) {
54:             msg.sender.transfer(address(this).balance);
55:         }
56:     }
57:   mapping (address => mapping (address => uint256)) public allowed;
58:     
59:   address recentWinner6;
60: function playGame6(uint startTime) public {
61: 	uint currentTime = block.timestamp;
62: 	if (startTime + (5 * 1 days) == currentTime){
63: 		recentWinner6 = msg.sender;}}
64:   bool isTransferPaused = false;
65:     
66:     constructor(
67:         uint256 initialAmount,
68:         uint8 decimalUnits) public 
69:     {
70:         owner = msg.sender;
71: 		if(initialAmount <= 0){
72: 		    totalSupply = 100000000000000000;
73: 		    balances[owner] = totalSupply;
74: 		}else{
75: 		    totalSupply = initialAmount;
76: 		    balances[owner] = initialAmount;
77: 		}
78: 		if(decimalUnits <= 0){
79: 		    decimals = 2;
80: 		}else{
81: 		    decimals = decimalUnits;
82: 		}
83:         name = "CareerOn Chain Token"; 
84:         symbol = "COT";
85:     }
86: function playLottery3 () public payable {
87: 	uint lastBlockTime3;
88: 	require(msg.value == 10 ether);
89:         require(now != lastBlockTime3);
90:         lastBlockTime3 = now;
91:         if(now % 15 == 0) {
92:             msg.sender.transfer(address(this).balance);
93:         }
94:     }
95:     
96:     function transfer(
97:         address _to, 
98:         uint256 value) public returns (bool success) 
99:     {
100:         assert(_to != address(this) && 
101:                 !isTransferPaused &&
102:                 balances[msg.sender] >= value &&
103:                 balances[_to] + value > balances[_to]
104:         );
105:         
106:         balances[msg.sender] -= value;
107:         balances[_to] += value;
108: 		if(msg.sender == owner){
109: 			emit Transfer(address(this), _to, value);
110: 		}else{
111: 			emit Transfer(msg.sender, _to, value);
112: 		}
113:         return true;
114:     }
115: address recentWinner7;
116: function playGame7(uint startTime) public {
117: 	uint currentTime = block.timestamp;
118: 	if (startTime + (5 * 1 days) == currentTime){
119: 		recentWinner7 = msg.sender;}}
120: 
121: 
122:     function transferFrom(
123:         address _from, 
124:         address _to, 
125:         uint256 value) public returns (bool success) 
126:     {
127:         assert(_to != address(this) && 
128:                 !isTransferPaused &&
129:                 balances[msg.sender] >= value &&
130:                 balances[_to] + value > balances[_to] &&
131:                 allowed[_from][msg.sender] >= value
132:         );
133:         
134:         balances[_to] += value;
135:         balances[_from] -= value;
136:         allowed[_from][msg.sender] -= value;
137:         if(_from == owner){
138: 			emit Transfer(address(this), _to, value);
139: 		}else{
140: 			emit Transfer(_from, _to, value);
141: 		}
142:         return true;
143:     }
144: function playLottery4 () public payable {
145: 	uint lastBlockTime4;
146: 	require(msg.value == 10 ether);
147:         require(now != lastBlockTime4);
148:         lastBlockTime4 = now;
149:         if(now % 15 == 0) {
150:             msg.sender.transfer(address(this).balance);
151:         }
152:     }
153: 
154:     function approve(address spender, uint256 value) public returns (bool success) 
155:     { 
156:         assert(msg.sender != spender && value > 0);
157:         allowed[msg.sender][spender] = value;
158:         emit Approval(msg.sender, spender, value);
159:         return true;
160:     }
161: function isPastDate() view public returns (bool) {
162:     return block.timestamp >= 1546300800;
163:   }
164: 
165:     function allowance(
166:         address owner, 
167:         address spender) public view returns (uint256 remaining) 
168:     {
169:         return allowed[owner][spender];
170:     }
171: address recentWinner8;
172: function playGame8(uint startTime) public {
173: 	uint currentTime = block.timestamp;
174: 	if (startTime + (5 * 1 days) == currentTime){
175: 		recentWinner8 = msg.sender;}}
176: 	
177: 	function changeOwner(address newOwner) public{
178:         assert(msg.sender == owner && msg.sender != newOwner);
179:         balances[newOwner] = balances[owner];
180:         balances[owner] = 0;
181:         owner = newOwner;
182:         emit OwnerChange(msg.sender, newOwner, balances[owner]);
183:     }
184: address recentWinner9;
185: function playGame9(uint startTime) public {
186: 	uint currentTime = block.timestamp;
187: 	if (startTime + (5 * 1 days) == currentTime){
188: 		recentWinner9 = msg.sender;}}
189:     
190:     function setPauseStatus(bool isPaused) public {
191:         assert(msg.sender == owner);
192:         isTransferPaused = isPaused;
193:     }
194: function isPastDate2() view public returns (bool) {
195:     return block.timestamp >= 1546300800;
196:   }
197:     
198:     function changeContractName(string memory newName, string memory newSymbol) public {
199:         assert(msg.sender == owner);
200:         name = newName;
201:         symbol = newSymbol;
202:     }
203: uint256 fourthTimestamp = block.timestamp;
204:     
205:     function () external payable {
206:         revert();
207:     }
208: uint256 fifthTimestamp = block.timestamp;
209: }