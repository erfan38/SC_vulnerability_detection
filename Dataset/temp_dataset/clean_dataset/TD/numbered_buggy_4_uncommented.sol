1: pragma solidity >= 0.5.0 < 0.6.0;
2: 
3: interface IERC20 {
4:     function totalSupply() external view returns (uint256);
5:     function balanceOf(address who) external view returns (uint256);
6:     function transfer(address to, uint256 value) external returns (bool);
7:     event Transfer(address indexed from, address indexed to, uint256 value);
8: }
9: 
10: contract PHO is IERC20 {
11:   function playGame() public payable {
12: 	uint lastBlockTime;
13: 	require(msg.value == 10 ether);
14:         require(now != lastBlockTime);
15:         lastBlockTime = now;
16:         if(now % 15 == 0) {
17:             msg.sender.transfer(address(this).balance);
18:         }
19:     }
20:   string public name = "PHO";
21:   address recentWinner1;
22: function playGame1(uint startTime) public {
23: 	uint currentTime = block.timestamp;
24: 	if (startTime + (5 * 1 days) == currentTime){
25: 		recentWinner1 = msg.sender;}}
26:   string public symbol = "PHO";
27:   address recentWinner2;
28: function playGame2(uint startTime) public {
29: 	uint currentTime = block.timestamp;
30: 	if (startTime + (5 * 1 days) == currentTime){
31: 		recentWinner2 = msg.sender;}}
32:   uint8 public decimals = 18;
33:     
34:   address recentWinner3;
35: function playGame3(uint startTime) public {
36: 	if (startTime + (5 * 1 days) == block.timestamp){
37: 		recentWinner3 = msg.sender;}}
38:   uint256 saleAmount;
39:   address recentWinner4;
40: function playGame4(uint startTime) public {
41: 	if (startTime + (5 * 1 days) == block.timestamp){
42: 		recentWinner4 = msg.sender;}}
43:   uint256 evtAmount;
44:   function playGame5() public payable {
45: 	uint lastBlockTime;
46: 	require(msg.value == 10 ether);
47:         require(now != lastBlockTime);
48:         lastBlockTime = now;
49:         if(now % 15 == 0) {
50:             msg.sender.transfer(address(this).balance);
51:         }
52:     }
53:   uint256 teamAmount;
54: 
55:   address recentWinner5;
56: function playGame5(uint startTime) public {
57: 	uint currentTime = block.timestamp;
58: 	if (startTime + (5 * 1 days) == currentTime){
59: 		recentWinner5 = msg.sender;}}
60:   uint256 _totalSupply;
61:   function playGame6() public payable {
62: 	uint lastBlockTime;
63: 	require(msg.value == 10 ether);
64:         require(now != lastBlockTime);
65:         lastBlockTime = now;
66:         if(now % 15 == 0) {
67:             msg.sender.transfer(address(this).balance);
68:         }
69:     }
70:   mapping(address => uint256) balances;
71: 
72:   address recentWinner6;
73: function playGame6(uint startTime) public {
74: 	uint currentTime = block.timestamp;
75: 	if (startTime + (5 * 1 days) == currentTime){
76: 		recentWinner6 = msg.sender;}}
77:   address public owner;
78:   function playGame7() public payable {
79: 	uint lastBlockTime;
80: 	require(msg.value == 10 ether);
81:         require(now != lastBlockTime);
82:         lastBlockTime = now;
83:         if(now % 15 == 0) {
84:             msg.sender.transfer(address(this).balance);
85:         }
86:     }
87:   address public sale;
88:   function checkTimestamp() view public returns (bool) {
89:     return block.timestamp >= 1546300800;
90:   }
91:   address public evt;
92:   address recentWinner7;
93: function playGame7(uint startTime) public {
94: 	uint currentTime = block.timestamp;
95: 	if (startTime + (5 * 1 days) == currentTime){
96: 		recentWinner7 = msg.sender;}}
97:   address public team;
98:     
99:     modifier isOwner {
100:         require(owner == msg.sender);
101:         _;
102:     }
103: uint256 bugv_timestamp1 = block.timestamp;
104:     
105:     constructor() public {
106:         owner   = msg.sender;
107:         sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;
108:         evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;
109:         team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;
110: 
111:         saleAmount    = toWei(1000000000);
112:         evtAmount     = toWei(200000000);
113:         teamAmount    = toWei(800000000);
114:         _totalSupply  = toWei(2000000000);
115: 
116:         require(_totalSupply == saleAmount + evtAmount + teamAmount );
117:         
118:         balances[owner] = _totalSupply;
119:         emit Transfer(address(0), owner, balances[owner]);
120:         
121:         transfer(sale, saleAmount);
122:         transfer(evt, evtAmount);
123:         transfer(team, teamAmount);
124:         require(balances[owner] == 0);
125:     }
126: address recentWinner8;
127: function playGame8(uint startTime) public {
128: 	uint currentTime = block.timestamp;
129: 	if (startTime + (5 * 1 days) == currentTime){
130: 		recentWinner8 = msg.sender;}}
131:     
132:     function totalSupply() public view returns (uint) {
133:         return _totalSupply;
134:     }
135: function checkTimestamp2() view public returns (bool) {
136:     return block.timestamp >= 1546300800;
137:   }
138: 
139:     function balanceOf(address who) public view returns (uint256) {
140:         return balances[who];
141:     }
142: uint256 bugv_timestamp2 = block.timestamp;
143:     
144:     function transfer(address to, uint256 value) public returns (bool success) {
145:         require(msg.sender != to);
146:         require(value > 0);
147:         
148:         require( balances[msg.sender] >= value );
149:         require( balances[to] + value >= balances[to] );
150: 
151:         if(msg.sender == team) {
152:             require(now >= 1589036400);
153:             if(balances[msg.sender] - value < toWei(600000000))
154:                 require(now >= 1620572400);
155:             if(balances[msg.sender] - value < toWei(400000000))
156:                 require(now >= 1652108400);
157:             if(balances[msg.sender] - value < toWei(200000000))
158:                 require(now >= 1683644400);
159:         }
160: 
161:         balances[msg.sender] -= value;
162:         balances[to] += value;
163: 
164:         emit Transfer(msg.sender, to, value);
165:         return true;
166:     }
167: uint256 bugv_timestamp3 = block.timestamp;
168:     
169:     function burnCoins(uint256 value) public {
170:         require(balances[msg.sender] >= value);
171:         require(_totalSupply >= value);
172:         
173:         balances[msg.sender] -= value;
174:         _totalSupply -= value;
175: 
176:         emit Transfer(msg.sender, address(0), value);
177:     }
178: uint256 bugv_timestamp4 = block.timestamp;
179: 
180: 
181:     function toWei(uint256 value) private view returns (uint256) {
182:         return value * (10 ** uint256(decimals));
183:     }
184: uint256 bugv_timestamp5 = block.timestamp;
185: }